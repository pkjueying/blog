{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/avatar/avatar_01.jpg","path":"img/avatar/avatar_01.jpg","modified":1,"renderable":0},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1,"renderable":1},{"_id":"source/img/avatar/avatar_02.jpg","path":"img/avatar/avatar_02.jpg","modified":1,"renderable":0},{"_id":"source/img/binder/proxy_uml.jpg","path":"img/binder/proxy_uml.jpg","modified":1,"renderable":0},{"_id":"source/img/binder/binder-跨进程原理.jpg","path":"img/binder/binder-跨进程原理.jpg","modified":1,"renderable":0},{"_id":"source/img/binder/binder-通信模型.jpg","path":"img/binder/binder-通信模型.jpg","modified":1,"renderable":0},{"_id":"source/img/binder/Binder框架.jpg","path":"img/binder/Binder框架.jpg","modified":1,"renderable":0},{"_id":"source/img/binder/binder通信概述.jpg","path":"img/binder/binder通信概述.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"23bd1347abd9837ff272373b85f00e1d6b3e6d14","modified":1463469868000},{"_id":"source/CNAME","hash":"8b188e08b9f943fec2c1a6f143178553ef4692f1","modified":1463469861000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1463479532000},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1463479532000},{"_id":"themes/maupassant/README.md","hash":"0e271dc27e3e6cfc467baccec8c86bd5dfa3cefc","modified":1463479532000},{"_id":"themes/maupassant/_config.yml","hash":"7b5ee8699e8b50db3e30713bf9737a3e6dfb7e31","modified":1463551742000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1463479532000},{"_id":"themes/maupassant/.git/lastupdatetime","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463552322000},{"_id":"source/_posts/binder01.md","hash":"3930fbd6314a9b2bc9060409c12154d88a8bf94f","modified":1463540518000},{"_id":"source/_posts/thingking-everyday.md","hash":"b84d590a52306f7cb66039fe269bb29dfdaa7591","modified":1463540617000},{"_id":"source/_posts/罗马人的故事01.md","hash":"bfe4f151ee44de35c381269c0d718ecdc33ff069","modified":1463540408000},{"_id":"source/history/index.md","hash":"df1393f293b600f106e83cd4732ddd67bd056f96","modified":1463551662000},{"_id":"source/book/index.md","hash":"1662a7f4055b1c9588f901fa87aecb80ac4914e1","modified":1463551748000},{"_id":"source/about/index.md","hash":"89c23d58b2fe3c14738ff3baeae0f96d0e36120b","modified":1463553626000},{"_id":"source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1463467076000},{"_id":"themes/maupassant/.git/FETCH_HEAD","hash":"ff5de53e9aa1f9c3e5fbd93f9eb2888406a37c8e","modified":1463552325000},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1463479532000},{"_id":"themes/maupassant/.git/ORIG_HEAD","hash":"8f5cebc785d2fe0fb16a1cb94260b56963d4c19b","modified":1463538188000},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1463479532000},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1463479524000},{"_id":"themes/maupassant/.git/index","hash":"987053296971fb7ea1b68391f768dc0b242e3232","modified":1463538172000},{"_id":"themes/maupassant/.git/packed-refs","hash":"e3cb7fdef9a716ec7720ef1fc4fe71e6e900895e","modified":1463479532000},{"_id":"themes/maupassant/languages/.zh-CN.yml.swp","hash":"6c80825297beeead703c8a037b169ae0ac51ddea","modified":1463553062000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1463479532000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1463479532000},{"_id":"themes/maupassant/languages/en.yml","hash":"261167e01fc9594aa30d400c2478e78b3d08c328","modified":1463552352000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1463479532000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1463479532000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"5e1140eb461a3a6ee24b028864f8ed8bf6543c37","modified":1463552322000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1463479532000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1463479532000},{"_id":"themes/maupassant/layout/base.jade","hash":"6af2f0978ba3bd75b5d1ca4120fcaf0b9bdaf74d","modified":1463479532000},{"_id":"themes/maupassant/layout/index.jade","hash":"7466ce52023ed8a413a6b4461354a9e20e62fc14","modified":1463479532000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1463479532000},{"_id":"themes/maupassant/layout/post.jade","hash":"345a38da51017d42380ac22e1070969fc70d2f8d","modified":1463542135000},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1463479532000},{"_id":"source/img/avatar/avatar_01.jpg","hash":"10a9ed103d726a81aa42ff11e1368ead020b5549","modified":1463466900000},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1463479524000},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1463479524000},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1463479524000},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1463479524000},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1463479524000},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1463479524000},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1463479524000},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1463479524000},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1463479524000},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1463479524000},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"448809e1cd3141d73840deac80950a14c843119a","modified":1463479532000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"3dbcc9a9f0d6e55da191d3393c18bbfcfe99fa69","modified":1463479532000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1463479532000},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"aa020b794e697e8e9612530c97c6295efde469fe","modified":1463479532000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1463479532000},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1463479532000},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1463479532000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1463479532000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1463479532000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1463479532000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1463479532000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"c53ac5e5d44fa99705ae0e212435095e493ea65e","modified":1463479532000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1463479532000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1463479532000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1463479532000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1463479532000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1463479532000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1463479532000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1463479532000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1463479532000},{"_id":"themes/maupassant/source/css/style.scss","hash":"79e83709c3b7126e105beaa6f3918370969bb1af","modified":1463479532000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1463479532000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1463479532000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1463479532000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1463479532000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1463479532000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1463479532000},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1463479532000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1463479532000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1463479532000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1463479532000},{"_id":"source/img/avatar/avatar_02.jpg","hash":"9352d0da128ecca305c57448dd6010ebb40050a9","modified":1463466902000},{"_id":"source/img/binder/proxy_uml.jpg","hash":"8f51c6397a794e54fdc9db7922135eeed6b4693e","modified":1459863496000},{"_id":"source/img/binder/binder-跨进程原理.jpg","hash":"3ba2641bee4ac9cf796e10c28e9788ee14f541ad","modified":1459952051000},{"_id":"source/img/binder/binder-通信模型.jpg","hash":"569bb26382c1d33687f1e79f53dd17998a208ff3","modified":1459952165000},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"8f5cebc785d2fe0fb16a1cb94260b56963d4c19b","modified":1463479532000},{"_id":"themes/maupassant/.git/objects/pack/pack-b760c1b6a24ad7ec7d2c75ab85a3a82f017c987f.idx","hash":"bf5a447249750ad48d52a2124a0bf79ac9c66977","modified":1463479532000},{"_id":"source/img/binder/Binder框架.jpg","hash":"11c434339e2facbfbc9bed99f8a1062ed9b67e94","modified":1459997187000},{"_id":"source/img/binder/binder通信概述.jpg","hash":"82f023e2adfe74133fe7f146419b2bff95c001dc","modified":1459847645000},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"448809e1cd3141d73840deac80950a14c843119a","modified":1463479532000},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1463479532000},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"448809e1cd3141d73840deac80950a14c843119a","modified":1463479532000},{"_id":"themes/maupassant/.git/objects/pack/pack-b760c1b6a24ad7ec7d2c75ab85a3a82f017c987f.pack","hash":"6f137486031f2909471c32341435e8b55757d6f3","modified":1463479532000},{"_id":"public/search.xml","hash":"295c152298462ecbe20ee20dada9536c5daf5d75","modified":1463553633151},{"_id":"public/404.html","hash":"6ce05f1b9042fd22c33240dbf7a2ec85f7a9e92d","modified":1463553633158},{"_id":"public/history/index.html","hash":"21b3c1244adf920437a38469a902ae1bf540d928","modified":1463553633158},{"_id":"public/book/index.html","hash":"125e4c6fd593ad1372e47cb6200667a4b5b5842e","modified":1463553633158},{"_id":"public/about/index.html","hash":"a8aff364aea5640ea8a87f1cd6a8b973e39e8c25","modified":1463553633158},{"_id":"public/2016/05/18/罗马人的故事01/index.html","hash":"df0f5cbe2a724004c75b547ce466e26a386c7a54","modified":1463553633158},{"_id":"public/2016/05/17/thingking-everyday/index.html","hash":"906dc3984f66f3b57c65b292a695f847195b22c6","modified":1463553633159},{"_id":"public/archives/index.html","hash":"df70ef41384a43b67af88c05a646efba46cd54c2","modified":1463553633159},{"_id":"public/archives/2016/index.html","hash":"df70ef41384a43b67af88c05a646efba46cd54c2","modified":1463553633159},{"_id":"public/archives/2016/05/index.html","hash":"df70ef41384a43b67af88c05a646efba46cd54c2","modified":1463553633159},{"_id":"public/categories/android/index.html","hash":"40c8fb472bab95b39a65491d8f81815add3457fe","modified":1463553633159},{"_id":"public/categories/history/index.html","hash":"99c64317a90d09af31305be67fdf186ec2b2b881","modified":1463553633159},{"_id":"public/index.html","hash":"7f762434dfe4a80a3d6acc898ec485819bcd90dd","modified":1463553633159},{"_id":"public/tags/android/index.html","hash":"40c8fb472bab95b39a65491d8f81815add3457fe","modified":1463553633159},{"_id":"public/tags/binder/index.html","hash":"0f53ac777eb9894d29ecca3348a0ec54097ffdac","modified":1463553633159},{"_id":"public/tags/life/index.html","hash":"ecf6da5950ef46e04dd74d5a2abf31a766e48bed","modified":1463553633159},{"_id":"public/tags/book/index.html","hash":"166091ddfe876a1166d68c358302301d2d5712b9","modified":1463553633159},{"_id":"public/2016/05/17/binder01/index.html","hash":"a4e6e1184ae48ae3a58289f0167d5fd3337f1d4a","modified":1463553633160},{"_id":"public/CNAME","hash":"8b188e08b9f943fec2c1a6f143178553ef4692f1","modified":1463553633168},{"_id":"public/img/avatar/avatar_01.jpg","hash":"10a9ed103d726a81aa42ff11e1368ead020b5549","modified":1463553633168},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1463553633168},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1463553633168},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1463553633168},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1463553633168},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1463553633168},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1463553633168},{"_id":"public/img/avatar/avatar_02.jpg","hash":"9352d0da128ecca305c57448dd6010ebb40050a9","modified":1463553633191},{"_id":"public/img/binder/proxy_uml.jpg","hash":"8f51c6397a794e54fdc9db7922135eeed6b4693e","modified":1463553633193},{"_id":"public/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1463553633197},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1463553633198},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1463553633198},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1463553633198},{"_id":"public/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1463553633198},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1463553633198},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1463553633198},{"_id":"public/css/style.css","hash":"5e031463c49be0e099889655aaec8538d489b43d","modified":1463553633198},{"_id":"public/img/binder/binder-跨进程原理.jpg","hash":"3ba2641bee4ac9cf796e10c28e9788ee14f541ad","modified":1463553633198},{"_id":"public/img/binder/binder-通信模型.jpg","hash":"569bb26382c1d33687f1e79f53dd17998a208ff3","modified":1463553633198},{"_id":"public/img/binder/Binder框架.jpg","hash":"11c434339e2facbfbc9bed99f8a1062ed9b67e94","modified":1463553633199},{"_id":"public/img/binder/binder通信概述.jpg","hash":"82f023e2adfe74133fe7f146419b2bff95c001dc","modified":1463553633199}],"Category":[{"name":"android","_id":"cioci1m370006dbvrkqn0ifs8"},{"name":"history","_id":"cioci1m3a0009dbvrjlq1xm8x"}],"Data":[],"Page":[{"_content":"<p>&lt;!DOCTYPE HTML&gt;</p>\n<html><br><head><br>    <meta charset=\"UTF-8\"><br></head><br><body><br><!--\n<!DOCTYPE HTML>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>公益404 | 不如</title>\n</head>\n<body>\n<h1>404 Page Not Found</h1>\n--><br><script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script><br><!--\n公益404介接入地址\n益云公益404 http://yibo.iyiyun.com/Index/web404\n腾讯公益404 http://www.qq.com/404\n失蹤兒童少年資料管理中心404 http://404page.missingkids.org.tw\n--><br></body><br></html>\n\n","source":"404.html","raw":"<p>&lt;!DOCTYPE HTML&gt;</p>\n<html><br><head><br>    <meta charset=\"UTF-8\"><br></head><br><body><br><!--\n<!DOCTYPE HTML>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>公益404 | 不如</title>\n</head>\n<body>\n<h1>404 Page Not Found</h1>\n--><br><script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script><br><!--\n公益404介接入地址\n益云公益404 http://yibo.iyiyun.com/Index/web404\n腾讯公益404 http://www.qq.com/404\n失蹤兒童少年資料管理中心404 http://404page.missingkids.org.tw\n--><br></body><br></html>\n\n","date":"2016-05-17T07:24:28.000Z","updated":"2016-05-17T07:24:28.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cioci1m290000dbvrqa5nvyaa","content":"<p>&lt;!DOCTYPE HTML&gt;</p>\n<html><br><head><br>    <meta charset=\"UTF-8\"><br></head><br><body><br><!--\n<!DOCTYPE HTML>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>公益404 | 不如</title>\n</head>\n<body>\n<h1>404 Page Not Found</h1>\n--><br><script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script><br><!--\n公益404介接入地址\n益云公益404 http://yibo.iyiyun.com/Index/web404\n腾讯公益404 http://www.qq.com/404\n失蹤兒童少年資料管理中心404 http://404page.missingkids.org.tw\n--><br></body><br></html>\n\n","excerpt":"","more":"<p>&lt;!DOCTYPE HTML&gt;</p>\n<html><br><head><br>    <meta charset=\"UTF-8\"><br></head><br><body><br><!--\n<!DOCTYPE HTML>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>公益404 | 不如</title>\n</head>\n<body>\n<h1>404 Page Not Found</h1>\n--><br><script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script><br><!--\n公益404介接入地址\n益云公益404 http://yibo.iyiyun.com/Index/web404\n腾讯公益404 http://www.qq.com/404\n失蹤兒童少年資料管理中心404 http://404page.missingkids.org.tw\n--><br></body><br></html>\n\n"},{"title":"history","date":"2016-05-18T06:07:42.000Z","_content":"","source":"history/index.md","raw":"---\ntitle: history\ndate: 2016-05-18 14:07:42\n---\n","updated":"2016-05-18T06:07:42.000Z","path":"history/index.html","comments":1,"layout":"page","_id":"cioci1m320002dbvrxiakjhx3","content":"","excerpt":"","more":""},{"title":"book","date":"2016-05-18T06:09:08.000Z","_content":"","source":"book/index.md","raw":"---\ntitle: book\ndate: 2016-05-18 14:09:08\n---\n","updated":"2016-05-18T06:09:08.000Z","path":"book/index.html","comments":1,"layout":"page","_id":"cioci1m340004dbvrynmgf23p","content":"","excerpt":"","more":""},{"title":"关于","date":"2016-05-18T05:42:38.000Z","_content":"\n<i class=\"fa fa-user\"></i> Nickname: <a href=\"http://share2your.info\">DrogonLong</a>\n<i class=\"fa fa-envelope\"></i> Email: <a href=\"mailto:13798560785@126.com\" target=\"_blank\" rel=\"external\">13798560785@126.com</a>\n<i class=\"fa fa-github\"></i> Github: <a href=\"https://github.com/pkjueying\" target=\"_blank\" rel=\"external\">@DrogonLong</a>\n<i class=\"fa fa-twitter\"></i> Twitter: <a href=\"https://twitter.com/pkjueying\" target=\"_blank\" rel=\"external\">@zfltjl080519</a>\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2016-05-18 13:42:38\n---\n\n<i class=\"fa fa-user\"></i> Nickname: <a href=\"http://share2your.info\">DrogonLong</a>\n<i class=\"fa fa-envelope\"></i> Email: <a href=\"mailto:13798560785@126.com\" target=\"_blank\" rel=\"external\">13798560785@126.com</a>\n<i class=\"fa fa-github\"></i> Github: <a href=\"https://github.com/pkjueying\" target=\"_blank\" rel=\"external\">@DrogonLong</a>\n<i class=\"fa fa-twitter\"></i> Twitter: <a href=\"https://twitter.com/pkjueying\" target=\"_blank\" rel=\"external\">@zfltjl080519</a>\n\n","updated":"2016-05-18T06:40:26.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cioci1mi3000idbvrw1emcdsz","content":"<p><i class=\"fa fa-user\"></i> Nickname: <a href=\"http://share2your.info\" target=\"_blank\" rel=\"external\">DrogonLong</a><br><i class=\"fa fa-envelope\"></i> Email: <a href=\"mailto:13798560785@126.com\" target=\"_blank\" rel=\"external\">13798560785@126.com</a><br><i class=\"fa fa-github\"></i> Github: <a href=\"https://github.com/pkjueying\" target=\"_blank\" rel=\"external\">@DrogonLong</a><br><i class=\"fa fa-twitter\"></i> Twitter: <a href=\"https://twitter.com/pkjueying\" target=\"_blank\" rel=\"external\">@zfltjl080519</a></p>\n","excerpt":"","more":"<p><i class=\"fa fa-user\"></i> Nickname: <a href=\"http://share2your.info\">DrogonLong</a><br><i class=\"fa fa-envelope\"></i> Email: <a href=\"mailto:13798560785@126.com\" target=\"_blank\" rel=\"external\">13798560785@126.com</a><br><i class=\"fa fa-github\"></i> Github: <a href=\"https://github.com/pkjueying\" target=\"_blank\" rel=\"external\">@DrogonLong</a><br><i class=\"fa fa-twitter\"></i> Twitter: <a href=\"https://twitter.com/pkjueying\" target=\"_blank\" rel=\"external\">@zfltjl080519</a></p>\n"}],"Post":[{"title":"binder简要学习","date":"2016-05-17T05:36:49.000Z","comment":true,"toc":true,"description":"理解Binder对于理解整个Android系统有着非常重要的作用，Android系统的四大组件，AMS，PMS等系统服务无一不与Binder挂钩","_content":"\n# Binder \n\n### 本文目标\n\n理解Binder对于理解整个Android系统有着非常重要的作用，Android系统的四大组件，AMS，PMS等系统服务无一不与Binder挂钩；如果对Binder不甚了解，那么就很难了解这些系统机制.\n\n要真正的弄明白 Binder机制 还是比较麻烦的，我们今天只是大致的介绍一下在应用层怎么使用\n\n本文目标:\n\n* 不依赖AIDL工具，手写远程Service完成跨进程通信\n\n* 弄明白AIDL生成的相关代码\n\n* 以及基于AIDL代码的分析，了解系统相关服务的代码逻辑.\n\n\n### Linux相关概念\n\n因为是讲进程间的通信，而android又是基于linux，所以对于linux系统需要一定的了解.\n推荐 [linux内核设计与实现](https://book.douban.com/subject/1503819/) 其主要是讲一些系统概念\n\n\n* 操作系统的不同进程之间，数据不共享；对于每个进程来说，都以为自己独享了整个系统，完全不知道其他进程的存在；因此一个进程需要与另外一个进程通信，需要某种 **系统机制** 才能完成。\n\n* 用户程序只可以访问某些许可的资源，不许可的资源是拒绝被访问的，于是认为的就把Kernel和上层的应用程序抽像的隔离开，分别称之为 **内核空间(Kernel Space)** 和 **用户空间(User Space)** .\n\n* 用户空间访问内核空间的唯一方式就是 **系统调用** ；通过这个统一入口，所有的资源访问都是在内核的控制下执行，以免导致用户程序对系统资源的越权访问，从而保障了系统的安全和稳定.\n\n* 当一个任务（进程）执行系统调用而陷入内核代码中执行时，我们就称进程处于 **内核运行态** 此时处理器处于特权级最高的内核代码中执行。当进程在执行用户自己的代码时，则称其处于 **用户运行态**（用户态）。处理器在特权等级高的时候才能执行那些特权CPU指令。\n\n* 通过系统调用，用户空间可以访问内核空间. 如果一个用户空间想与另外一个用户空间进行通信，一般是需要操作系统内核添加支持. \n\n* Linux有个比较好的机制，就是可以 **动态加载内核模块** ；**模块** 是具有独立功能的程序，它可以被单独编译，但不能独立运行。它在运行时被链接到内核作为内核的一部分在内核空间运行。\n\n\t这样，Android系统就可以在Linux的基础之上，通过添加一个内核模块运行在内核空间，用户进程之间可通过这个模块完成通信。这个模块就是所谓的 **Binder驱动** .\n\n\t尽管名叫‘驱动’，实际上和硬件设备没有任何关系，只是实现方式和设备驱动程序是一样的：它工作于内核态，提供open()，mmap()，poll()，ioctl()等标准文件设备的操作.\n\n* Linux已拥有的进程间通信IPC手段包括： Pipe、Signal、Socket、Message、Share Memory 和信号量Semaphore.\n\n### 为何使用Binder\n\n为什么要单独弄一套， 而不是使用linux系统提供的那些进程间通信的方式\n\n主要是考虑到性能和安全，还有易用. \n\n* 最易想到的就是利用存储-转发机制：使用Linux 提供的系统调用接口：copy_from_user()和copy_to_user() 来实现进程间通信，缺点是效率低下，需要做两次拷贝：用户空间->内核空间->用户空间。\n\n* Binder驱动 为了实现用户空间到用户空间的拷贝，mmap()分配的内存除了映射进了接收方进程里，还映射进了内核空间。所以调用copy_from_user()将数据拷贝进内核空间也相当于拷贝进了接收方的用户空间， 所以Binder机制只需要一次拷贝。\n\n* 而共享内存的话，效率比较高， 但控制复杂....\n\n* 安全性: 传统IPC没有任何安全措施，完全依赖上层协议来确保；传统IPC访问接入点是开放的，无法建立私有通道；例如Socket通信的话，socket的ip地址或文件名都是开放的，只要知道这些接入点的程序都可以和对端建立连接，不管怎样都无法阻止恶意程序通过猜测接收方地址获得连接。\n\n> Binder基于Client-Server通信模式，传输过程只需一次拷贝，为发送发添加UID/PID身份，既支持实名Binder也支持匿名Binder，安全性高。\n\n\n\n### Binder通信模型\n\n\n应用层大家所熟知的通信结构， 如下图:\n    \n![Binder通信概述](/img/binder/binder通信概述.jpg)\n\n1. 从表面上来看，是client通过获得一个server的代理接口，对server进行直接调用；\n2. 实际上，代理接口中定义的方法与server中定义的方法是一一对应的；\n3. client调用某个代理接口中的方法时，代理接口的方法会将client传递的参数打包成为Parcel对象；\n4. 代理接口将该Parcel发送给内核中的binder driver.\n5. server会读取binder driver中的请求数据，如果是发送给自己的，解包Parcel对象，处理并将结果返回；\n6. 整个的调用过程是一个同步过程，在server处理的时候，client会block住。\n\n\n在整个Binder系统中，Binder框架定义了四个角色：Server，Client，ServiceManager 以及Binder驱动。其中Server，Client，SM运行于用户空间，驱动运行于内核空间\n\n![Binder通信模型](/img/binder/binder-通信模型.jpg)\n\n整个步骤如下: \n\n* SM建立；首先有一个进程向驱动提出申请为SM；驱动同意之后，SM进程负责管理Service.\n\n* 各个Server向SM注册；将Server自己的名字和内存地址报告给SM; 这样SM就建立了一张表，对应着各个Server的名字和地址\n\n* Client想要与Server通信，首先询问SM；通过服务名获取到对应的内存地址；Client收到之后，就可以进行通信了.\n\n\t可以看出驱动是整个通信过程的核心，完成跨进程通信的秘密全部隐藏在驱动里面；这里Client与SM的通信，以及Client与Server的通信，都会经过驱动\n\t\n\t\n> 相关接口可参见 native/libs/binder/IServiceManager.cpp  以及对应的native 层 service_manager.c\n\n\n### Binder机制跨进程原理\n\n![Binder机制跨进程原理](/img/binder/binder-跨进程原理.jpg)\n\n* 首先，Server进程要向SM注册；告诉自己是谁，自己有什么能力;在这个场景就是Server告诉SM，它叫AAA，它有一个object对象，可以执行add 操作；于是SM建立了一张表：AAA这个名字对应进程Server; 如原代码中 .//native/libs/binder/IServiceManager.cpp\n\n\t\tvirtual status_t addService(const String16& name, const sp<IBinder>& service,\n            bool allowIsolated)\n\t    {\n    \t    Parcel data, reply;\n\t\tdata.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());\n        \tdata.writeString16(name);\n        \tdata.writeStrongBinder(service);\n\t        data.writeInt32(allowIsolated ? 1 : 0);\n    \t    status_t err = remote()->transact(ADD_SERVICE_TRANSACTION, data, &reply);\n        \treturn err == NO_ERROR ? reply.readExceptionCode() : err;\n    \t}\n\n* 然后Client向SM查询：名字叫做AAA的进程里面的object对象；进程之间通信的数据都会经过运行在内核空间里面的驱动，驱动在数据流过的时候会做一些处理，它并不会给Client进程返回一个真正的object对象，而是返回一个看起来跟object一模一样的代理对象objectProxy，这个objectProxy也有一个add方法，但是这个add方法没有Server进程里面object对象的add方法那个能力；它唯一做的事情就是把参数包装然后交给驱动。\n\n* 驱动收到这个消息，发现是这个objectProxy；通过查表就知道：之前用objectProxy替换了object发送给Client了，它真正应该要访问的是object对象的add方法；于是Binder驱动通知Server进程，调用它的object对象的add方法，然后把结果发给binder驱动，Sever进程收到这个消息，执行add之后将结果返回驱动，驱动然后把结果返回给Client进程；于是整个过程就完成了.\n\nBinder跨进程传输并不是真的把一个对象传输到了另外一个进程；传输过程是在Binder跨进程穿越的时候，它在一个进程留下了一个本体，在另外一个进程则使用该对象的一个proxy；Client进程的操作其实是对于proxy的操作，proxy利用Binder驱动最终让真正的binder对象完成操作。\n\nAndroid系统实现这种机制使用的是代理模式, 对于Binder的访问，如果是在同一个进程，那么直接返回原始的Binder实体；如果在不同进程，那么就给他一个代理对象- 在后面的demo中我们可以看见...\n\t\n\tpublic static ICalculate asInterface(IBinder obj) {\n            if(obj == null) {\n                return null;\n            } else {\n                IInterface iin = obj.queryLocalInterface(\"com.zhangfl.jpush.ICalculate\");\n                return (ICalculate)(iin != null && iin instanceof ICalculate?(ICalculate)iin:new ICalculate.Stub.Proxy(obj));\n            }\n        }\n        \n\n> Client进程只不过是持有了Server端的代理；代理对象协助驱动完成了跨进程通信。\n\n### proxy代理模式\n\n模式中的三种角色:\n\n![proxy设计模式](/img/binder/proxy_uml.jpg)\n\n* 抽象角色：声明真实对象和代理对象的共同接口。\n\n* 代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。\n\n* 真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。\n\n> 模式原则: 对修改关闭，对扩展开放，保证了系统的稳定性\n\n\n\n### 驱动里面的Binder\n\n\n略过:  具体可以参考源码以及 [Binder设计与实现](http://blog.csdn.net/universus/article/details/6211589) 一文\n\n\n### Java层的Binder\n\nIBinder/IInterface/Binder/BinderProxy/Stub\n\n* IBinder是一个接口，它代表了一种跨进程传输的能力；只要实现了这个接口，就能将这个对象进行跨进程传递；这是驱动底层支持的；在跨进程数据流经驱动的时候，驱动会识别IBinder类型的数据，从而自动完成不同进程Binder本地对象以及Binder代理对象的转换。\n\n* IInterface代表的就是远程server对象具有的能力。具体来说，就是aidl里面的接口。\n\n* Java层的Binder类，代表的其实就是Binder本地对象。BinderProxy类是Binder类的一个内部类，它代表远程进程的Binder对象的本地代理；这两个类都继承自IBinder, 因而都具有跨进程传输的能力；实际上，在跨越进程的时候，Binder驱动会自动完成这两个对象的转换。\n\n* 在使用AIDL的时候，编译工具会给我们生成一个Stub的静态内部类；这个类继承了Binder, 说明它是一个Binder本地对象，它实现了IInterface接口，表明它具有远程Server承诺给Client的能力；Stub是一个抽象类，具体的IInterface的相关实现需要我们手动完成. 其实这里使用了策略模式.\n\n### AIDL过程分析\n\n一种固定的模式：\n\n* 一个需要跨进程传递的对象一定继承自IBinder，如果是Binder本地对象，那么一定继承Binder实现IInterface，如果是代理对象，那么就实现了IInterface并持有IBinder引用；\n\nProxy与Stub不一样，虽然他们都既是Binder又是IInterface，不同的是Stub采用的是继承（is 关系），Proxy采用的是组合（has 关系）。他们均实现了所有的IInterface函数，不同的是，Stub使用策略模式调用的是虚函数（待子类实现），而Proxy则使用组合模式。为什么Stub采用继承而Proxy采用组合？事实上，Stub本身is一个IBinder（Binder），它本身就是一个能跨越进程边界传输的对象，所以它得继承IBinder实现transact这个函数从而得到跨越进程的能力（这个能力由驱动赋予）。Proxy类使用组合，是因为他不关心自己是什么，它也不需要跨越进程传输，它只需要拥有这个能力即可，要拥有这个能力，只需要保留一个对IBinder的引用\n\n\n### demo.\n\n......\n\n\n### 系统服务分析\n\nIXXX、IXXX.Stub和IXXX.Stub.Proxy，并做好对应。这样看相关的系统服务就比较容易了，以ServiceManager为例\n\n实际上ServerManager既是系统服务的管理者，同时也是一个系统服务。因此它肯定是基于Binder实现的\n\n- 与IXXX相对应的类就是IServiceManager类，封装了远程调用的几个主要函数\n\n- 与IXXX.Stub对应的类就是ServiceManagerNative\n\n- 与IXXX.Stub.Proxy对应的类ServiceManagerProxy\n\n\t查看上面相关类的代码，实际上和使用adil生成的代码没什么两样。仅仅是类命名不一样，将三个类分开写了而已。\n\n\t在服务端继承ServiceManagerNative类实现里面的相关方法就能实现服务端，然后在客户端将远程服务端所对应的的Binder封装成：\n\t\n\tIServiceManager iSm = ServiceManagerNative.asInterface(binder)即可\n\n\tPS： 实际上，在源码中找不到继承自ServiceManagerNative类的远程服务端类ServiceManagerService，根本就找不到这样一个类。原因是SMS在native层被实现成一个独立的进程，是在启动后解析init.rc脚本启动服务的.\n\t\n\n再看看ActivityManager中的Binder。\n\n- IActivityManager对应IXXX接口\n\n- ActivityManagerNative对应IXXX.Stub类，继承自Binder类。\n\n- ActivityManagerProxy对应IXXX.Stub.Proxy类。\n\n\tAMS的服务端就是ActivityManagerService类，这个类继承自ActivityManagerNative，实现了IActivityManager接口中的方法用来进行IPC。\n\n\t只要在客户端得到了这个远程服务端的Binder引用就可以进行IPC通信了\n\n\n\n### 参考\n\n* [linux内核设计与实现](https://book.douban.com/subject/1503819/)\n\n* [Binder设计与实现](http://blog.csdn.net/universus/article/details/6211589)\n\n* [Android进程间通信（IPC）机制Binder简要介绍和学习计划系列](http://blog.csdn.net/luoshengyang/article/details/6618363)\n\n","source":"_posts/binder01.md","raw":"---\ntitle: binder简要学习\ndate: 2016-05-17 13:36:49\ncategories: android\ntags: [android,binder]\ncomment: true\ntoc: true\ndescription: 理解Binder对于理解整个Android系统有着非常重要的作用，Android系统的四大组件，AMS，PMS等系统服务无一不与Binder挂钩\n\n---\n\n# Binder \n\n### 本文目标\n\n理解Binder对于理解整个Android系统有着非常重要的作用，Android系统的四大组件，AMS，PMS等系统服务无一不与Binder挂钩；如果对Binder不甚了解，那么就很难了解这些系统机制.\n\n要真正的弄明白 Binder机制 还是比较麻烦的，我们今天只是大致的介绍一下在应用层怎么使用\n\n本文目标:\n\n* 不依赖AIDL工具，手写远程Service完成跨进程通信\n\n* 弄明白AIDL生成的相关代码\n\n* 以及基于AIDL代码的分析，了解系统相关服务的代码逻辑.\n\n\n### Linux相关概念\n\n因为是讲进程间的通信，而android又是基于linux，所以对于linux系统需要一定的了解.\n推荐 [linux内核设计与实现](https://book.douban.com/subject/1503819/) 其主要是讲一些系统概念\n\n\n* 操作系统的不同进程之间，数据不共享；对于每个进程来说，都以为自己独享了整个系统，完全不知道其他进程的存在；因此一个进程需要与另外一个进程通信，需要某种 **系统机制** 才能完成。\n\n* 用户程序只可以访问某些许可的资源，不许可的资源是拒绝被访问的，于是认为的就把Kernel和上层的应用程序抽像的隔离开，分别称之为 **内核空间(Kernel Space)** 和 **用户空间(User Space)** .\n\n* 用户空间访问内核空间的唯一方式就是 **系统调用** ；通过这个统一入口，所有的资源访问都是在内核的控制下执行，以免导致用户程序对系统资源的越权访问，从而保障了系统的安全和稳定.\n\n* 当一个任务（进程）执行系统调用而陷入内核代码中执行时，我们就称进程处于 **内核运行态** 此时处理器处于特权级最高的内核代码中执行。当进程在执行用户自己的代码时，则称其处于 **用户运行态**（用户态）。处理器在特权等级高的时候才能执行那些特权CPU指令。\n\n* 通过系统调用，用户空间可以访问内核空间. 如果一个用户空间想与另外一个用户空间进行通信，一般是需要操作系统内核添加支持. \n\n* Linux有个比较好的机制，就是可以 **动态加载内核模块** ；**模块** 是具有独立功能的程序，它可以被单独编译，但不能独立运行。它在运行时被链接到内核作为内核的一部分在内核空间运行。\n\n\t这样，Android系统就可以在Linux的基础之上，通过添加一个内核模块运行在内核空间，用户进程之间可通过这个模块完成通信。这个模块就是所谓的 **Binder驱动** .\n\n\t尽管名叫‘驱动’，实际上和硬件设备没有任何关系，只是实现方式和设备驱动程序是一样的：它工作于内核态，提供open()，mmap()，poll()，ioctl()等标准文件设备的操作.\n\n* Linux已拥有的进程间通信IPC手段包括： Pipe、Signal、Socket、Message、Share Memory 和信号量Semaphore.\n\n### 为何使用Binder\n\n为什么要单独弄一套， 而不是使用linux系统提供的那些进程间通信的方式\n\n主要是考虑到性能和安全，还有易用. \n\n* 最易想到的就是利用存储-转发机制：使用Linux 提供的系统调用接口：copy_from_user()和copy_to_user() 来实现进程间通信，缺点是效率低下，需要做两次拷贝：用户空间->内核空间->用户空间。\n\n* Binder驱动 为了实现用户空间到用户空间的拷贝，mmap()分配的内存除了映射进了接收方进程里，还映射进了内核空间。所以调用copy_from_user()将数据拷贝进内核空间也相当于拷贝进了接收方的用户空间， 所以Binder机制只需要一次拷贝。\n\n* 而共享内存的话，效率比较高， 但控制复杂....\n\n* 安全性: 传统IPC没有任何安全措施，完全依赖上层协议来确保；传统IPC访问接入点是开放的，无法建立私有通道；例如Socket通信的话，socket的ip地址或文件名都是开放的，只要知道这些接入点的程序都可以和对端建立连接，不管怎样都无法阻止恶意程序通过猜测接收方地址获得连接。\n\n> Binder基于Client-Server通信模式，传输过程只需一次拷贝，为发送发添加UID/PID身份，既支持实名Binder也支持匿名Binder，安全性高。\n\n\n\n### Binder通信模型\n\n\n应用层大家所熟知的通信结构， 如下图:\n    \n![Binder通信概述](/img/binder/binder通信概述.jpg)\n\n1. 从表面上来看，是client通过获得一个server的代理接口，对server进行直接调用；\n2. 实际上，代理接口中定义的方法与server中定义的方法是一一对应的；\n3. client调用某个代理接口中的方法时，代理接口的方法会将client传递的参数打包成为Parcel对象；\n4. 代理接口将该Parcel发送给内核中的binder driver.\n5. server会读取binder driver中的请求数据，如果是发送给自己的，解包Parcel对象，处理并将结果返回；\n6. 整个的调用过程是一个同步过程，在server处理的时候，client会block住。\n\n\n在整个Binder系统中，Binder框架定义了四个角色：Server，Client，ServiceManager 以及Binder驱动。其中Server，Client，SM运行于用户空间，驱动运行于内核空间\n\n![Binder通信模型](/img/binder/binder-通信模型.jpg)\n\n整个步骤如下: \n\n* SM建立；首先有一个进程向驱动提出申请为SM；驱动同意之后，SM进程负责管理Service.\n\n* 各个Server向SM注册；将Server自己的名字和内存地址报告给SM; 这样SM就建立了一张表，对应着各个Server的名字和地址\n\n* Client想要与Server通信，首先询问SM；通过服务名获取到对应的内存地址；Client收到之后，就可以进行通信了.\n\n\t可以看出驱动是整个通信过程的核心，完成跨进程通信的秘密全部隐藏在驱动里面；这里Client与SM的通信，以及Client与Server的通信，都会经过驱动\n\t\n\t\n> 相关接口可参见 native/libs/binder/IServiceManager.cpp  以及对应的native 层 service_manager.c\n\n\n### Binder机制跨进程原理\n\n![Binder机制跨进程原理](/img/binder/binder-跨进程原理.jpg)\n\n* 首先，Server进程要向SM注册；告诉自己是谁，自己有什么能力;在这个场景就是Server告诉SM，它叫AAA，它有一个object对象，可以执行add 操作；于是SM建立了一张表：AAA这个名字对应进程Server; 如原代码中 .//native/libs/binder/IServiceManager.cpp\n\n\t\tvirtual status_t addService(const String16& name, const sp<IBinder>& service,\n            bool allowIsolated)\n\t    {\n    \t    Parcel data, reply;\n\t\tdata.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());\n        \tdata.writeString16(name);\n        \tdata.writeStrongBinder(service);\n\t        data.writeInt32(allowIsolated ? 1 : 0);\n    \t    status_t err = remote()->transact(ADD_SERVICE_TRANSACTION, data, &reply);\n        \treturn err == NO_ERROR ? reply.readExceptionCode() : err;\n    \t}\n\n* 然后Client向SM查询：名字叫做AAA的进程里面的object对象；进程之间通信的数据都会经过运行在内核空间里面的驱动，驱动在数据流过的时候会做一些处理，它并不会给Client进程返回一个真正的object对象，而是返回一个看起来跟object一模一样的代理对象objectProxy，这个objectProxy也有一个add方法，但是这个add方法没有Server进程里面object对象的add方法那个能力；它唯一做的事情就是把参数包装然后交给驱动。\n\n* 驱动收到这个消息，发现是这个objectProxy；通过查表就知道：之前用objectProxy替换了object发送给Client了，它真正应该要访问的是object对象的add方法；于是Binder驱动通知Server进程，调用它的object对象的add方法，然后把结果发给binder驱动，Sever进程收到这个消息，执行add之后将结果返回驱动，驱动然后把结果返回给Client进程；于是整个过程就完成了.\n\nBinder跨进程传输并不是真的把一个对象传输到了另外一个进程；传输过程是在Binder跨进程穿越的时候，它在一个进程留下了一个本体，在另外一个进程则使用该对象的一个proxy；Client进程的操作其实是对于proxy的操作，proxy利用Binder驱动最终让真正的binder对象完成操作。\n\nAndroid系统实现这种机制使用的是代理模式, 对于Binder的访问，如果是在同一个进程，那么直接返回原始的Binder实体；如果在不同进程，那么就给他一个代理对象- 在后面的demo中我们可以看见...\n\t\n\tpublic static ICalculate asInterface(IBinder obj) {\n            if(obj == null) {\n                return null;\n            } else {\n                IInterface iin = obj.queryLocalInterface(\"com.zhangfl.jpush.ICalculate\");\n                return (ICalculate)(iin != null && iin instanceof ICalculate?(ICalculate)iin:new ICalculate.Stub.Proxy(obj));\n            }\n        }\n        \n\n> Client进程只不过是持有了Server端的代理；代理对象协助驱动完成了跨进程通信。\n\n### proxy代理模式\n\n模式中的三种角色:\n\n![proxy设计模式](/img/binder/proxy_uml.jpg)\n\n* 抽象角色：声明真实对象和代理对象的共同接口。\n\n* 代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。\n\n* 真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。\n\n> 模式原则: 对修改关闭，对扩展开放，保证了系统的稳定性\n\n\n\n### 驱动里面的Binder\n\n\n略过:  具体可以参考源码以及 [Binder设计与实现](http://blog.csdn.net/universus/article/details/6211589) 一文\n\n\n### Java层的Binder\n\nIBinder/IInterface/Binder/BinderProxy/Stub\n\n* IBinder是一个接口，它代表了一种跨进程传输的能力；只要实现了这个接口，就能将这个对象进行跨进程传递；这是驱动底层支持的；在跨进程数据流经驱动的时候，驱动会识别IBinder类型的数据，从而自动完成不同进程Binder本地对象以及Binder代理对象的转换。\n\n* IInterface代表的就是远程server对象具有的能力。具体来说，就是aidl里面的接口。\n\n* Java层的Binder类，代表的其实就是Binder本地对象。BinderProxy类是Binder类的一个内部类，它代表远程进程的Binder对象的本地代理；这两个类都继承自IBinder, 因而都具有跨进程传输的能力；实际上，在跨越进程的时候，Binder驱动会自动完成这两个对象的转换。\n\n* 在使用AIDL的时候，编译工具会给我们生成一个Stub的静态内部类；这个类继承了Binder, 说明它是一个Binder本地对象，它实现了IInterface接口，表明它具有远程Server承诺给Client的能力；Stub是一个抽象类，具体的IInterface的相关实现需要我们手动完成. 其实这里使用了策略模式.\n\n### AIDL过程分析\n\n一种固定的模式：\n\n* 一个需要跨进程传递的对象一定继承自IBinder，如果是Binder本地对象，那么一定继承Binder实现IInterface，如果是代理对象，那么就实现了IInterface并持有IBinder引用；\n\nProxy与Stub不一样，虽然他们都既是Binder又是IInterface，不同的是Stub采用的是继承（is 关系），Proxy采用的是组合（has 关系）。他们均实现了所有的IInterface函数，不同的是，Stub使用策略模式调用的是虚函数（待子类实现），而Proxy则使用组合模式。为什么Stub采用继承而Proxy采用组合？事实上，Stub本身is一个IBinder（Binder），它本身就是一个能跨越进程边界传输的对象，所以它得继承IBinder实现transact这个函数从而得到跨越进程的能力（这个能力由驱动赋予）。Proxy类使用组合，是因为他不关心自己是什么，它也不需要跨越进程传输，它只需要拥有这个能力即可，要拥有这个能力，只需要保留一个对IBinder的引用\n\n\n### demo.\n\n......\n\n\n### 系统服务分析\n\nIXXX、IXXX.Stub和IXXX.Stub.Proxy，并做好对应。这样看相关的系统服务就比较容易了，以ServiceManager为例\n\n实际上ServerManager既是系统服务的管理者，同时也是一个系统服务。因此它肯定是基于Binder实现的\n\n- 与IXXX相对应的类就是IServiceManager类，封装了远程调用的几个主要函数\n\n- 与IXXX.Stub对应的类就是ServiceManagerNative\n\n- 与IXXX.Stub.Proxy对应的类ServiceManagerProxy\n\n\t查看上面相关类的代码，实际上和使用adil生成的代码没什么两样。仅仅是类命名不一样，将三个类分开写了而已。\n\n\t在服务端继承ServiceManagerNative类实现里面的相关方法就能实现服务端，然后在客户端将远程服务端所对应的的Binder封装成：\n\t\n\tIServiceManager iSm = ServiceManagerNative.asInterface(binder)即可\n\n\tPS： 实际上，在源码中找不到继承自ServiceManagerNative类的远程服务端类ServiceManagerService，根本就找不到这样一个类。原因是SMS在native层被实现成一个独立的进程，是在启动后解析init.rc脚本启动服务的.\n\t\n\n再看看ActivityManager中的Binder。\n\n- IActivityManager对应IXXX接口\n\n- ActivityManagerNative对应IXXX.Stub类，继承自Binder类。\n\n- ActivityManagerProxy对应IXXX.Stub.Proxy类。\n\n\tAMS的服务端就是ActivityManagerService类，这个类继承自ActivityManagerNative，实现了IActivityManager接口中的方法用来进行IPC。\n\n\t只要在客户端得到了这个远程服务端的Binder引用就可以进行IPC通信了\n\n\n\n### 参考\n\n* [linux内核设计与实现](https://book.douban.com/subject/1503819/)\n\n* [Binder设计与实现](http://blog.csdn.net/universus/article/details/6211589)\n\n* [Android进程间通信（IPC）机制Binder简要介绍和学习计划系列](http://blog.csdn.net/luoshengyang/article/details/6618363)\n\n","slug":"binder01","published":1,"updated":"2016-05-18T03:01:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioci1m2y0001dbvrsp2lpmff","content":"<h1 id=\"Binder\"><a href=\"#Binder\" class=\"headerlink\" title=\"Binder\"></a>Binder</h1><h3 id=\"本文目标\"><a href=\"#本文目标\" class=\"headerlink\" title=\"本文目标\"></a>本文目标</h3><p>理解Binder对于理解整个Android系统有着非常重要的作用，Android系统的四大组件，AMS，PMS等系统服务无一不与Binder挂钩；如果对Binder不甚了解，那么就很难了解这些系统机制.</p>\n<p>要真正的弄明白 Binder机制 还是比较麻烦的，我们今天只是大致的介绍一下在应用层怎么使用</p>\n<p>本文目标:</p>\n<ul>\n<li><p>不依赖AIDL工具，手写远程Service完成跨进程通信</p>\n</li>\n<li><p>弄明白AIDL生成的相关代码</p>\n</li>\n<li><p>以及基于AIDL代码的分析，了解系统相关服务的代码逻辑.</p>\n</li>\n</ul>\n<h3 id=\"Linux相关概念\"><a href=\"#Linux相关概念\" class=\"headerlink\" title=\"Linux相关概念\"></a>Linux相关概念</h3><p>因为是讲进程间的通信，而android又是基于linux，所以对于linux系统需要一定的了解.<br>推荐 <a href=\"https://book.douban.com/subject/1503819/\" target=\"_blank\" rel=\"external\">linux内核设计与实现</a> 其主要是讲一些系统概念</p>\n<ul>\n<li><p>操作系统的不同进程之间，数据不共享；对于每个进程来说，都以为自己独享了整个系统，完全不知道其他进程的存在；因此一个进程需要与另外一个进程通信，需要某种 <strong>系统机制</strong> 才能完成。</p>\n</li>\n<li><p>用户程序只可以访问某些许可的资源，不许可的资源是拒绝被访问的，于是认为的就把Kernel和上层的应用程序抽像的隔离开，分别称之为 <strong>内核空间(Kernel Space)</strong> 和 <strong>用户空间(User Space)</strong> .</p>\n</li>\n<li><p>用户空间访问内核空间的唯一方式就是 <strong>系统调用</strong> ；通过这个统一入口，所有的资源访问都是在内核的控制下执行，以免导致用户程序对系统资源的越权访问，从而保障了系统的安全和稳定.</p>\n</li>\n<li><p>当一个任务（进程）执行系统调用而陷入内核代码中执行时，我们就称进程处于 <strong>内核运行态</strong> 此时处理器处于特权级最高的内核代码中执行。当进程在执行用户自己的代码时，则称其处于 <strong>用户运行态</strong>（用户态）。处理器在特权等级高的时候才能执行那些特权CPU指令。</p>\n</li>\n<li><p>通过系统调用，用户空间可以访问内核空间. 如果一个用户空间想与另外一个用户空间进行通信，一般是需要操作系统内核添加支持. </p>\n</li>\n<li><p>Linux有个比较好的机制，就是可以 <strong>动态加载内核模块</strong> ；<strong>模块</strong> 是具有独立功能的程序，它可以被单独编译，但不能独立运行。它在运行时被链接到内核作为内核的一部分在内核空间运行。</p>\n<p>  这样，Android系统就可以在Linux的基础之上，通过添加一个内核模块运行在内核空间，用户进程之间可通过这个模块完成通信。这个模块就是所谓的 <strong>Binder驱动</strong> .</p>\n<p>  尽管名叫‘驱动’，实际上和硬件设备没有任何关系，只是实现方式和设备驱动程序是一样的：它工作于内核态，提供open()，mmap()，poll()，ioctl()等标准文件设备的操作.</p>\n</li>\n<li><p>Linux已拥有的进程间通信IPC手段包括： Pipe、Signal、Socket、Message、Share Memory 和信号量Semaphore.</p>\n</li>\n</ul>\n<h3 id=\"为何使用Binder\"><a href=\"#为何使用Binder\" class=\"headerlink\" title=\"为何使用Binder\"></a>为何使用Binder</h3><p>为什么要单独弄一套， 而不是使用linux系统提供的那些进程间通信的方式</p>\n<p>主要是考虑到性能和安全，还有易用. </p>\n<ul>\n<li><p>最易想到的就是利用存储-转发机制：使用Linux 提供的系统调用接口：copy_from_user()和copy_to_user() 来实现进程间通信，缺点是效率低下，需要做两次拷贝：用户空间-&gt;内核空间-&gt;用户空间。</p>\n</li>\n<li><p>Binder驱动 为了实现用户空间到用户空间的拷贝，mmap()分配的内存除了映射进了接收方进程里，还映射进了内核空间。所以调用copy_from_user()将数据拷贝进内核空间也相当于拷贝进了接收方的用户空间， 所以Binder机制只需要一次拷贝。</p>\n</li>\n<li><p>而共享内存的话，效率比较高， 但控制复杂….</p>\n</li>\n<li><p>安全性: 传统IPC没有任何安全措施，完全依赖上层协议来确保；传统IPC访问接入点是开放的，无法建立私有通道；例如Socket通信的话，socket的ip地址或文件名都是开放的，只要知道这些接入点的程序都可以和对端建立连接，不管怎样都无法阻止恶意程序通过猜测接收方地址获得连接。</p>\n</li>\n</ul>\n<blockquote>\n<p>Binder基于Client-Server通信模式，传输过程只需一次拷贝，为发送发添加UID/PID身份，既支持实名Binder也支持匿名Binder，安全性高。</p>\n</blockquote>\n<h3 id=\"Binder通信模型\"><a href=\"#Binder通信模型\" class=\"headerlink\" title=\"Binder通信模型\"></a>Binder通信模型</h3><p>应用层大家所熟知的通信结构， 如下图:</p>\n<p><img src=\"/img/binder/binder通信概述.jpg\" alt=\"Binder通信概述\"></p>\n<ol>\n<li>从表面上来看，是client通过获得一个server的代理接口，对server进行直接调用；</li>\n<li>实际上，代理接口中定义的方法与server中定义的方法是一一对应的；</li>\n<li>client调用某个代理接口中的方法时，代理接口的方法会将client传递的参数打包成为Parcel对象；</li>\n<li>代理接口将该Parcel发送给内核中的binder driver.</li>\n<li>server会读取binder driver中的请求数据，如果是发送给自己的，解包Parcel对象，处理并将结果返回；</li>\n<li>整个的调用过程是一个同步过程，在server处理的时候，client会block住。</li>\n</ol>\n<p>在整个Binder系统中，Binder框架定义了四个角色：Server，Client，ServiceManager 以及Binder驱动。其中Server，Client，SM运行于用户空间，驱动运行于内核空间</p>\n<p><img src=\"/img/binder/binder-通信模型.jpg\" alt=\"Binder通信模型\"></p>\n<p>整个步骤如下: </p>\n<ul>\n<li><p>SM建立；首先有一个进程向驱动提出申请为SM；驱动同意之后，SM进程负责管理Service.</p>\n</li>\n<li><p>各个Server向SM注册；将Server自己的名字和内存地址报告给SM; 这样SM就建立了一张表，对应着各个Server的名字和地址</p>\n</li>\n<li><p>Client想要与Server通信，首先询问SM；通过服务名获取到对应的内存地址；Client收到之后，就可以进行通信了.</p>\n<p>  可以看出驱动是整个通信过程的核心，完成跨进程通信的秘密全部隐藏在驱动里面；这里Client与SM的通信，以及Client与Server的通信，都会经过驱动</p>\n</li>\n</ul>\n<blockquote>\n<p>相关接口可参见 native/libs/binder/IServiceManager.cpp  以及对应的native 层 service_manager.c</p>\n</blockquote>\n<h3 id=\"Binder机制跨进程原理\"><a href=\"#Binder机制跨进程原理\" class=\"headerlink\" title=\"Binder机制跨进程原理\"></a>Binder机制跨进程原理</h3><p><img src=\"/img/binder/binder-跨进程原理.jpg\" alt=\"Binder机制跨进程原理\"></p>\n<ul>\n<li><p>首先，Server进程要向SM注册；告诉自己是谁，自己有什么能力;在这个场景就是Server告诉SM，它叫AAA，它有一个object对象，可以执行add 操作；于是SM建立了一张表：AAA这个名字对应进程Server; 如原代码中 .//native/libs/binder/IServiceManager.cpp</p>\n<pre><code>virtual status_t addService(const String16&amp; name, const sp&lt;IBinder&gt;&amp; service,\n    bool allowIsolated)\n{\n    Parcel data, reply;\ndata.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());\n    data.writeString16(name);\n    data.writeStrongBinder(service);\n    data.writeInt32(allowIsolated ? 1 : 0);\n    status_t err = remote()-&gt;transact(ADD_SERVICE_TRANSACTION, data, &amp;reply);\n    return err == NO_ERROR ? reply.readExceptionCode() : err;\n}\n</code></pre></li>\n<li><p>然后Client向SM查询：名字叫做AAA的进程里面的object对象；进程之间通信的数据都会经过运行在内核空间里面的驱动，驱动在数据流过的时候会做一些处理，它并不会给Client进程返回一个真正的object对象，而是返回一个看起来跟object一模一样的代理对象objectProxy，这个objectProxy也有一个add方法，但是这个add方法没有Server进程里面object对象的add方法那个能力；它唯一做的事情就是把参数包装然后交给驱动。</p>\n</li>\n<li><p>驱动收到这个消息，发现是这个objectProxy；通过查表就知道：之前用objectProxy替换了object发送给Client了，它真正应该要访问的是object对象的add方法；于是Binder驱动通知Server进程，调用它的object对象的add方法，然后把结果发给binder驱动，Sever进程收到这个消息，执行add之后将结果返回驱动，驱动然后把结果返回给Client进程；于是整个过程就完成了.</p>\n</li>\n</ul>\n<p>Binder跨进程传输并不是真的把一个对象传输到了另外一个进程；传输过程是在Binder跨进程穿越的时候，它在一个进程留下了一个本体，在另外一个进程则使用该对象的一个proxy；Client进程的操作其实是对于proxy的操作，proxy利用Binder驱动最终让真正的binder对象完成操作。</p>\n<p>Android系统实现这种机制使用的是代理模式, 对于Binder的访问，如果是在同一个进程，那么直接返回原始的Binder实体；如果在不同进程，那么就给他一个代理对象- 在后面的demo中我们可以看见…</p>\n<pre><code>public static ICalculate asInterface(IBinder obj) {\n        if(obj == null) {\n            return null;\n        } else {\n            IInterface iin = obj.queryLocalInterface(&quot;com.zhangfl.jpush.ICalculate&quot;);\n            return (ICalculate)(iin != null &amp;&amp; iin instanceof ICalculate?(ICalculate)iin:new ICalculate.Stub.Proxy(obj));\n        }\n    }\n</code></pre><blockquote>\n<p>Client进程只不过是持有了Server端的代理；代理对象协助驱动完成了跨进程通信。</p>\n</blockquote>\n<h3 id=\"proxy代理模式\"><a href=\"#proxy代理模式\" class=\"headerlink\" title=\"proxy代理模式\"></a>proxy代理模式</h3><p>模式中的三种角色:</p>\n<p><img src=\"/img/binder/proxy_uml.jpg\" alt=\"proxy设计模式\"></p>\n<ul>\n<li><p>抽象角色：声明真实对象和代理对象的共同接口。</p>\n</li>\n<li><p>代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。</p>\n</li>\n<li><p>真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。</p>\n</li>\n</ul>\n<blockquote>\n<p>模式原则: 对修改关闭，对扩展开放，保证了系统的稳定性</p>\n</blockquote>\n<h3 id=\"驱动里面的Binder\"><a href=\"#驱动里面的Binder\" class=\"headerlink\" title=\"驱动里面的Binder\"></a>驱动里面的Binder</h3><p>略过:  具体可以参考源码以及 <a href=\"http://blog.csdn.net/universus/article/details/6211589\" target=\"_blank\" rel=\"external\">Binder设计与实现</a> 一文</p>\n<h3 id=\"Java层的Binder\"><a href=\"#Java层的Binder\" class=\"headerlink\" title=\"Java层的Binder\"></a>Java层的Binder</h3><p>IBinder/IInterface/Binder/BinderProxy/Stub</p>\n<ul>\n<li><p>IBinder是一个接口，它代表了一种跨进程传输的能力；只要实现了这个接口，就能将这个对象进行跨进程传递；这是驱动底层支持的；在跨进程数据流经驱动的时候，驱动会识别IBinder类型的数据，从而自动完成不同进程Binder本地对象以及Binder代理对象的转换。</p>\n</li>\n<li><p>IInterface代表的就是远程server对象具有的能力。具体来说，就是aidl里面的接口。</p>\n</li>\n<li><p>Java层的Binder类，代表的其实就是Binder本地对象。BinderProxy类是Binder类的一个内部类，它代表远程进程的Binder对象的本地代理；这两个类都继承自IBinder, 因而都具有跨进程传输的能力；实际上，在跨越进程的时候，Binder驱动会自动完成这两个对象的转换。</p>\n</li>\n<li><p>在使用AIDL的时候，编译工具会给我们生成一个Stub的静态内部类；这个类继承了Binder, 说明它是一个Binder本地对象，它实现了IInterface接口，表明它具有远程Server承诺给Client的能力；Stub是一个抽象类，具体的IInterface的相关实现需要我们手动完成. 其实这里使用了策略模式.</p>\n</li>\n</ul>\n<h3 id=\"AIDL过程分析\"><a href=\"#AIDL过程分析\" class=\"headerlink\" title=\"AIDL过程分析\"></a>AIDL过程分析</h3><p>一种固定的模式：</p>\n<ul>\n<li>一个需要跨进程传递的对象一定继承自IBinder，如果是Binder本地对象，那么一定继承Binder实现IInterface，如果是代理对象，那么就实现了IInterface并持有IBinder引用；</li>\n</ul>\n<p>Proxy与Stub不一样，虽然他们都既是Binder又是IInterface，不同的是Stub采用的是继承（is 关系），Proxy采用的是组合（has 关系）。他们均实现了所有的IInterface函数，不同的是，Stub使用策略模式调用的是虚函数（待子类实现），而Proxy则使用组合模式。为什么Stub采用继承而Proxy采用组合？事实上，Stub本身is一个IBinder（Binder），它本身就是一个能跨越进程边界传输的对象，所以它得继承IBinder实现transact这个函数从而得到跨越进程的能力（这个能力由驱动赋予）。Proxy类使用组合，是因为他不关心自己是什么，它也不需要跨越进程传输，它只需要拥有这个能力即可，要拥有这个能力，只需要保留一个对IBinder的引用</p>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo.\"></a>demo.</h3><p>……</p>\n<h3 id=\"系统服务分析\"><a href=\"#系统服务分析\" class=\"headerlink\" title=\"系统服务分析\"></a>系统服务分析</h3><p>IXXX、IXXX.Stub和IXXX.Stub.Proxy，并做好对应。这样看相关的系统服务就比较容易了，以ServiceManager为例</p>\n<p>实际上ServerManager既是系统服务的管理者，同时也是一个系统服务。因此它肯定是基于Binder实现的</p>\n<ul>\n<li><p>与IXXX相对应的类就是IServiceManager类，封装了远程调用的几个主要函数</p>\n</li>\n<li><p>与IXXX.Stub对应的类就是ServiceManagerNative</p>\n</li>\n<li><p>与IXXX.Stub.Proxy对应的类ServiceManagerProxy</p>\n<p>  查看上面相关类的代码，实际上和使用adil生成的代码没什么两样。仅仅是类命名不一样，将三个类分开写了而已。</p>\n<p>  在服务端继承ServiceManagerNative类实现里面的相关方法就能实现服务端，然后在客户端将远程服务端所对应的的Binder封装成：</p>\n<p>  IServiceManager iSm = ServiceManagerNative.asInterface(binder)即可</p>\n<p>  PS： 实际上，在源码中找不到继承自ServiceManagerNative类的远程服务端类ServiceManagerService，根本就找不到这样一个类。原因是SMS在native层被实现成一个独立的进程，是在启动后解析init.rc脚本启动服务的.</p>\n</li>\n</ul>\n<p>再看看ActivityManager中的Binder。</p>\n<ul>\n<li><p>IActivityManager对应IXXX接口</p>\n</li>\n<li><p>ActivityManagerNative对应IXXX.Stub类，继承自Binder类。</p>\n</li>\n<li><p>ActivityManagerProxy对应IXXX.Stub.Proxy类。</p>\n<p>  AMS的服务端就是ActivityManagerService类，这个类继承自ActivityManagerNative，实现了IActivityManager接口中的方法用来进行IPC。</p>\n<p>  只要在客户端得到了这个远程服务端的Binder引用就可以进行IPC通信了</p>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/1503819/\" target=\"_blank\" rel=\"external\">linux内核设计与实现</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/universus/article/details/6211589\" target=\"_blank\" rel=\"external\">Binder设计与实现</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/luoshengyang/article/details/6618363\" target=\"_blank\" rel=\"external\">Android进程间通信（IPC）机制Binder简要介绍和学习计划系列</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Binder\"><a href=\"#Binder\" class=\"headerlink\" title=\"Binder\"></a>Binder</h1><h3 id=\"本文目标\"><a href=\"#本文目标\" class=\"headerlink\" title=\"本文目标\"></a>本文目标</h3><p>理解Binder对于理解整个Android系统有着非常重要的作用，Android系统的四大组件，AMS，PMS等系统服务无一不与Binder挂钩；如果对Binder不甚了解，那么就很难了解这些系统机制.</p>\n<p>要真正的弄明白 Binder机制 还是比较麻烦的，我们今天只是大致的介绍一下在应用层怎么使用</p>\n<p>本文目标:</p>\n<ul>\n<li><p>不依赖AIDL工具，手写远程Service完成跨进程通信</p>\n</li>\n<li><p>弄明白AIDL生成的相关代码</p>\n</li>\n<li><p>以及基于AIDL代码的分析，了解系统相关服务的代码逻辑.</p>\n</li>\n</ul>\n<h3 id=\"Linux相关概念\"><a href=\"#Linux相关概念\" class=\"headerlink\" title=\"Linux相关概念\"></a>Linux相关概念</h3><p>因为是讲进程间的通信，而android又是基于linux，所以对于linux系统需要一定的了解.<br>推荐 <a href=\"https://book.douban.com/subject/1503819/\">linux内核设计与实现</a> 其主要是讲一些系统概念</p>\n<ul>\n<li><p>操作系统的不同进程之间，数据不共享；对于每个进程来说，都以为自己独享了整个系统，完全不知道其他进程的存在；因此一个进程需要与另外一个进程通信，需要某种 <strong>系统机制</strong> 才能完成。</p>\n</li>\n<li><p>用户程序只可以访问某些许可的资源，不许可的资源是拒绝被访问的，于是认为的就把Kernel和上层的应用程序抽像的隔离开，分别称之为 <strong>内核空间(Kernel Space)</strong> 和 <strong>用户空间(User Space)</strong> .</p>\n</li>\n<li><p>用户空间访问内核空间的唯一方式就是 <strong>系统调用</strong> ；通过这个统一入口，所有的资源访问都是在内核的控制下执行，以免导致用户程序对系统资源的越权访问，从而保障了系统的安全和稳定.</p>\n</li>\n<li><p>当一个任务（进程）执行系统调用而陷入内核代码中执行时，我们就称进程处于 <strong>内核运行态</strong> 此时处理器处于特权级最高的内核代码中执行。当进程在执行用户自己的代码时，则称其处于 <strong>用户运行态</strong>（用户态）。处理器在特权等级高的时候才能执行那些特权CPU指令。</p>\n</li>\n<li><p>通过系统调用，用户空间可以访问内核空间. 如果一个用户空间想与另外一个用户空间进行通信，一般是需要操作系统内核添加支持. </p>\n</li>\n<li><p>Linux有个比较好的机制，就是可以 <strong>动态加载内核模块</strong> ；<strong>模块</strong> 是具有独立功能的程序，它可以被单独编译，但不能独立运行。它在运行时被链接到内核作为内核的一部分在内核空间运行。</p>\n<p>  这样，Android系统就可以在Linux的基础之上，通过添加一个内核模块运行在内核空间，用户进程之间可通过这个模块完成通信。这个模块就是所谓的 <strong>Binder驱动</strong> .</p>\n<p>  尽管名叫‘驱动’，实际上和硬件设备没有任何关系，只是实现方式和设备驱动程序是一样的：它工作于内核态，提供open()，mmap()，poll()，ioctl()等标准文件设备的操作.</p>\n</li>\n<li><p>Linux已拥有的进程间通信IPC手段包括： Pipe、Signal、Socket、Message、Share Memory 和信号量Semaphore.</p>\n</li>\n</ul>\n<h3 id=\"为何使用Binder\"><a href=\"#为何使用Binder\" class=\"headerlink\" title=\"为何使用Binder\"></a>为何使用Binder</h3><p>为什么要单独弄一套， 而不是使用linux系统提供的那些进程间通信的方式</p>\n<p>主要是考虑到性能和安全，还有易用. </p>\n<ul>\n<li><p>最易想到的就是利用存储-转发机制：使用Linux 提供的系统调用接口：copy_from_user()和copy_to_user() 来实现进程间通信，缺点是效率低下，需要做两次拷贝：用户空间-&gt;内核空间-&gt;用户空间。</p>\n</li>\n<li><p>Binder驱动 为了实现用户空间到用户空间的拷贝，mmap()分配的内存除了映射进了接收方进程里，还映射进了内核空间。所以调用copy_from_user()将数据拷贝进内核空间也相当于拷贝进了接收方的用户空间， 所以Binder机制只需要一次拷贝。</p>\n</li>\n<li><p>而共享内存的话，效率比较高， 但控制复杂….</p>\n</li>\n<li><p>安全性: 传统IPC没有任何安全措施，完全依赖上层协议来确保；传统IPC访问接入点是开放的，无法建立私有通道；例如Socket通信的话，socket的ip地址或文件名都是开放的，只要知道这些接入点的程序都可以和对端建立连接，不管怎样都无法阻止恶意程序通过猜测接收方地址获得连接。</p>\n</li>\n</ul>\n<blockquote>\n<p>Binder基于Client-Server通信模式，传输过程只需一次拷贝，为发送发添加UID/PID身份，既支持实名Binder也支持匿名Binder，安全性高。</p>\n</blockquote>\n<h3 id=\"Binder通信模型\"><a href=\"#Binder通信模型\" class=\"headerlink\" title=\"Binder通信模型\"></a>Binder通信模型</h3><p>应用层大家所熟知的通信结构， 如下图:</p>\n<p><img src=\"/img/binder/binder通信概述.jpg\" alt=\"Binder通信概述\"></p>\n<ol>\n<li>从表面上来看，是client通过获得一个server的代理接口，对server进行直接调用；</li>\n<li>实际上，代理接口中定义的方法与server中定义的方法是一一对应的；</li>\n<li>client调用某个代理接口中的方法时，代理接口的方法会将client传递的参数打包成为Parcel对象；</li>\n<li>代理接口将该Parcel发送给内核中的binder driver.</li>\n<li>server会读取binder driver中的请求数据，如果是发送给自己的，解包Parcel对象，处理并将结果返回；</li>\n<li>整个的调用过程是一个同步过程，在server处理的时候，client会block住。</li>\n</ol>\n<p>在整个Binder系统中，Binder框架定义了四个角色：Server，Client，ServiceManager 以及Binder驱动。其中Server，Client，SM运行于用户空间，驱动运行于内核空间</p>\n<p><img src=\"/img/binder/binder-通信模型.jpg\" alt=\"Binder通信模型\"></p>\n<p>整个步骤如下: </p>\n<ul>\n<li><p>SM建立；首先有一个进程向驱动提出申请为SM；驱动同意之后，SM进程负责管理Service.</p>\n</li>\n<li><p>各个Server向SM注册；将Server自己的名字和内存地址报告给SM; 这样SM就建立了一张表，对应着各个Server的名字和地址</p>\n</li>\n<li><p>Client想要与Server通信，首先询问SM；通过服务名获取到对应的内存地址；Client收到之后，就可以进行通信了.</p>\n<p>  可以看出驱动是整个通信过程的核心，完成跨进程通信的秘密全部隐藏在驱动里面；这里Client与SM的通信，以及Client与Server的通信，都会经过驱动</p>\n</li>\n</ul>\n<blockquote>\n<p>相关接口可参见 native/libs/binder/IServiceManager.cpp  以及对应的native 层 service_manager.c</p>\n</blockquote>\n<h3 id=\"Binder机制跨进程原理\"><a href=\"#Binder机制跨进程原理\" class=\"headerlink\" title=\"Binder机制跨进程原理\"></a>Binder机制跨进程原理</h3><p><img src=\"/img/binder/binder-跨进程原理.jpg\" alt=\"Binder机制跨进程原理\"></p>\n<ul>\n<li><p>首先，Server进程要向SM注册；告诉自己是谁，自己有什么能力;在这个场景就是Server告诉SM，它叫AAA，它有一个object对象，可以执行add 操作；于是SM建立了一张表：AAA这个名字对应进程Server; 如原代码中 .//native/libs/binder/IServiceManager.cpp</p>\n<pre><code>virtual status_t addService(const String16&amp; name, const sp&lt;IBinder&gt;&amp; service,\n    bool allowIsolated)\n{\n    Parcel data, reply;\ndata.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());\n    data.writeString16(name);\n    data.writeStrongBinder(service);\n    data.writeInt32(allowIsolated ? 1 : 0);\n    status_t err = remote()-&gt;transact(ADD_SERVICE_TRANSACTION, data, &amp;reply);\n    return err == NO_ERROR ? reply.readExceptionCode() : err;\n}\n</code></pre></li>\n<li><p>然后Client向SM查询：名字叫做AAA的进程里面的object对象；进程之间通信的数据都会经过运行在内核空间里面的驱动，驱动在数据流过的时候会做一些处理，它并不会给Client进程返回一个真正的object对象，而是返回一个看起来跟object一模一样的代理对象objectProxy，这个objectProxy也有一个add方法，但是这个add方法没有Server进程里面object对象的add方法那个能力；它唯一做的事情就是把参数包装然后交给驱动。</p>\n</li>\n<li><p>驱动收到这个消息，发现是这个objectProxy；通过查表就知道：之前用objectProxy替换了object发送给Client了，它真正应该要访问的是object对象的add方法；于是Binder驱动通知Server进程，调用它的object对象的add方法，然后把结果发给binder驱动，Sever进程收到这个消息，执行add之后将结果返回驱动，驱动然后把结果返回给Client进程；于是整个过程就完成了.</p>\n</li>\n</ul>\n<p>Binder跨进程传输并不是真的把一个对象传输到了另外一个进程；传输过程是在Binder跨进程穿越的时候，它在一个进程留下了一个本体，在另外一个进程则使用该对象的一个proxy；Client进程的操作其实是对于proxy的操作，proxy利用Binder驱动最终让真正的binder对象完成操作。</p>\n<p>Android系统实现这种机制使用的是代理模式, 对于Binder的访问，如果是在同一个进程，那么直接返回原始的Binder实体；如果在不同进程，那么就给他一个代理对象- 在后面的demo中我们可以看见…</p>\n<pre><code>public static ICalculate asInterface(IBinder obj) {\n        if(obj == null) {\n            return null;\n        } else {\n            IInterface iin = obj.queryLocalInterface(&quot;com.zhangfl.jpush.ICalculate&quot;);\n            return (ICalculate)(iin != null &amp;&amp; iin instanceof ICalculate?(ICalculate)iin:new ICalculate.Stub.Proxy(obj));\n        }\n    }\n</code></pre><blockquote>\n<p>Client进程只不过是持有了Server端的代理；代理对象协助驱动完成了跨进程通信。</p>\n</blockquote>\n<h3 id=\"proxy代理模式\"><a href=\"#proxy代理模式\" class=\"headerlink\" title=\"proxy代理模式\"></a>proxy代理模式</h3><p>模式中的三种角色:</p>\n<p><img src=\"/img/binder/proxy_uml.jpg\" alt=\"proxy设计模式\"></p>\n<ul>\n<li><p>抽象角色：声明真实对象和代理对象的共同接口。</p>\n</li>\n<li><p>代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。</p>\n</li>\n<li><p>真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。</p>\n</li>\n</ul>\n<blockquote>\n<p>模式原则: 对修改关闭，对扩展开放，保证了系统的稳定性</p>\n</blockquote>\n<h3 id=\"驱动里面的Binder\"><a href=\"#驱动里面的Binder\" class=\"headerlink\" title=\"驱动里面的Binder\"></a>驱动里面的Binder</h3><p>略过:  具体可以参考源码以及 <a href=\"http://blog.csdn.net/universus/article/details/6211589\">Binder设计与实现</a> 一文</p>\n<h3 id=\"Java层的Binder\"><a href=\"#Java层的Binder\" class=\"headerlink\" title=\"Java层的Binder\"></a>Java层的Binder</h3><p>IBinder/IInterface/Binder/BinderProxy/Stub</p>\n<ul>\n<li><p>IBinder是一个接口，它代表了一种跨进程传输的能力；只要实现了这个接口，就能将这个对象进行跨进程传递；这是驱动底层支持的；在跨进程数据流经驱动的时候，驱动会识别IBinder类型的数据，从而自动完成不同进程Binder本地对象以及Binder代理对象的转换。</p>\n</li>\n<li><p>IInterface代表的就是远程server对象具有的能力。具体来说，就是aidl里面的接口。</p>\n</li>\n<li><p>Java层的Binder类，代表的其实就是Binder本地对象。BinderProxy类是Binder类的一个内部类，它代表远程进程的Binder对象的本地代理；这两个类都继承自IBinder, 因而都具有跨进程传输的能力；实际上，在跨越进程的时候，Binder驱动会自动完成这两个对象的转换。</p>\n</li>\n<li><p>在使用AIDL的时候，编译工具会给我们生成一个Stub的静态内部类；这个类继承了Binder, 说明它是一个Binder本地对象，它实现了IInterface接口，表明它具有远程Server承诺给Client的能力；Stub是一个抽象类，具体的IInterface的相关实现需要我们手动完成. 其实这里使用了策略模式.</p>\n</li>\n</ul>\n<h3 id=\"AIDL过程分析\"><a href=\"#AIDL过程分析\" class=\"headerlink\" title=\"AIDL过程分析\"></a>AIDL过程分析</h3><p>一种固定的模式：</p>\n<ul>\n<li>一个需要跨进程传递的对象一定继承自IBinder，如果是Binder本地对象，那么一定继承Binder实现IInterface，如果是代理对象，那么就实现了IInterface并持有IBinder引用；</li>\n</ul>\n<p>Proxy与Stub不一样，虽然他们都既是Binder又是IInterface，不同的是Stub采用的是继承（is 关系），Proxy采用的是组合（has 关系）。他们均实现了所有的IInterface函数，不同的是，Stub使用策略模式调用的是虚函数（待子类实现），而Proxy则使用组合模式。为什么Stub采用继承而Proxy采用组合？事实上，Stub本身is一个IBinder（Binder），它本身就是一个能跨越进程边界传输的对象，所以它得继承IBinder实现transact这个函数从而得到跨越进程的能力（这个能力由驱动赋予）。Proxy类使用组合，是因为他不关心自己是什么，它也不需要跨越进程传输，它只需要拥有这个能力即可，要拥有这个能力，只需要保留一个对IBinder的引用</p>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo.\"></a>demo.</h3><p>……</p>\n<h3 id=\"系统服务分析\"><a href=\"#系统服务分析\" class=\"headerlink\" title=\"系统服务分析\"></a>系统服务分析</h3><p>IXXX、IXXX.Stub和IXXX.Stub.Proxy，并做好对应。这样看相关的系统服务就比较容易了，以ServiceManager为例</p>\n<p>实际上ServerManager既是系统服务的管理者，同时也是一个系统服务。因此它肯定是基于Binder实现的</p>\n<ul>\n<li><p>与IXXX相对应的类就是IServiceManager类，封装了远程调用的几个主要函数</p>\n</li>\n<li><p>与IXXX.Stub对应的类就是ServiceManagerNative</p>\n</li>\n<li><p>与IXXX.Stub.Proxy对应的类ServiceManagerProxy</p>\n<p>  查看上面相关类的代码，实际上和使用adil生成的代码没什么两样。仅仅是类命名不一样，将三个类分开写了而已。</p>\n<p>  在服务端继承ServiceManagerNative类实现里面的相关方法就能实现服务端，然后在客户端将远程服务端所对应的的Binder封装成：</p>\n<p>  IServiceManager iSm = ServiceManagerNative.asInterface(binder)即可</p>\n<p>  PS： 实际上，在源码中找不到继承自ServiceManagerNative类的远程服务端类ServiceManagerService，根本就找不到这样一个类。原因是SMS在native层被实现成一个独立的进程，是在启动后解析init.rc脚本启动服务的.</p>\n</li>\n</ul>\n<p>再看看ActivityManager中的Binder。</p>\n<ul>\n<li><p>IActivityManager对应IXXX接口</p>\n</li>\n<li><p>ActivityManagerNative对应IXXX.Stub类，继承自Binder类。</p>\n</li>\n<li><p>ActivityManagerProxy对应IXXX.Stub.Proxy类。</p>\n<p>  AMS的服务端就是ActivityManagerService类，这个类继承自ActivityManagerNative，实现了IActivityManager接口中的方法用来进行IPC。</p>\n<p>  只要在客户端得到了这个远程服务端的Binder引用就可以进行IPC通信了</p>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/1503819/\">linux内核设计与实现</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/universus/article/details/6211589\">Binder设计与实现</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/luoshengyang/article/details/6618363\">Android进程间通信（IPC）机制Binder简要介绍和学习计划系列</a></p>\n</li>\n</ul>\n"},{"title":"每天随记","date":"2016-05-17T05:31:19.000Z","toc":true,"comment":true,"description":"By plucking her petals you do not gather the beauty of the flower.","_content":"\n# Who\n\nwho am I?\n\n\n# Hello\n\nhello, It's me.\n","source":"_posts/thingking-everyday.md","raw":"---\ntitle: 每天随记\ndate: 2016-05-17 13:31:19\ntags: [life]\ntoc: true\ncomment: true\ndescription: By plucking her petals you do not gather the beauty of the flower.\n---\n\n# Who\n\nwho am I?\n\n\n# Hello\n\nhello, It's me.\n","slug":"thingking-everyday","published":1,"updated":"2016-05-18T03:03:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioci1m330003dbvrx2tbpilc","content":"<h1 id=\"Who\"><a href=\"#Who\" class=\"headerlink\" title=\"Who\"></a>Who</h1><p>who am I?</p>\n<h1 id=\"Hello\"><a href=\"#Hello\" class=\"headerlink\" title=\"Hello\"></a>Hello</h1><p>hello, It’s me.</p>\n","excerpt":"","more":"<h1 id=\"Who\"><a href=\"#Who\" class=\"headerlink\" title=\"Who\"></a>Who</h1><p>who am I?</p>\n<h1 id=\"Hello\"><a href=\"#Hello\" class=\"headerlink\" title=\"Hello\"></a>Hello</h1><p>hello, It’s me.</p>\n"},{"title":"罗马人的故事01","toc":true,"comment":true,"date":"2016-05-18T02:57:25.000Z","description":"罗马人的故事01......","_content":"","source":"_posts/罗马人的故事01.md","raw":"---\ntitle: 罗马人的故事01\ntoc: true\ncomment: true\ndate: 2016-05-18 10:57:25\ncategories: history\ntags: book\ndescription: 罗马人的故事01......\n---\n","slug":"罗马人的故事01","published":1,"updated":"2016-05-18T03:00:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioci1m380007dbvrvyhkzg9e","content":"","excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"cioci1m2y0001dbvrsp2lpmff","category_id":"cioci1m370006dbvrkqn0ifs8","_id":"cioci1m3a000adbvrrqe8x8gx"},{"post_id":"cioci1m380007dbvrvyhkzg9e","category_id":"cioci1m3a0009dbvrjlq1xm8x","_id":"cioci1m3b000edbvr3hd2mhr1"}],"PostTag":[{"post_id":"cioci1m2y0001dbvrsp2lpmff","tag_id":"cioci1m350005dbvr43qsd3ec","_id":"cioci1m3a000cdbvr0z2q29a2"},{"post_id":"cioci1m2y0001dbvrsp2lpmff","tag_id":"cioci1m390008dbvrqbckspgy","_id":"cioci1m3b000ddbvroets09oj"},{"post_id":"cioci1m330003dbvrx2tbpilc","tag_id":"cioci1m3a000bdbvra2h4ldyg","_id":"cioci1m3b000gdbvr1ocmdom3"},{"post_id":"cioci1m380007dbvrvyhkzg9e","tag_id":"cioci1m3b000fdbvr337ou2a2","_id":"cioci1m3b000hdbvrelsnzg2c"}],"Tag":[{"name":"android","_id":"cioci1m350005dbvr43qsd3ec"},{"name":"binder","_id":"cioci1m390008dbvrqbckspgy"},{"name":"life","_id":"cioci1m3a000bdbvra2h4ldyg"},{"name":"book","_id":"cioci1m3b000fdbvr337ou2a2"}]}}