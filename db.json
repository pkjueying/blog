{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/animate/20130624115540296.png","path":"img/animate/20130624115540296.png","modified":1,"renderable":0},{"_id":"source/img/animate/20130624115253140.png","path":"img/animate/20130624115253140.png","modified":1,"renderable":0},{"_id":"source/img/animate/20130624115441921.png","path":"img/animate/20130624115441921.png","modified":1,"renderable":0},{"_id":"source/img/avatar/avatar_01.jpg","path":"img/avatar/avatar_01.jpg","modified":1,"renderable":0},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1,"renderable":1},{"_id":"source/img/avatar/avatar_02.jpg","path":"img/avatar/avatar_02.jpg","modified":1,"renderable":0},{"_id":"source/img/binder/proxy_uml.jpg","path":"img/binder/proxy_uml.jpg","modified":1,"renderable":0},{"_id":"source/img/binder/binder-通信模型.jpg","path":"img/binder/binder-通信模型.jpg","modified":1,"renderable":0},{"_id":"source/img/binder/binder-跨进程原理.jpg","path":"img/binder/binder-跨进程原理.jpg","modified":1,"renderable":0},{"_id":"source/img/binder/Binder框架.jpg","path":"img/binder/Binder框架.jpg","modified":1,"renderable":0},{"_id":"source/img/binder/binder通信概述.jpg","path":"img/binder/binder通信概述.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"23bd1347abd9837ff272373b85f00e1d6b3e6d14","modified":1463555085000},{"_id":"source/CNAME","hash":"8b188e08b9f943fec2c1a6f143178553ef4692f1","modified":1463555085000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1463555085000},{"_id":"themes/maupassant/README.md","hash":"0e271dc27e3e6cfc467baccec8c86bd5dfa3cefc","modified":1463555085000},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1463555085000},{"_id":"themes/maupassant/_config.yml","hash":"7b5ee8699e8b50db3e30713bf9737a3e6dfb7e31","modified":1463555085000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1463555085000},{"_id":"themes/maupassant/.git/lastupdatetime","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463569258000},{"_id":"source/_posts/Android-启动过程代码跟踪.md","hash":"b6a07f997f48ae1990ba53f022a57fe2ec196232","modified":1463573466000},{"_id":"source/_posts/Android-开机动画跟踪.md","hash":"75e9e4a627b3f65493b907c04d664f69b4ee36c7","modified":1463573500000},{"_id":"source/_posts/Yii项目实践.md","hash":"0f7c291902d4ff915d7f92c6bc428f77d5e61bc1","modified":1463573519000},{"_id":"source/_posts/binder01.md","hash":"ffb10bf2c88646c828661846980cad4fec67a175","modified":1463573677000},{"_id":"source/_posts/罗马人的故事01.md","hash":"bfe4f151ee44de35c381269c0d718ecdc33ff069","modified":1463555085000},{"_id":"source/_posts/thingking-everyday.md","hash":"b84d590a52306f7cb66039fe269bb29dfdaa7591","modified":1463555085000},{"_id":"source/about/index.md","hash":"89c23d58b2fe3c14738ff3baeae0f96d0e36120b","modified":1463555085000},{"_id":"source/history/index.md","hash":"87fecdb33288f8cff7723c423a312d999237e47c","modified":1463555503000},{"_id":"source/book/index.md","hash":"bd5f8133e99f1f146271ea6dbe776ffeaa56e364","modified":1463555524000},{"_id":"source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1463555085000},{"_id":"themes/maupassant/.git/FETCH_HEAD","hash":"ff5de53e9aa1f9c3e5fbd93f9eb2888406a37c8e","modified":1463569282000},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1463555085000},{"_id":"themes/maupassant/.git/ORIG_HEAD","hash":"8f5cebc785d2fe0fb16a1cb94260b56963d4c19b","modified":1463555085000},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1463555085000},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1463555085000},{"_id":"themes/maupassant/.git/index","hash":"302d9cb3319a05c34eca5efe629ac4b88d3c2735","modified":1463555106000},{"_id":"themes/maupassant/.git/packed-refs","hash":"e3cb7fdef9a716ec7720ef1fc4fe71e6e900895e","modified":1463555085000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1463555085000},{"_id":"themes/maupassant/languages/en.yml","hash":"261167e01fc9594aa30d400c2478e78b3d08c328","modified":1463555085000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1463555085000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1463555085000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1463555085000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"5e1140eb461a3a6ee24b028864f8ed8bf6543c37","modified":1463555085000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1463555085000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1463555085000},{"_id":"themes/maupassant/layout/base.jade","hash":"6af2f0978ba3bd75b5d1ca4120fcaf0b9bdaf74d","modified":1463555085000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1463555085000},{"_id":"themes/maupassant/layout/index.jade","hash":"7466ce52023ed8a413a6b4461354a9e20e62fc14","modified":1463555085000},{"_id":"themes/maupassant/layout/post.jade","hash":"345a38da51017d42380ac22e1070969fc70d2f8d","modified":1463555085000},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1463555085000},{"_id":"source/img/animate/20130624115540296.png","hash":"eb5d493130ed98fb44241dac94a191757d9faec9","modified":1463565052000},{"_id":"source/img/animate/20130624115253140.png","hash":"f7ae8cfbb2a697b44a1b5cd72c5abc82c6d4a90a","modified":1463565045000},{"_id":"source/img/animate/20130624115441921.png","hash":"7a7f7035a6beffdea2f8151534cb520024fbd41e","modified":1463565048000},{"_id":"source/img/avatar/avatar_01.jpg","hash":"10a9ed103d726a81aa42ff11e1368ead020b5549","modified":1463555085000},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1463555085000},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1463555085000},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1463555085000},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1463555085000},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1463555085000},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1463555085000},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1463555085000},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1463555085000},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1463555085000},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1463555085000},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"448809e1cd3141d73840deac80950a14c843119a","modified":1463555085000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"3dbcc9a9f0d6e55da191d3393c18bbfcfe99fa69","modified":1463555085000},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"aa020b794e697e8e9612530c97c6295efde469fe","modified":1463555085000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1463555085000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1463555085000},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1463555085000},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1463555085000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1463555085000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1463555085000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1463555085000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1463555085000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"c53ac5e5d44fa99705ae0e212435095e493ea65e","modified":1463555085000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1463555085000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1463555085000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1463555085000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1463555085000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1463555085000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1463555085000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1463555085000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1463555085000},{"_id":"themes/maupassant/source/css/style.scss","hash":"79e83709c3b7126e105beaa6f3918370969bb1af","modified":1463555085000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1463555085000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1463555085000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1463555085000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1463555085000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1463555085000},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1463555085000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1463555085000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1463555085000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1463555085000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1463555085000},{"_id":"source/img/avatar/avatar_02.jpg","hash":"9352d0da128ecca305c57448dd6010ebb40050a9","modified":1463555085000},{"_id":"source/img/binder/proxy_uml.jpg","hash":"8f51c6397a794e54fdc9db7922135eeed6b4693e","modified":1463555085000},{"_id":"source/img/binder/binder-通信模型.jpg","hash":"569bb26382c1d33687f1e79f53dd17998a208ff3","modified":1463555085000},{"_id":"source/img/binder/binder-跨进程原理.jpg","hash":"3ba2641bee4ac9cf796e10c28e9788ee14f541ad","modified":1463555085000},{"_id":"themes/maupassant/.git/objects/pack/pack-b760c1b6a24ad7ec7d2c75ab85a3a82f017c987f.idx","hash":"bf5a447249750ad48d52a2124a0bf79ac9c66977","modified":1463555085000},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"8f5cebc785d2fe0fb16a1cb94260b56963d4c19b","modified":1463555085000},{"_id":"source/img/binder/Binder框架.jpg","hash":"11c434339e2facbfbc9bed99f8a1062ed9b67e94","modified":1463555085000},{"_id":"source/img/binder/binder通信概述.jpg","hash":"82f023e2adfe74133fe7f146419b2bff95c001dc","modified":1463555085000},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1463555085000},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"448809e1cd3141d73840deac80950a14c843119a","modified":1463555085000},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"448809e1cd3141d73840deac80950a14c843119a","modified":1463555085000},{"_id":"themes/maupassant/.git/objects/pack/pack-b760c1b6a24ad7ec7d2c75ab85a3a82f017c987f.pack","hash":"6f137486031f2909471c32341435e8b55757d6f3","modified":1463555085000},{"_id":"public/search.xml","hash":"0ae8896356fe664e389f6fc04d1740d4bc45d90c","modified":1463573689356},{"_id":"public/404.html","hash":"21891218be756c0c44fa6b4fbc1a8c8bf127e3c4","modified":1463573689365},{"_id":"public/about/index.html","hash":"6dad82f9e16997aa31022a2c8b8dbf121d18525f","modified":1463573689365},{"_id":"public/history/index.html","hash":"bb8191e65140c71ed57dd81c597e2e3fa5f266f4","modified":1463573689365},{"_id":"public/book/index.html","hash":"a04c17ac324518090c9c10fdfc88eb23b9d33e0a","modified":1463573689365},{"_id":"public/2016/05/18/罗马人的故事01/index.html","hash":"2f5d0a10b4da532001bf0df1de9c4a571c5c84f6","modified":1463573689365},{"_id":"public/2016/05/17/thingking-everyday/index.html","hash":"5162ea83cc9ec3165baab677db727587bda95def","modified":1463573689365},{"_id":"public/archives/index.html","hash":"cb5cbfd06817a359a814471d97eaf9ef342a596c","modified":1463573689365},{"_id":"public/archives/2012/index.html","hash":"4d4c47622594777cc773bec1aab982437e61694a","modified":1463573689365},{"_id":"public/archives/2012/11/index.html","hash":"4d4c47622594777cc773bec1aab982437e61694a","modified":1463573689365},{"_id":"public/archives/2014/index.html","hash":"1405a2777a1fc7870c9a71efb1c3e9609964c4ff","modified":1463573689365},{"_id":"public/archives/2014/03/index.html","hash":"8b60008c9531a3d28c506439f9aa8232b29a448a","modified":1463573689365},{"_id":"public/archives/2014/04/index.html","hash":"bca7031b853d092120beed4c759afc86ce35d8f5","modified":1463573689365},{"_id":"public/archives/2016/index.html","hash":"d9b52c965011d3262be78044151839591a39f6b2","modified":1463573689365},{"_id":"public/archives/2016/03/index.html","hash":"eccdd7a638866bd7654bc982dff9ce9dcca40f91","modified":1463573689366},{"_id":"public/archives/2016/05/index.html","hash":"ce1cd74b70c8908c86c7d1708c11b716b6470d83","modified":1463573689366},{"_id":"public/categories/old-blog/index.html","hash":"a062dd4b8c21745b2d2013715fced15604fca9dd","modified":1463573689366},{"_id":"public/categories/android/index.html","hash":"8c6a415fe6d270c1e5751cc1df51476d33a8bcd6","modified":1463573689366},{"_id":"public/categories/history/index.html","hash":"8964cd07f72ccd0d5596ead608112f418b5c21a8","modified":1463573689366},{"_id":"public/index.html","hash":"4aa2dd9ddbc296fa772256a65aad4e104750a2b8","modified":1463573689366},{"_id":"public/tags/Yii/index.html","hash":"15d4c63579696402a5e513ab76e77dbc9f498a82","modified":1463573689366},{"_id":"public/tags/android/index.html","hash":"8c6a415fe6d270c1e5751cc1df51476d33a8bcd6","modified":1463573689366},{"_id":"public/tags/binder/index.html","hash":"78b18691a5b96f05eb4641e93f79fcc003ca0a09","modified":1463573689366},{"_id":"public/tags/book/index.html","hash":"ecc31bb9387c52554a5f861aef924495abeb7c3f","modified":1463573689366},{"_id":"public/tags/life/index.html","hash":"1c3a684d2672ef52dcecb70893ec60a0601f1cfc","modified":1463573689366},{"_id":"public/2016/03/17/binder01/index.html","hash":"7da0edd36a6e46cfd772c8fd3617872fa0383689","modified":1463573689366},{"_id":"public/2014/04/11/Android-开机动画跟踪/index.html","hash":"294c199cf3a7cadd09827cb84afb3f35ed726ea7","modified":1463573689366},{"_id":"public/2014/03/10/Android-启动过程代码跟踪/index.html","hash":"6ac21487177c3584ea3f2e1e74b0571808afabe3","modified":1463573689366},{"_id":"public/2012/11/18/Yii项目实践/index.html","hash":"bb57324cd41bc744caf1ee412750b3e005914810","modified":1463573689366},{"_id":"public/CNAME","hash":"8b188e08b9f943fec2c1a6f143178553ef4692f1","modified":1463573689371},{"_id":"public/img/animate/20130624115540296.png","hash":"eb5d493130ed98fb44241dac94a191757d9faec9","modified":1463573689371},{"_id":"public/img/animate/20130624115253140.png","hash":"f7ae8cfbb2a697b44a1b5cd72c5abc82c6d4a90a","modified":1463573689371},{"_id":"public/img/animate/20130624115441921.png","hash":"7a7f7035a6beffdea2f8151534cb520024fbd41e","modified":1463573689371},{"_id":"public/img/avatar/avatar_01.jpg","hash":"10a9ed103d726a81aa42ff11e1368ead020b5549","modified":1463573689371},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1463573689371},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1463573689371},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1463573689371},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1463573689372},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1463573689372},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1463573689372},{"_id":"public/img/binder/proxy_uml.jpg","hash":"8f51c6397a794e54fdc9db7922135eeed6b4693e","modified":1463573689399},{"_id":"public/img/avatar/avatar_02.jpg","hash":"9352d0da128ecca305c57448dd6010ebb40050a9","modified":1463573689400},{"_id":"public/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1463573689404},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1463573689404},{"_id":"public/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1463573689404},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1463573689404},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1463573689404},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1463573689404},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1463573689404},{"_id":"public/css/style.css","hash":"5e031463c49be0e099889655aaec8538d489b43d","modified":1463573689404},{"_id":"public/img/binder/binder-通信模型.jpg","hash":"569bb26382c1d33687f1e79f53dd17998a208ff3","modified":1463573689404},{"_id":"public/img/binder/binder-跨进程原理.jpg","hash":"3ba2641bee4ac9cf796e10c28e9788ee14f541ad","modified":1463573689404},{"_id":"public/img/binder/Binder框架.jpg","hash":"11c434339e2facbfbc9bed99f8a1062ed9b67e94","modified":1463573689410},{"_id":"public/img/binder/binder通信概述.jpg","hash":"82f023e2adfe74133fe7f146419b2bff95c001dc","modified":1463573689410}],"Category":[{"name":"old blog","_id":"cioctzhe00003vzfyt97ibp43"},{"name":"android","_id":"cioctzheb000evzfyt4g4c1d1"},{"name":"history","_id":"cioctzht9000ovzfy8rx2a9zv"}],"Data":[],"Page":[{"_content":"<p>&lt;!DOCTYPE HTML&gt;</p>\n<html><br><head><br>    <meta charset=\"UTF-8\"><br></head><br><body><br><!--\n<!DOCTYPE HTML>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>公益404 | 不如</title>\n</head>\n<body>\n<h1>404 Page Not Found</h1>\n--><br><script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script><br><!--\n公益404介接入地址\n益云公益404 http://yibo.iyiyun.com/Index/web404\n腾讯公益404 http://www.qq.com/404\n失蹤兒童少年資料管理中心404 http://404page.missingkids.org.tw\n--><br></body><br></html>\n\n","source":"404.html","raw":"<p>&lt;!DOCTYPE HTML&gt;</p>\n<html><br><head><br>    <meta charset=\"UTF-8\"><br></head><br><body><br><!--\n<!DOCTYPE HTML>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>公益404 | 不如</title>\n</head>\n<body>\n<h1>404 Page Not Found</h1>\n--><br><script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script><br><!--\n公益404介接入地址\n益云公益404 http://yibo.iyiyun.com/Index/web404\n腾讯公益404 http://www.qq.com/404\n失蹤兒童少年資料管理中心404 http://404page.missingkids.org.tw\n--><br></body><br></html>\n\n","date":"2016-05-18T07:04:45.000Z","updated":"2016-05-18T07:04:45.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cioctzhdc0000vzfyo9yl4gca","content":"<p>&lt;!DOCTYPE HTML&gt;</p>\n<html><br><head><br>    <meta charset=\"UTF-8\"><br></head><br><body><br><!--\n<!DOCTYPE HTML>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>公益404 | 不如</title>\n</head>\n<body>\n<h1>404 Page Not Found</h1>\n--><br><script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script><br><!--\n公益404介接入地址\n益云公益404 http://yibo.iyiyun.com/Index/web404\n腾讯公益404 http://www.qq.com/404\n失蹤兒童少年資料管理中心404 http://404page.missingkids.org.tw\n--><br></body><br></html>\n\n","excerpt":"","more":"<p>&lt;!DOCTYPE HTML&gt;</p>\n<html><br><head><br>    <meta charset=\"UTF-8\"><br></head><br><body><br><!--\n<!DOCTYPE HTML>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>公益404 | 不如</title>\n</head>\n<body>\n<h1>404 Page Not Found</h1>\n--><br><script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script><br><!--\n公益404介接入地址\n益云公益404 http://yibo.iyiyun.com/Index/web404\n腾讯公益404 http://www.qq.com/404\n失蹤兒童少年資料管理中心404 http://404page.missingkids.org.tw\n--><br></body><br></html>\n\n"},{"title":"关于","date":"2016-05-18T05:42:38.000Z","_content":"\n<i class=\"fa fa-user\"></i> Nickname: <a href=\"http://share2your.info\">DrogonLong</a>\n<i class=\"fa fa-envelope\"></i> Email: <a href=\"mailto:13798560785@126.com\" target=\"_blank\" rel=\"external\">13798560785@126.com</a>\n<i class=\"fa fa-github\"></i> Github: <a href=\"https://github.com/pkjueying\" target=\"_blank\" rel=\"external\">@DrogonLong</a>\n<i class=\"fa fa-twitter\"></i> Twitter: <a href=\"https://twitter.com/pkjueying\" target=\"_blank\" rel=\"external\">@zfltjl080519</a>\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2016-05-18 13:42:38\n---\n\n<i class=\"fa fa-user\"></i> Nickname: <a href=\"http://share2your.info\">DrogonLong</a>\n<i class=\"fa fa-envelope\"></i> Email: <a href=\"mailto:13798560785@126.com\" target=\"_blank\" rel=\"external\">13798560785@126.com</a>\n<i class=\"fa fa-github\"></i> Github: <a href=\"https://github.com/pkjueying\" target=\"_blank\" rel=\"external\">@DrogonLong</a>\n<i class=\"fa fa-twitter\"></i> Twitter: <a href=\"https://twitter.com/pkjueying\" target=\"_blank\" rel=\"external\">@zfltjl080519</a>\n\n","updated":"2016-05-18T07:04:45.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cioctzht0000kvzfyekmfh50a","content":"<p><i class=\"fa fa-user\"></i> Nickname: <a href=\"http://share2your.info\" target=\"_blank\" rel=\"external\">DrogonLong</a><br><i class=\"fa fa-envelope\"></i> Email: <a href=\"mailto:13798560785@126.com\" target=\"_blank\" rel=\"external\">13798560785@126.com</a><br><i class=\"fa fa-github\"></i> Github: <a href=\"https://github.com/pkjueying\" target=\"_blank\" rel=\"external\">@DrogonLong</a><br><i class=\"fa fa-twitter\"></i> Twitter: <a href=\"https://twitter.com/pkjueying\" target=\"_blank\" rel=\"external\">@zfltjl080519</a></p>\n","excerpt":"","more":"<p><i class=\"fa fa-user\"></i> Nickname: <a href=\"http://share2your.info\">DrogonLong</a><br><i class=\"fa fa-envelope\"></i> Email: <a href=\"mailto:13798560785@126.com\" target=\"_blank\" rel=\"external\">13798560785@126.com</a><br><i class=\"fa fa-github\"></i> Github: <a href=\"https://github.com/pkjueying\" target=\"_blank\" rel=\"external\">@DrogonLong</a><br><i class=\"fa fa-twitter\"></i> Twitter: <a href=\"https://twitter.com/pkjueying\" target=\"_blank\" rel=\"external\">@zfltjl080519</a></p>\n"},{"title":"历史","date":"2016-05-18T06:07:42.000Z","_content":"","source":"history/index.md","raw":"---\ntitle: 历史\ndate: 2016-05-18 14:07:42\n---\n","updated":"2016-05-18T07:11:43.000Z","path":"history/index.html","comments":1,"layout":"page","_id":"cioctzht7000mvzfyg6fevaod","content":"","excerpt":"","more":""},{"title":"书籍","date":"2016-05-18T06:09:08.000Z","_content":"","source":"book/index.md","raw":"---\ntitle: 书籍\ndate: 2016-05-18 14:09:08\n---\n","updated":"2016-05-18T07:12:04.000Z","path":"book/index.html","comments":1,"layout":"page","_id":"cioctzhta000pvzfyw8txzmuq","content":"","excerpt":"","more":""}],"Post":[{"title":" android4.2 开机动画跟踪","comment":true,"date":"2014-04-11T09:44:33.000Z","description":"Android系统开机动画简析.","_content":"\n\n> Android4.2 源码， UnderStand源码阅读\n\n\n\nAndroid系统开机过程中主要会出现3个动画：\n\n1. Linux系统启动（默认不出现）\n2. Android平台启动初始化(默认出现“ANDROID的字样”)\n3. ANDROID平台图形系统启动（默认出现含ANDROID字样的闪动动画图片）\n\n下面我们一一来进行跟踪。\n\n首先关于Linux的开机图画在/home2/zfl/a20-4.2/lichee_zfl/linux-3.3/drivers/video/logo/logo.c中。Linux kernel引导启动后，加载该图片。logo.c中定义了nologo,然后在linux_logo * __init_refok fb_find_logo(int depth)方法中根据nologo 来进行判断是否进行显示相关图画。具体相关代码如下：\n\n```cpp\n\nstatic bool nologo;\nmodule_param(nologo, bool, 0);\nMODULE_PARM_DESC(nologo, \"Disables startup logo\");\n\n/* logo's are marked __initdata. Use __init_refok to tell\n * modpost that it is intended that this function uses data\n * marked __initdata.\n */\nconst struct linux_logo * __init_refok fb_find_logo(int depth)\n{\n        const struct linux_logo *logo = NULL;\n\n        if (nologo)\n                return NULL;\n\n        if (depth >= 1) {\n\t\t\\#ifdef CONFIG_LOGO_LINUX_MONO\n                /* Generic Linux logo */\n                logo = &logo_linux_mono;\n\n\t\t...\n}\n```\n\n接下来进行开机“ANDROID”字样的跟踪：\n\nANDROID系统启动后，在/home2/zfl/a20-4.2/android/system/core/init/init.c 中有\n\n```cpp\n\nstatic int console_init_action(int nargs, char **args)\n{\n    int fd;\n    char tmp[PROP_VALUE_MAX];\n\n    if (console[0]) {\n        snprintf(tmp, sizeof(tmp), \"/dev/%s\", console);\n        console_name = strdup(tmp);\n    }\n\n    fd = open(console_name, O_RDWR);\n    if (fd >= 0)\n        have_console = 1;\n    close(fd);\n\n    //if( load_565rle_image(INIT_IMAGE_FILE) ) {\n    if( load_argb8888_image(INIT_IMAGE_FILE) ) {\n        fd = open(\"/dev/tty0\", O_WRONLY);\n        if (fd >= 0) {\n            const char *msg;\n                msg = \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"  // console is 40 cols x 30 lines\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"             A N D R O I D \";\n            write(fd, msg, strlen(msg));\n            close(fd);\n        }\n    }\n    return 0;\n}\n```\n\n而在main()中有相关的调用：\n\n```cpp\n\n  /* skip mounting filesystems in charger mode */\n    if (!is_charger) {\n        action_for_each_trigger(\"early-fs\", action_add_queue_tail);\n        queue_builtin_action(console_init_action, \"console_init\");\n        action_for_each_trigger(\"fs\", action_add_queue_tail);\n        action_for_each_trigger(\"post-fs\", action_add_queue_tail);\n        action_for_each_trigger(\"post-fs-data\", action_add_queue_tail);\n    }\n```\n\n上述中的INIT_IMAGE_FILE 在init.h中有相关定义：\n\n```cpp\n\n\\#define INIT_IMAGE_FILE \"/initlogo.rle\"\n\nint load_565rle_image( char *file_name );\nint load_argb8888_image(char *fn);\n```\n\n接下来进行最后的开机动画即闪动的ANDROID字样的跟踪\n\n在ANDROID4.2中，ANDROID的系统登录动画由前景和背景两站PNG图片组成，在我的系统中，这两张图片位于 /home2/zfl/a20-4.2/android/frameworks/base/core/res/assets/images  如图：\n\n![](/img/animate/20130624115253140.png)\n\n\n前景图片（android-logo-mask.png）中的ANDROID文字部分镂空，如图:\n\n![](/img/animate/20130624115441921.png)\n\n背景图片则是简单的纹理，如图：\n\n![](/img/animate/20130624115540296.png)\n\n前景图片在最上层显示，程序代码控制背景图片的连续滚动，透过前景图片文字镂空部分进行滚动进而显示纹理，从而显示动画效果。\n其相关的代码在：\n\n/home2/zfl/a20-4.2/android/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\n/home2/zfl/a20-4.2/android/frameworks/base/include/androidfw/AssetManager.h\n\n/home2/zfl/a20-4.2/android/frameworks/base/include/androidfw/Asset.h\n\n\n.............................待\n\n","source":"_posts/Android-开机动画跟踪.md","raw":"---\ntitle: ' android4.2 开机动画跟踪'\ncomment: true\ndate: 2014-04-11 17:44:33\ncategories: [old blog]\ntags:\ndescription: Android系统开机动画简析.\n\n---\n\n\n> Android4.2 源码， UnderStand源码阅读\n\n\n\nAndroid系统开机过程中主要会出现3个动画：\n\n1. Linux系统启动（默认不出现）\n2. Android平台启动初始化(默认出现“ANDROID的字样”)\n3. ANDROID平台图形系统启动（默认出现含ANDROID字样的闪动动画图片）\n\n下面我们一一来进行跟踪。\n\n首先关于Linux的开机图画在/home2/zfl/a20-4.2/lichee_zfl/linux-3.3/drivers/video/logo/logo.c中。Linux kernel引导启动后，加载该图片。logo.c中定义了nologo,然后在linux_logo * __init_refok fb_find_logo(int depth)方法中根据nologo 来进行判断是否进行显示相关图画。具体相关代码如下：\n\n```cpp\n\nstatic bool nologo;\nmodule_param(nologo, bool, 0);\nMODULE_PARM_DESC(nologo, \"Disables startup logo\");\n\n/* logo's are marked __initdata. Use __init_refok to tell\n * modpost that it is intended that this function uses data\n * marked __initdata.\n */\nconst struct linux_logo * __init_refok fb_find_logo(int depth)\n{\n        const struct linux_logo *logo = NULL;\n\n        if (nologo)\n                return NULL;\n\n        if (depth >= 1) {\n\t\t\\#ifdef CONFIG_LOGO_LINUX_MONO\n                /* Generic Linux logo */\n                logo = &logo_linux_mono;\n\n\t\t...\n}\n```\n\n接下来进行开机“ANDROID”字样的跟踪：\n\nANDROID系统启动后，在/home2/zfl/a20-4.2/android/system/core/init/init.c 中有\n\n```cpp\n\nstatic int console_init_action(int nargs, char **args)\n{\n    int fd;\n    char tmp[PROP_VALUE_MAX];\n\n    if (console[0]) {\n        snprintf(tmp, sizeof(tmp), \"/dev/%s\", console);\n        console_name = strdup(tmp);\n    }\n\n    fd = open(console_name, O_RDWR);\n    if (fd >= 0)\n        have_console = 1;\n    close(fd);\n\n    //if( load_565rle_image(INIT_IMAGE_FILE) ) {\n    if( load_argb8888_image(INIT_IMAGE_FILE) ) {\n        fd = open(\"/dev/tty0\", O_WRONLY);\n        if (fd >= 0) {\n            const char *msg;\n                msg = \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"  // console is 40 cols x 30 lines\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"\\n\"\n            \"             A N D R O I D \";\n            write(fd, msg, strlen(msg));\n            close(fd);\n        }\n    }\n    return 0;\n}\n```\n\n而在main()中有相关的调用：\n\n```cpp\n\n  /* skip mounting filesystems in charger mode */\n    if (!is_charger) {\n        action_for_each_trigger(\"early-fs\", action_add_queue_tail);\n        queue_builtin_action(console_init_action, \"console_init\");\n        action_for_each_trigger(\"fs\", action_add_queue_tail);\n        action_for_each_trigger(\"post-fs\", action_add_queue_tail);\n        action_for_each_trigger(\"post-fs-data\", action_add_queue_tail);\n    }\n```\n\n上述中的INIT_IMAGE_FILE 在init.h中有相关定义：\n\n```cpp\n\n\\#define INIT_IMAGE_FILE \"/initlogo.rle\"\n\nint load_565rle_image( char *file_name );\nint load_argb8888_image(char *fn);\n```\n\n接下来进行最后的开机动画即闪动的ANDROID字样的跟踪\n\n在ANDROID4.2中，ANDROID的系统登录动画由前景和背景两站PNG图片组成，在我的系统中，这两张图片位于 /home2/zfl/a20-4.2/android/frameworks/base/core/res/assets/images  如图：\n\n![](/img/animate/20130624115253140.png)\n\n\n前景图片（android-logo-mask.png）中的ANDROID文字部分镂空，如图:\n\n![](/img/animate/20130624115441921.png)\n\n背景图片则是简单的纹理，如图：\n\n![](/img/animate/20130624115540296.png)\n\n前景图片在最上层显示，程序代码控制背景图片的连续滚动，透过前景图片文字镂空部分进行滚动进而显示纹理，从而显示动画效果。\n其相关的代码在：\n\n/home2/zfl/a20-4.2/android/frameworks/base/cmds/bootanimation/BootAnimation.cpp\n\n/home2/zfl/a20-4.2/android/frameworks/base/include/androidfw/AssetManager.h\n\n/home2/zfl/a20-4.2/android/frameworks/base/include/androidfw/Asset.h\n\n\n.............................待\n\n","slug":"Android-开机动画跟踪","published":1,"updated":"2016-05-18T12:11:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioctzhdv0001vzfyk12c1dlz","content":"<blockquote>\n<p>Android4.2 源码， UnderStand源码阅读</p>\n</blockquote>\n<p>Android系统开机过程中主要会出现3个动画：</p>\n<ol>\n<li>Linux系统启动（默认不出现）</li>\n<li>Android平台启动初始化(默认出现“ANDROID的字样”)</li>\n<li>ANDROID平台图形系统启动（默认出现含ANDROID字样的闪动动画图片）</li>\n</ol>\n<p>下面我们一一来进行跟踪。</p>\n<p>首先关于Linux的开机图画在/home2/zfl/a20-4.2/lichee_zfl/linux-3.3/drivers/video/logo/logo.c中。Linux kernel引导启动后，加载该图片。logo.c中定义了nologo,然后在linux_logo * __init_refok fb_find_logo(int depth)方法中根据nologo 来进行判断是否进行显示相关图画。具体相关代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> nologo;</span><br><span class=\"line\">module_param(nologo, <span class=\"keyword\">bool</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">MODULE_PARM_DESC(nologo, <span class=\"string\">\"Disables startup logo\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* logo's are marked __initdata. Use __init_refok to tell</span><br><span class=\"line\"> * modpost that it is intended that this function uses data</span><br><span class=\"line\"> * marked __initdata.</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> linux_logo * __<span class=\"function\">init_refok <span class=\"title\">fb_find_logo</span><span class=\"params\">(<span class=\"keyword\">int</span> depth)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> linux_logo *logo = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nologo)</span><br><span class=\"line\">                return <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\\<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_LOGO_LINUX_MONO</span></span><br><span class=\"line\">                <span class=\"comment\">/* Generic Linux logo */</span></span><br><span class=\"line\">                logo = &amp;logo_linux_mono;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来进行开机“ANDROID”字样的跟踪：</p>\n<p>ANDROID系统启动后，在/home2/zfl/a20-4.2/android/system/core/init/init.c 中有</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">console_init_action</span><span class=\"params\">(<span class=\"keyword\">int</span> nargs, <span class=\"keyword\">char</span> **args)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> fd;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> tmp[PROP_VALUE_MAX];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (console[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">snprintf</span>(tmp, <span class=\"keyword\">sizeof</span>(tmp), <span class=\"string\">\"/dev/%s\"</span>, console);</span><br><span class=\"line\">        console_name = strdup(tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fd = open(console_name, O_RDWR);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fd &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        have_console = <span class=\"number\">1</span>;</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//if( load_565rle_image(INIT_IMAGE_FILE) ) &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( load_argb8888_image(INIT_IMAGE_FILE) ) &#123;</span><br><span class=\"line\">        fd = open(<span class=\"string\">\"/dev/tty0\"</span>, O_WRONLY);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fd &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *msg;</span><br><span class=\"line\">                msg = <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span>  <span class=\"comment\">// console is 40 cols x 30 lines</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"             A N D R O I D \"</span>;</span><br><span class=\"line\">            write(fd, msg, <span class=\"built_in\">strlen</span>(msg));</span><br><span class=\"line\">            close(fd);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在main()中有相关的调用：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* skip mounting filesystems in charger mode */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!is_charger) &#123;</span><br><span class=\"line\">      action_for_each_trigger(<span class=\"string\">\"early-fs\"</span>, action_add_queue_tail);</span><br><span class=\"line\">      queue_builtin_action(console_init_action, <span class=\"string\">\"console_init\"</span>);</span><br><span class=\"line\">      action_for_each_trigger(<span class=\"string\">\"fs\"</span>, action_add_queue_tail);</span><br><span class=\"line\">      action_for_each_trigger(<span class=\"string\">\"post-fs\"</span>, action_add_queue_tail);</span><br><span class=\"line\">      action_for_each_trigger(<span class=\"string\">\"post-fs-data\"</span>, action_add_queue_tail);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>上述中的INIT_IMAGE_FILE 在init.h中有相关定义：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\\<span class=\"meta\">#<span class=\"meta-keyword\">define</span> INIT_IMAGE_FILE <span class=\"string\">\"/initlogo.rle\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">load_565rle_image</span><span class=\"params\">( <span class=\"keyword\">char</span> *file_name )</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">load_argb8888_image</span><span class=\"params\">(<span class=\"keyword\">char</span> *fn)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>接下来进行最后的开机动画即闪动的ANDROID字样的跟踪</p>\n<p>在ANDROID4.2中，ANDROID的系统登录动画由前景和背景两站PNG图片组成，在我的系统中，这两张图片位于 /home2/zfl/a20-4.2/android/frameworks/base/core/res/assets/images  如图：</p>\n<p><img src=\"/img/animate/20130624115253140.png\" alt=\"\"></p>\n<p>前景图片（android-logo-mask.png）中的ANDROID文字部分镂空，如图:</p>\n<p><img src=\"/img/animate/20130624115441921.png\" alt=\"\"></p>\n<p>背景图片则是简单的纹理，如图：</p>\n<p><img src=\"/img/animate/20130624115540296.png\" alt=\"\"></p>\n<p>前景图片在最上层显示，程序代码控制背景图片的连续滚动，透过前景图片文字镂空部分进行滚动进而显示纹理，从而显示动画效果。<br>其相关的代码在：</p>\n<p>/home2/zfl/a20-4.2/android/frameworks/base/cmds/bootanimation/BootAnimation.cpp</p>\n<p>/home2/zfl/a20-4.2/android/frameworks/base/include/androidfw/AssetManager.h</p>\n<p>/home2/zfl/a20-4.2/android/frameworks/base/include/androidfw/Asset.h</p>\n<p>………………………..待</p>\n","excerpt":"","more":"<blockquote>\n<p>Android4.2 源码， UnderStand源码阅读</p>\n</blockquote>\n<p>Android系统开机过程中主要会出现3个动画：</p>\n<ol>\n<li>Linux系统启动（默认不出现）</li>\n<li>Android平台启动初始化(默认出现“ANDROID的字样”)</li>\n<li>ANDROID平台图形系统启动（默认出现含ANDROID字样的闪动动画图片）</li>\n</ol>\n<p>下面我们一一来进行跟踪。</p>\n<p>首先关于Linux的开机图画在/home2/zfl/a20-4.2/lichee_zfl/linux-3.3/drivers/video/logo/logo.c中。Linux kernel引导启动后，加载该图片。logo.c中定义了nologo,然后在linux_logo * __init_refok fb_find_logo(int depth)方法中根据nologo 来进行判断是否进行显示相关图画。具体相关代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> nologo;</span><br><span class=\"line\">module_param(nologo, <span class=\"keyword\">bool</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">MODULE_PARM_DESC(nologo, <span class=\"string\">\"Disables startup logo\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* logo's are marked __initdata. Use __init_refok to tell</span><br><span class=\"line\"> * modpost that it is intended that this function uses data</span><br><span class=\"line\"> * marked __initdata.</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> linux_logo * __<span class=\"function\">init_refok <span class=\"title\">fb_find_logo</span><span class=\"params\">(<span class=\"keyword\">int</span> depth)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> linux_logo *logo = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nologo)</span><br><span class=\"line\">                return <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\\<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_LOGO_LINUX_MONO</span></span><br><span class=\"line\">                <span class=\"comment\">/* Generic Linux logo */</span></span><br><span class=\"line\">                logo = &amp;logo_linux_mono;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来进行开机“ANDROID”字样的跟踪：</p>\n<p>ANDROID系统启动后，在/home2/zfl/a20-4.2/android/system/core/init/init.c 中有</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">console_init_action</span><span class=\"params\">(<span class=\"keyword\">int</span> nargs, <span class=\"keyword\">char</span> **args)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> fd;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> tmp[PROP_VALUE_MAX];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (console[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">snprintf</span>(tmp, <span class=\"keyword\">sizeof</span>(tmp), <span class=\"string\">\"/dev/%s\"</span>, console);</span><br><span class=\"line\">        console_name = strdup(tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fd = open(console_name, O_RDWR);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fd &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        have_console = <span class=\"number\">1</span>;</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//if( load_565rle_image(INIT_IMAGE_FILE) ) &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( load_argb8888_image(INIT_IMAGE_FILE) ) &#123;</span><br><span class=\"line\">        fd = open(<span class=\"string\">\"/dev/tty0\"</span>, O_WRONLY);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fd &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *msg;</span><br><span class=\"line\">                msg = <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span>  <span class=\"comment\">// console is 40 cols x 30 lines</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            <span class=\"string\">\"             A N D R O I D \"</span>;</span><br><span class=\"line\">            write(fd, msg, <span class=\"built_in\">strlen</span>(msg));</span><br><span class=\"line\">            close(fd);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在main()中有相关的调用：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* skip mounting filesystems in charger mode */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!is_charger) &#123;</span><br><span class=\"line\">      action_for_each_trigger(<span class=\"string\">\"early-fs\"</span>, action_add_queue_tail);</span><br><span class=\"line\">      queue_builtin_action(console_init_action, <span class=\"string\">\"console_init\"</span>);</span><br><span class=\"line\">      action_for_each_trigger(<span class=\"string\">\"fs\"</span>, action_add_queue_tail);</span><br><span class=\"line\">      action_for_each_trigger(<span class=\"string\">\"post-fs\"</span>, action_add_queue_tail);</span><br><span class=\"line\">      action_for_each_trigger(<span class=\"string\">\"post-fs-data\"</span>, action_add_queue_tail);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>上述中的INIT_IMAGE_FILE 在init.h中有相关定义：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\\<span class=\"meta\">#<span class=\"meta-keyword\">define</span> INIT_IMAGE_FILE <span class=\"string\">\"/initlogo.rle\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">load_565rle_image</span><span class=\"params\">( <span class=\"keyword\">char</span> *file_name )</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">load_argb8888_image</span><span class=\"params\">(<span class=\"keyword\">char</span> *fn)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>接下来进行最后的开机动画即闪动的ANDROID字样的跟踪</p>\n<p>在ANDROID4.2中，ANDROID的系统登录动画由前景和背景两站PNG图片组成，在我的系统中，这两张图片位于 /home2/zfl/a20-4.2/android/frameworks/base/core/res/assets/images  如图：</p>\n<p><img src=\"/img/animate/20130624115253140.png\" alt=\"\"></p>\n<p>前景图片（android-logo-mask.png）中的ANDROID文字部分镂空，如图:</p>\n<p><img src=\"/img/animate/20130624115441921.png\" alt=\"\"></p>\n<p>背景图片则是简单的纹理，如图：</p>\n<p><img src=\"/img/animate/20130624115540296.png\" alt=\"\"></p>\n<p>前景图片在最上层显示，程序代码控制背景图片的连续滚动，透过前景图片文字镂空部分进行滚动进而显示纹理，从而显示动画效果。<br>其相关的代码在：</p>\n<p>/home2/zfl/a20-4.2/android/frameworks/base/cmds/bootanimation/BootAnimation.cpp</p>\n<p>/home2/zfl/a20-4.2/android/frameworks/base/include/androidfw/AssetManager.h</p>\n<p>/home2/zfl/a20-4.2/android/frameworks/base/include/androidfw/Asset.h</p>\n<p>………………………..待</p>\n"},{"title":"Android 启动过程代码跟踪","comment":true,"date":"2014-03-10T08:54:53.000Z","description":"Android 启动过程代码跟踪,  勿喷......","_content":"\n> 准备工作：Android源码，UnderStand源码阅读工具\n\n\n\n我们知道Android系统在启动时首先会启动Linux系统，引导加载Linux Kernel并启动init进程。Init进程是一个由内核启动的用户级进程，是Android系统的第一个进程。该进程的相关代码在android/system/core/init/init.c。在main函数中，有如下代码：\n\n```cpp\n\n   init_parse_config_file(\"/init.rc\");\n\n    action_for_each_trigger(\"early-init\", action_add_queue_tail);\n\n    ......\n\n    /* execute all the boot actions to get us started */\n    action_for_each_trigger(\"init\", action_add_queue_tail);\n\n    /* skip mounting filesystems in charger mode */\n    if (!is_charger) {\n        action_for_each_trigger(\"early-fs\", action_add_queue_tail);\n        action_for_each_trigger(\"fs\", action_add_queue_tail);\n        action_for_each_trigger(\"post-fs\", action_add_queue_tail);\n        action_for_each_trigger(\"post-fs-data\", action_add_queue_tail);\n    }\n\n    .......\n\n    if (is_charger) {\n        action_for_each_trigger(\"charger\", action_add_queue_tail);\n    } else {\n        action_for_each_trigger(\"early-boot\", action_add_queue_tail);\n        action_for_each_trigger(\"boot\", action_add_queue_tail);\n    }\n```\n\n\n这里会加载init.rc并进行解析，init.rc文件定义了在init进程中需要启动哪些进程服务和执行哪些动作。其详细说明参见android/system/core/init/reademe.txt。init.rc见如下定义：\n\n......\nservice servicemanager /system/bin/servicemanager\n    class core\n    user system\n    group system\n    critical\n    onrestart restart zygote\n    onrestart restart media\n    onrestart restart surfaceflinger\n    onrestart restart drm\n\nservice vold /system/bin/vold\n    class core\n    socket vold stream 0660 root mount\n    ioprio be 2\n\n........\n\nservice zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server\n    class main\n    socket zygote stream 660 root system\n    onrestart write /sys/android_power/request_state wake\n    onrestart write /sys/power/state on\n    onrestart restart media\n    onrestart restart netd\n\nservice drm /system/bin/drmserver\n    class main\n    user drm\n    group drm system inet drmrpc sdcard_r\n\nservice media /system/bin/mediaserver\n    class main\n\n..........\n\n\n具体解析过程见android/system/core/init/Init_parser.c。解析所得服务添加到service_list中，动作添加到action_list中。主要代码流程如下：\n```cpp\n\nfor (;;) {\n        switch (next_token(&state)) {\n        case T_EOF:\n            state.parse_line(&state, 0, 0);\n            goto parser_done;\n        case T_NEWLINE:\n            state.line++;\n            if (nargs) {\n                int kw = lookup_keyword(args[0]);\n                if (kw_is(kw, SECTION)) {\n                    state.parse_line(&state, 0, 0);\n                    parse_new_section(&state, kw, nargs, args);\n                } else {\n                    state.parse_line(&state, nargs, args);\n                }\n                nargs = 0;\n            }\n            break;\n        case T_TEXT:\n            if (nargs < INIT_PARSER_MAXARGS) {\n                args[nargs++] = state.text;\n            }\n            break;\n        }\n    }\n\nparser_done:\n    list_for_each(node, &import_list) {\n         struct import *import = node_to_item(node, struct import, list);\n         int ret;\n\n         INFO(\"importing '%s'\", import->filename);\n         ret = init_parse_config_file(import->filename);\n         if (ret)\n             ERROR(\"could not import file '%s' from '%s'\\n\",\n                   import->filename, fn);\n    }\n    \n```\n\n接下来在main函数中执行动作和启动进程服务：\n```cpp\n\nfor(; ;) {\n......\nexecute_one_command();\n        restart_processes();\n......\n}\n\n```\n\n通常init过程需要创建一些系统文件夹并启动USB守护进程、Android Debug Bridge守护进程、Debug守护进程、ServiceManager进程、Zygote进程等。\n\n由init.rc对ServiceManager的描述service servicemanager /system/bin/servicemanager可知servicemanager进程从platform\\frameworks\\base\\cmd\\servicemanager\\Service_manager.cpp启动。在main函数中有如下代码：\n\n```cpp\n\nint main(int argc, char **argv)\n{\n    struct binder_state *bs;\n    void *svcmgr = BINDER_SERVICE_MANAGER;\n\n    bs = binder_open(128*1024);\n\n    if (binder_become_context_manager(bs)) {\n        ALOGE(\"cannot become context manager (%s)\\n\", strerror(errno));\n        return -1;\n    }\n\n    svcmgr_handle = svcmgr;\n    binder_loop(bs, svcmgr_handler);\n    return 0;\n}\n\n```\n\n而在android/framework/base/cmd/servicemanager/Binder.c中\n```cpp\n\nint binder_become_context_manager(struct binder_state *bs)\n{\n    return ioctl(bs->fd, BINDER_SET_CONTEXT_MGR, 0);\n}\n```\n\n以上首先调用binder_open()打开Binder设备(/dev/binder)，调用binder_become_context_manager()把当前进程设置为ServiceManager。ServiceManager本身就是一个服务。最后binder_loop()进入循环状态，并设置svcmgr_handler回调函数等待添加、查询、获取服务等请求。\n\n在启动servicemanager的同时，再来启动Zygote，由init.rc对zygote的描述service zygot /system/bin/app_process可知zygote进程从Android\\frameworks\\base\\cmds\\app_process\\App_main.cpp启动。这个文件的main（）方法，会调用Android_Runtime.cpp的文件中的start（）方法，这个方法通过JNI机制，来调用ZygoteInit.java孵化器初始文件，这个文件的Main（）函数，将会去调用所有进程。其主要代码如下:\n\n```cpp\n\n......\nwhile (i < argc) {\n        const char* arg = argv[i++];\n        if (!parentDir) {\n            parentDir = arg;\n        } else if (strcmp(arg, \"--zygote\") == 0) {\n            zygote = true;\n            niceName = \"zygote\";\n        } else if (strcmp(arg, \"--start-system-server\") == 0) {\n            startSystemServer = true;\n        } else if (strcmp(arg, \"--application\") == 0) {\n            application = true;\n        } else if (strncmp(arg, \"--nice-name=\", 12) == 0) {\n            niceName = arg + 12;\n        } else {\n            className = arg;\n            break;\n        }\n    }\n........\nif (zygote) {\n        runtime.start(\"com.android.internal.os.ZygoteInit\",\n                startSystemServer ? \"start-system-server\" : \"\");\n    } else if (className) {\n        // Remainder of args get passed to startup class main()\n        runtime.mClassName = className;\n        runtime.mArgC = argc - i;\n        runtime.mArgV = argv + i;\n        runtime.start(\"com.android.internal.os.RuntimeInit\",\n                application ? \"application\" : \"tool\");\n    } else {\n        fprintf(stderr, \"Error: no class name or --zygote supplied.\\n\");\n        app_usage();\n        LOG_ALWAYS_FATAL(\"app_process: no class name or --zygote supplied.\");\n        return 10;\n    }\n    \n```\n\n其中runtime是AppRuntime类型，而AppRuntime继承至AndroidRuntime。我们继续跟踪 runtime.start函数：因在AppRuntime中没有对start的复写，我们到AppRuntime查看start的实现，路劲：android/framework/base/core/init\n代码如下：注意runtime.start所传的参数\n\n```cpp\n\nvoid AndroidRuntime::start(const char* className, const char* options)\n{\n\n if (strcmp(options, \"start-system-server\") == 0) {\n\n /* start the virtual machine */\n JNIEnv* env;\n if (startVm(&mJavaVM, &env) != 0) {\nreturn;\n }\n onVmCreated(env);\n\n    ...\n    /*\n     * Start VM.  This thread becomes the main thread of the VM, and will\n     * not return until the VM exits.\n     */\n    char* slashClassName = toSlashClassName(className);\n    jclass startClass = env->FindClass(slashClassName);     //com.android.internal.os.ZygoteInit\n    if (startClass == NULL) {\n        ...\n    } else {\n        jmethodID startMeth = env->GetStaticMethodID(startClass, \"main\",\n            \"([Ljava/lang/String;)V\");\n        if (startMeth == NULL) {\n            ALOGE(\"JavaVM unable to find main() in '%s'\\n\", className);\n            /* keep going */\n        } else {\n            env->CallStaticVoidMethod(startClass, startMeth, strArray);\n\t    ...\n        }\n    }\n    ...\n}\n\n```\n\n即先启动了虚拟机，然后利用JNI调用了zygoteInit。路劲：android/framework/base/core/java/com/android/internal/os在ZygoteInit的main中\n\n```cpp\n \npublic static void main(String argv[]) {\n        try {\n            ...\n            if (argv[1].equals(\"start-system-server\")) {\n                startSystemServer();\n            } else if (!argv[1].equals(\"\")) {\n                throw new RuntimeException(argv[0] + USAGE_STRING);\n            }\n            ...\n        } catch (MethodAndArgsCaller caller) {\n            ...\n        } \n}\n```\n\n我们继续跟踪startSystemServer() ， 在startSystemServer()中 ：\n\n```cpp\n\nprivate static boolean startSystemServer() throws \n\tMethodAndArgsCaller, RuntimeException {\n        String args[] = {\n            ...\n            \"--runtime-init\",\n            \"--nice-name=system_server\",\n            \"com.android.server.SystemServer\",\n        };\n       \n        try {\n            parsedArgs = new ZygoteConnection.Arguments(args);\n            ...\n            pid = Zygote.forkSystemServer(\n                    ...\n                    parsedArgs.permittedCapabilities,\n                    parsedArgs.effectiveCapabilities);\n        } catch (IllegalArgumentException ex) {\n            throw new RuntimeException(ex);\n        }\n        ...\n        return true;\n    }\n```\n\n Zygote包装了Linux的fork。forkSystemServer()调用forkAndSpecialize()，最终穿过虚拟机调用android\\dalvik\\vm\\native\\dalvik_system_Zygote.c中Dalvik_dalvik_system_Zygote_forkAndSpecialize()。由dalvik完成fork新的进程。\n main()最后会调用runSelectLoopMode()，进入while循环，由peers创建新的进程。\n\n我们跳转至com.android.server.SystemServer中,目录：android/framework/base/services/java/com/android/server \n\n```cpp\npublic static void main(String[] args) {\n    \t...\n        init1(args);\n}\n\n```\n\n在其main()函数中调用了init1(args)这个native函数，利用JNI机制，跟踪至frameworks/base/services/jni/com_android_server_systemService.cpp，然后到\nframeworks/base/cmds/system_server/library/system_init.cpp在system_init()函数中有如下代码：\n```cpp\n    if (strcmp(propBuf, \"1\") == 0) {\n        // Start the SurfaceFlinger\n        SurfaceFlinger::instantiate();\n    }\n    AndroidRuntime* runtime = AndroidRuntime::getRuntime();\n    ...\n    LOGI(\"System server: starting Android services./n\");\n    runtime->callStatic(\"com/android/server/SystemServer\", \"init2\");\n    \n```\n\n  即完成了SurfaceFlinger的实例化，然后利用运行时的callStatic()函数调用了SystemServer的init2()函数.代码如下:\n \n```cpp    \n\n public static final void init2() {\n        Slog.i(TAG, \"Entered the Android system server!\");\n        Thread thr = new ServerThread();\n        thr.setName(\"android.server.ServerThread\");\n        thr.start();\n }\n```\n\n在这个ServerThread线程中，就可以看到我们熟悉的Android服务了：\n```cpp\n\n    @Override\n    public void run() {\n        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_SYSTEM_RUN,\n            SystemClock.uptimeMillis());\n\n        Looper.prepareMainLooper();\n\n        ......\n\n        \n        ContentService contentService = null;\n        LightsService lights = null;\n        PowerManagerService power = null;\n        DynamicPManagerService dpm = null;\n        DisplayManagerService display = null;\n        BatteryService battery = null;\n        VibratorService vibrator = null;\n        AlarmManagerService alarm = null;\n        ......\n\n               \n        .....\n\n       \ttry {\n                Slog.i(TAG, \"Status Bar\");\n                statusBar = new StatusBarManagerService(context, wm);\n                ServiceManager.addService(Context.STATUS_BAR_SERVICE, statusBar);\n            } catch (Throwable e) {\n                reportWtf(\"starting StatusBarManagerService\", e);\n            }\n\n            try {\n                Slog.i(TAG, \"Clipboard Service\");\n                ServiceManager.addService(Context.CLIPBOARD_SERVICE,\n                        new ClipboardService(context));\n            } catch (Throwable e) {\n                reportWtf(\"starting Clipboard Service\", e);\n            }\n\n            try {\n                Slog.i(TAG, \"NetworkManagement Service\");\n                networkManagement = NetworkManagementService.create(context);\n                ServiceManager.addService(Context.NETWORKMANAGEMENT_SERVICE, networkManagement);\n            } catch (Throwable e) {\n                reportWtf(\"starting NetworkManagement Service\", e);\n            }\n\n       \n\n        Looper.loop();\n        Slog.d(TAG, \"System ServerThread is exiting!\");\n    }\n    \n    \n```\n\n最后，调用各服务的systemReady()函数通知系统就绪,至此，系统的启动过程结束.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Android-启动过程代码跟踪.md","raw":"---\ntitle: Android 启动过程代码跟踪\ncomment: true\ndate: 2014-03-10 16:54:53\ncategories: [old blog]\ntags: \ndescription: Android 启动过程代码跟踪,  勿喷......\n\n---\n\n> 准备工作：Android源码，UnderStand源码阅读工具\n\n\n\n我们知道Android系统在启动时首先会启动Linux系统，引导加载Linux Kernel并启动init进程。Init进程是一个由内核启动的用户级进程，是Android系统的第一个进程。该进程的相关代码在android/system/core/init/init.c。在main函数中，有如下代码：\n\n```cpp\n\n   init_parse_config_file(\"/init.rc\");\n\n    action_for_each_trigger(\"early-init\", action_add_queue_tail);\n\n    ......\n\n    /* execute all the boot actions to get us started */\n    action_for_each_trigger(\"init\", action_add_queue_tail);\n\n    /* skip mounting filesystems in charger mode */\n    if (!is_charger) {\n        action_for_each_trigger(\"early-fs\", action_add_queue_tail);\n        action_for_each_trigger(\"fs\", action_add_queue_tail);\n        action_for_each_trigger(\"post-fs\", action_add_queue_tail);\n        action_for_each_trigger(\"post-fs-data\", action_add_queue_tail);\n    }\n\n    .......\n\n    if (is_charger) {\n        action_for_each_trigger(\"charger\", action_add_queue_tail);\n    } else {\n        action_for_each_trigger(\"early-boot\", action_add_queue_tail);\n        action_for_each_trigger(\"boot\", action_add_queue_tail);\n    }\n```\n\n\n这里会加载init.rc并进行解析，init.rc文件定义了在init进程中需要启动哪些进程服务和执行哪些动作。其详细说明参见android/system/core/init/reademe.txt。init.rc见如下定义：\n\n......\nservice servicemanager /system/bin/servicemanager\n    class core\n    user system\n    group system\n    critical\n    onrestart restart zygote\n    onrestart restart media\n    onrestart restart surfaceflinger\n    onrestart restart drm\n\nservice vold /system/bin/vold\n    class core\n    socket vold stream 0660 root mount\n    ioprio be 2\n\n........\n\nservice zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server\n    class main\n    socket zygote stream 660 root system\n    onrestart write /sys/android_power/request_state wake\n    onrestart write /sys/power/state on\n    onrestart restart media\n    onrestart restart netd\n\nservice drm /system/bin/drmserver\n    class main\n    user drm\n    group drm system inet drmrpc sdcard_r\n\nservice media /system/bin/mediaserver\n    class main\n\n..........\n\n\n具体解析过程见android/system/core/init/Init_parser.c。解析所得服务添加到service_list中，动作添加到action_list中。主要代码流程如下：\n```cpp\n\nfor (;;) {\n        switch (next_token(&state)) {\n        case T_EOF:\n            state.parse_line(&state, 0, 0);\n            goto parser_done;\n        case T_NEWLINE:\n            state.line++;\n            if (nargs) {\n                int kw = lookup_keyword(args[0]);\n                if (kw_is(kw, SECTION)) {\n                    state.parse_line(&state, 0, 0);\n                    parse_new_section(&state, kw, nargs, args);\n                } else {\n                    state.parse_line(&state, nargs, args);\n                }\n                nargs = 0;\n            }\n            break;\n        case T_TEXT:\n            if (nargs < INIT_PARSER_MAXARGS) {\n                args[nargs++] = state.text;\n            }\n            break;\n        }\n    }\n\nparser_done:\n    list_for_each(node, &import_list) {\n         struct import *import = node_to_item(node, struct import, list);\n         int ret;\n\n         INFO(\"importing '%s'\", import->filename);\n         ret = init_parse_config_file(import->filename);\n         if (ret)\n             ERROR(\"could not import file '%s' from '%s'\\n\",\n                   import->filename, fn);\n    }\n    \n```\n\n接下来在main函数中执行动作和启动进程服务：\n```cpp\n\nfor(; ;) {\n......\nexecute_one_command();\n        restart_processes();\n......\n}\n\n```\n\n通常init过程需要创建一些系统文件夹并启动USB守护进程、Android Debug Bridge守护进程、Debug守护进程、ServiceManager进程、Zygote进程等。\n\n由init.rc对ServiceManager的描述service servicemanager /system/bin/servicemanager可知servicemanager进程从platform\\frameworks\\base\\cmd\\servicemanager\\Service_manager.cpp启动。在main函数中有如下代码：\n\n```cpp\n\nint main(int argc, char **argv)\n{\n    struct binder_state *bs;\n    void *svcmgr = BINDER_SERVICE_MANAGER;\n\n    bs = binder_open(128*1024);\n\n    if (binder_become_context_manager(bs)) {\n        ALOGE(\"cannot become context manager (%s)\\n\", strerror(errno));\n        return -1;\n    }\n\n    svcmgr_handle = svcmgr;\n    binder_loop(bs, svcmgr_handler);\n    return 0;\n}\n\n```\n\n而在android/framework/base/cmd/servicemanager/Binder.c中\n```cpp\n\nint binder_become_context_manager(struct binder_state *bs)\n{\n    return ioctl(bs->fd, BINDER_SET_CONTEXT_MGR, 0);\n}\n```\n\n以上首先调用binder_open()打开Binder设备(/dev/binder)，调用binder_become_context_manager()把当前进程设置为ServiceManager。ServiceManager本身就是一个服务。最后binder_loop()进入循环状态，并设置svcmgr_handler回调函数等待添加、查询、获取服务等请求。\n\n在启动servicemanager的同时，再来启动Zygote，由init.rc对zygote的描述service zygot /system/bin/app_process可知zygote进程从Android\\frameworks\\base\\cmds\\app_process\\App_main.cpp启动。这个文件的main（）方法，会调用Android_Runtime.cpp的文件中的start（）方法，这个方法通过JNI机制，来调用ZygoteInit.java孵化器初始文件，这个文件的Main（）函数，将会去调用所有进程。其主要代码如下:\n\n```cpp\n\n......\nwhile (i < argc) {\n        const char* arg = argv[i++];\n        if (!parentDir) {\n            parentDir = arg;\n        } else if (strcmp(arg, \"--zygote\") == 0) {\n            zygote = true;\n            niceName = \"zygote\";\n        } else if (strcmp(arg, \"--start-system-server\") == 0) {\n            startSystemServer = true;\n        } else if (strcmp(arg, \"--application\") == 0) {\n            application = true;\n        } else if (strncmp(arg, \"--nice-name=\", 12) == 0) {\n            niceName = arg + 12;\n        } else {\n            className = arg;\n            break;\n        }\n    }\n........\nif (zygote) {\n        runtime.start(\"com.android.internal.os.ZygoteInit\",\n                startSystemServer ? \"start-system-server\" : \"\");\n    } else if (className) {\n        // Remainder of args get passed to startup class main()\n        runtime.mClassName = className;\n        runtime.mArgC = argc - i;\n        runtime.mArgV = argv + i;\n        runtime.start(\"com.android.internal.os.RuntimeInit\",\n                application ? \"application\" : \"tool\");\n    } else {\n        fprintf(stderr, \"Error: no class name or --zygote supplied.\\n\");\n        app_usage();\n        LOG_ALWAYS_FATAL(\"app_process: no class name or --zygote supplied.\");\n        return 10;\n    }\n    \n```\n\n其中runtime是AppRuntime类型，而AppRuntime继承至AndroidRuntime。我们继续跟踪 runtime.start函数：因在AppRuntime中没有对start的复写，我们到AppRuntime查看start的实现，路劲：android/framework/base/core/init\n代码如下：注意runtime.start所传的参数\n\n```cpp\n\nvoid AndroidRuntime::start(const char* className, const char* options)\n{\n\n if (strcmp(options, \"start-system-server\") == 0) {\n\n /* start the virtual machine */\n JNIEnv* env;\n if (startVm(&mJavaVM, &env) != 0) {\nreturn;\n }\n onVmCreated(env);\n\n    ...\n    /*\n     * Start VM.  This thread becomes the main thread of the VM, and will\n     * not return until the VM exits.\n     */\n    char* slashClassName = toSlashClassName(className);\n    jclass startClass = env->FindClass(slashClassName);     //com.android.internal.os.ZygoteInit\n    if (startClass == NULL) {\n        ...\n    } else {\n        jmethodID startMeth = env->GetStaticMethodID(startClass, \"main\",\n            \"([Ljava/lang/String;)V\");\n        if (startMeth == NULL) {\n            ALOGE(\"JavaVM unable to find main() in '%s'\\n\", className);\n            /* keep going */\n        } else {\n            env->CallStaticVoidMethod(startClass, startMeth, strArray);\n\t    ...\n        }\n    }\n    ...\n}\n\n```\n\n即先启动了虚拟机，然后利用JNI调用了zygoteInit。路劲：android/framework/base/core/java/com/android/internal/os在ZygoteInit的main中\n\n```cpp\n \npublic static void main(String argv[]) {\n        try {\n            ...\n            if (argv[1].equals(\"start-system-server\")) {\n                startSystemServer();\n            } else if (!argv[1].equals(\"\")) {\n                throw new RuntimeException(argv[0] + USAGE_STRING);\n            }\n            ...\n        } catch (MethodAndArgsCaller caller) {\n            ...\n        } \n}\n```\n\n我们继续跟踪startSystemServer() ， 在startSystemServer()中 ：\n\n```cpp\n\nprivate static boolean startSystemServer() throws \n\tMethodAndArgsCaller, RuntimeException {\n        String args[] = {\n            ...\n            \"--runtime-init\",\n            \"--nice-name=system_server\",\n            \"com.android.server.SystemServer\",\n        };\n       \n        try {\n            parsedArgs = new ZygoteConnection.Arguments(args);\n            ...\n            pid = Zygote.forkSystemServer(\n                    ...\n                    parsedArgs.permittedCapabilities,\n                    parsedArgs.effectiveCapabilities);\n        } catch (IllegalArgumentException ex) {\n            throw new RuntimeException(ex);\n        }\n        ...\n        return true;\n    }\n```\n\n Zygote包装了Linux的fork。forkSystemServer()调用forkAndSpecialize()，最终穿过虚拟机调用android\\dalvik\\vm\\native\\dalvik_system_Zygote.c中Dalvik_dalvik_system_Zygote_forkAndSpecialize()。由dalvik完成fork新的进程。\n main()最后会调用runSelectLoopMode()，进入while循环，由peers创建新的进程。\n\n我们跳转至com.android.server.SystemServer中,目录：android/framework/base/services/java/com/android/server \n\n```cpp\npublic static void main(String[] args) {\n    \t...\n        init1(args);\n}\n\n```\n\n在其main()函数中调用了init1(args)这个native函数，利用JNI机制，跟踪至frameworks/base/services/jni/com_android_server_systemService.cpp，然后到\nframeworks/base/cmds/system_server/library/system_init.cpp在system_init()函数中有如下代码：\n```cpp\n    if (strcmp(propBuf, \"1\") == 0) {\n        // Start the SurfaceFlinger\n        SurfaceFlinger::instantiate();\n    }\n    AndroidRuntime* runtime = AndroidRuntime::getRuntime();\n    ...\n    LOGI(\"System server: starting Android services./n\");\n    runtime->callStatic(\"com/android/server/SystemServer\", \"init2\");\n    \n```\n\n  即完成了SurfaceFlinger的实例化，然后利用运行时的callStatic()函数调用了SystemServer的init2()函数.代码如下:\n \n```cpp    \n\n public static final void init2() {\n        Slog.i(TAG, \"Entered the Android system server!\");\n        Thread thr = new ServerThread();\n        thr.setName(\"android.server.ServerThread\");\n        thr.start();\n }\n```\n\n在这个ServerThread线程中，就可以看到我们熟悉的Android服务了：\n```cpp\n\n    @Override\n    public void run() {\n        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_SYSTEM_RUN,\n            SystemClock.uptimeMillis());\n\n        Looper.prepareMainLooper();\n\n        ......\n\n        \n        ContentService contentService = null;\n        LightsService lights = null;\n        PowerManagerService power = null;\n        DynamicPManagerService dpm = null;\n        DisplayManagerService display = null;\n        BatteryService battery = null;\n        VibratorService vibrator = null;\n        AlarmManagerService alarm = null;\n        ......\n\n               \n        .....\n\n       \ttry {\n                Slog.i(TAG, \"Status Bar\");\n                statusBar = new StatusBarManagerService(context, wm);\n                ServiceManager.addService(Context.STATUS_BAR_SERVICE, statusBar);\n            } catch (Throwable e) {\n                reportWtf(\"starting StatusBarManagerService\", e);\n            }\n\n            try {\n                Slog.i(TAG, \"Clipboard Service\");\n                ServiceManager.addService(Context.CLIPBOARD_SERVICE,\n                        new ClipboardService(context));\n            } catch (Throwable e) {\n                reportWtf(\"starting Clipboard Service\", e);\n            }\n\n            try {\n                Slog.i(TAG, \"NetworkManagement Service\");\n                networkManagement = NetworkManagementService.create(context);\n                ServiceManager.addService(Context.NETWORKMANAGEMENT_SERVICE, networkManagement);\n            } catch (Throwable e) {\n                reportWtf(\"starting NetworkManagement Service\", e);\n            }\n\n       \n\n        Looper.loop();\n        Slog.d(TAG, \"System ServerThread is exiting!\");\n    }\n    \n    \n```\n\n最后，调用各服务的systemReady()函数通知系统就绪,至此，系统的启动过程结束.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Android-启动过程代码跟踪","published":1,"updated":"2016-05-18T12:11:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioctzhdz0002vzfy6lx203g3","content":"<blockquote>\n<p>准备工作：Android源码，UnderStand源码阅读工具</p>\n</blockquote>\n<p>我们知道Android系统在启动时首先会启动Linux系统，引导加载Linux Kernel并启动init进程。Init进程是一个由内核启动的用户级进程，是Android系统的第一个进程。该进程的相关代码在android/system/core/init/init.c。在main函数中，有如下代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">init_parse_config_file(<span class=\"string\">\"/init.rc\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> action_for_each_trigger(<span class=\"string\">\"early-init\"</span>, action_add_queue_tail);</span><br><span class=\"line\"></span><br><span class=\"line\"> ......</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/* execute all the boot actions to get us started */</span></span><br><span class=\"line\"> action_for_each_trigger(<span class=\"string\">\"init\"</span>, action_add_queue_tail);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/* skip mounting filesystems in charger mode */</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!is_charger) &#123;</span><br><span class=\"line\">     action_for_each_trigger(<span class=\"string\">\"early-fs\"</span>, action_add_queue_tail);</span><br><span class=\"line\">     action_for_each_trigger(<span class=\"string\">\"fs\"</span>, action_add_queue_tail);</span><br><span class=\"line\">     action_for_each_trigger(<span class=\"string\">\"post-fs\"</span>, action_add_queue_tail);</span><br><span class=\"line\">     action_for_each_trigger(<span class=\"string\">\"post-fs-data\"</span>, action_add_queue_tail);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> .......</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (is_charger) &#123;</span><br><span class=\"line\">     action_for_each_trigger(<span class=\"string\">\"charger\"</span>, action_add_queue_tail);</span><br><span class=\"line\"> &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     action_for_each_trigger(<span class=\"string\">\"early-boot\"</span>, action_add_queue_tail);</span><br><span class=\"line\">     action_for_each_trigger(<span class=\"string\">\"boot\"</span>, action_add_queue_tail);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>这里会加载init.rc并进行解析，init.rc文件定义了在init进程中需要启动哪些进程服务和执行哪些动作。其详细说明参见android/system/core/init/reademe.txt。init.rc见如下定义：</p>\n<p>……<br>service servicemanager /system/bin/servicemanager<br>    class core<br>    user system<br>    group system<br>    critical<br>    onrestart restart zygote<br>    onrestart restart media<br>    onrestart restart surfaceflinger<br>    onrestart restart drm</p>\n<p>service vold /system/bin/vold<br>    class core<br>    socket vold stream 0660 root mount<br>    ioprio be 2</p>\n<p>……..</p>\n<p>service zygote /system/bin/app_process -Xzygote /system/bin –zygote –start-system-server<br>    class main<br>    socket zygote stream 660 root system<br>    onrestart write /sys/android_power/request_state wake<br>    onrestart write /sys/power/state on<br>    onrestart restart media<br>    onrestart restart netd</p>\n<p>service drm /system/bin/drmserver<br>    class main<br>    user drm<br>    group drm system inet drmrpc sdcard_r</p>\n<p>service media /system/bin/mediaserver<br>    class main</p>\n<p>……….</p>\n<p>具体解析过程见android/system/core/init/Init_parser.c。解析所得服务添加到service_list中，动作添加到action_list中。主要代码流程如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (next_token(&amp;state)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> T_EOF:</span><br><span class=\"line\">            state.parse_line(&amp;state, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> parser_done;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> T_NEWLINE:</span><br><span class=\"line\">            state.line++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nargs) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> kw = lookup_keyword(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (kw_is(kw, SECTION)) &#123;</span><br><span class=\"line\">                    state.parse_line(&amp;state, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                    parse_new_section(&amp;state, kw, nargs, args);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    state.parse_line(&amp;state, nargs, args);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                nargs = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> T_TEXT:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nargs &lt; INIT_PARSER_MAXARGS) &#123;</span><br><span class=\"line\">                args[nargs++] = state.text;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">parser_done:</span><br><span class=\"line\">    list_for_each(node, &amp;import_list) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">struct</span> import *import = node_to_item(node, struct import, list);</span><br><span class=\"line\">         <span class=\"keyword\">int</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">         INFO(<span class=\"string\">\"importing '%s'\"</span>, import-&gt;filename);</span><br><span class=\"line\">         ret = init_parse_config_file(import-&gt;filename);</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (ret)</span><br><span class=\"line\">             ERROR(<span class=\"string\">\"could not import file '%s' from '%s'\\n\"</span>,</span><br><span class=\"line\">                   import-&gt;filename, fn);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来在main函数中执行动作和启动进程服务：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(; ;) &#123;</span><br><span class=\"line\">......</span><br><span class=\"line\">execute_one_command();</span><br><span class=\"line\">        restart_processes();</span><br><span class=\"line\">......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通常init过程需要创建一些系统文件夹并启动USB守护进程、Android Debug Bridge守护进程、Debug守护进程、ServiceManager进程、Zygote进程等。</p>\n<p>由init.rc对ServiceManager的描述service servicemanager /system/bin/servicemanager可知servicemanager进程从platform\\frameworks\\base\\cmd\\servicemanager\\Service_manager.cpp启动。在main函数中有如下代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> binder_state *bs;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *svcmgr = BINDER_SERVICE_MANAGER;</span><br><span class=\"line\"></span><br><span class=\"line\">    bs = binder_open(<span class=\"number\">128</span>*<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (binder_become_context_manager(bs)) &#123;</span><br><span class=\"line\">        ALOGE(<span class=\"string\">\"cannot become context manager (%s)\\n\"</span>, strerror(errno));</span><br><span class=\"line\">        return <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    svcmgr_handle = svcmgr;</span><br><span class=\"line\">    binder_loop(bs, svcmgr_handler);</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在android/framework/base/cmd/servicemanager/Binder.c中<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">binder_become_context_manager</span><span class=\"params\">(<span class=\"keyword\">struct</span> binder_state *bs)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    return ioctl(bs-&gt;fd, BINDER_SET_CONTEXT_MGR, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上首先调用binder_open()打开Binder设备(/dev/binder)，调用binder_become_context_manager()把当前进程设置为ServiceManager。ServiceManager本身就是一个服务。最后binder_loop()进入循环状态，并设置svcmgr_handler回调函数等待添加、查询、获取服务等请求。</p>\n<p>在启动servicemanager的同时，再来启动Zygote，由init.rc对zygote的描述service zygot /system/bin/app_process可知zygote进程从Android\\frameworks\\base\\cmds\\app_process\\App_main.cpp启动。这个文件的main（）方法，会调用Android_Runtime.cpp的文件中的start（）方法，这个方法通过JNI机制，来调用ZygoteInit.java孵化器初始文件，这个文件的Main（）函数，将会去调用所有进程。其主要代码如下:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; argc) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* arg = argv[i++];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!parentDir) &#123;</span><br><span class=\"line\">            parentDir = arg;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (strcmp(arg, <span class=\"string\">\"--zygote\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            zygote = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            niceName = <span class=\"string\">\"zygote\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (strcmp(arg, <span class=\"string\">\"--start-system-server\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            startSystemServer = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (strcmp(arg, <span class=\"string\">\"--application\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            application = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (strncmp(arg, <span class=\"string\">\"--nice-name=\"</span>, <span class=\"number\">12</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            niceName = arg + <span class=\"number\">12</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            className = arg;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">........</span><br><span class=\"line\"><span class=\"keyword\">if</span> (zygote) &#123;</span><br><span class=\"line\">        runtime.start(<span class=\"string\">\"com.android.internal.os.ZygoteInit\"</span>,</span><br><span class=\"line\">                startSystemServer ? <span class=\"string\">\"start-system-server\"</span> : <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (className) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Remainder of args get passed to startup class main()</span></span><br><span class=\"line\">        runtime.mClassName = className;</span><br><span class=\"line\">        runtime.mArgC = argc - i;</span><br><span class=\"line\">        runtime.mArgV = argv + i;</span><br><span class=\"line\">        runtime.start(<span class=\"string\">\"com.android.internal.os.RuntimeInit\"</span>,</span><br><span class=\"line\">                application ? <span class=\"string\">\"application\"</span> : <span class=\"string\">\"tool\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">\"Error: no class name or --zygote supplied.\\n\"</span>);</span><br><span class=\"line\">        app_usage();</span><br><span class=\"line\">        LOG_ALWAYS_FATAL(<span class=\"string\">\"app_process: no class name or --zygote supplied.\"</span>);</span><br><span class=\"line\">        return <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>其中runtime是AppRuntime类型，而AppRuntime继承至AndroidRuntime。我们继续跟踪 runtime.start函数：因在AppRuntime中没有对start的复写，我们到AppRuntime查看start的实现，路劲：android/framework/base/core/init<br>代码如下：注意runtime.start所传的参数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> AndroidRuntime::start(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* className, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* options)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(options, <span class=\"string\">\"start-system-server\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/* start the virtual machine */</span></span><br><span class=\"line\"> JNIEnv* env;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (startVm(&amp;mJavaVM, &amp;env) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">return;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> onVmCreated(env);</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">/*</span><br><span class=\"line\">     * Start VM.  This thread becomes the main thread of the VM, and will</span><br><span class=\"line\">     * not return until the VM exits.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>* slashClassName = toSlashClassName(className);</span><br><span class=\"line\">    jclass startClass = env-&gt;FindClass(slashClassName);     <span class=\"comment\">//com.android.internal.os.ZygoteInit</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (startClass == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, <span class=\"string\">\"main\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"([Ljava/lang/String;)V\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (startMeth == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            ALOGE(<span class=\"string\">\"JavaVM unable to find main() in '%s'\\n\"</span>, className);</span><br><span class=\"line\">            <span class=\"comment\">/* keep going */</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);</span><br><span class=\"line\">\t    ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>即先启动了虚拟机，然后利用JNI调用了zygoteInit。路劲：android/framework/base/core/java/com/android/internal/os在ZygoteInit的main中</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String argv[])</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (argv[<span class=\"number\">1</span>].equals(<span class=\"string\">\"start-system-server\"</span>)) &#123;</span><br><span class=\"line\">                startSystemServer();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!argv[<span class=\"number\">1</span>].equals(<span class=\"string\">\"\"</span>)) &#123;</span><br><span class=\"line\">                throw new RuntimeException(argv[<span class=\"number\">0</span>] + USAGE_STRING);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MethodAndArgsCaller caller) &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们继续跟踪startSystemServer() ， 在startSystemServer()中 ：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">private static boolean startSystemServer() throws </span><br><span class=\"line\">\tMethodAndArgsCaller, RuntimeException &#123;</span><br><span class=\"line\">        String args[] = &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            \"--runtime-init\",</span><br><span class=\"line\">            \"--nice-name=system_server\",</span><br><span class=\"line\">            \"com.android.server.SystemServer\",</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">       </span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            parsedArgs = new ZygoteConnection.Arguments(args);</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            pid = Zygote.forkSystemServer(</span><br><span class=\"line\">                    ...</span><br><span class=\"line\">                    parsedArgs.permittedCapabilities,</span><br><span class=\"line\">                    parsedArgs.effectiveCapabilities);</span><br><span class=\"line\">        &#125; catch (IllegalArgumentException ex) &#123;</span><br><span class=\"line\">            throw new RuntimeException(ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p> Zygote包装了Linux的fork。forkSystemServer()调用forkAndSpecialize()，最终穿过虚拟机调用android\\dalvik\\vm\\native\\dalvik_system_Zygote.c中Dalvik_dalvik_system_Zygote_forkAndSpecialize()。由dalvik完成fork新的进程。<br> main()最后会调用runSelectLoopMode()，进入while循环，由peers创建新的进程。</p>\n<p>我们跳转至com.android.server.SystemServer中,目录：android/framework/base/services/java/com/android/server </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    \t...</span><br><span class=\"line\">        init1(args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在其main()函数中调用了init1(args)这个native函数，利用JNI机制，跟踪至frameworks/base/services/jni/com_android_server_systemService.cpp，然后到<br>frameworks/base/cmds/system_server/library/system_init.cpp在system_init()函数中有如下代码：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(propBuf, <span class=\"string\">\"1\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Start the SurfaceFlinger</span></span><br><span class=\"line\">    SurfaceFlinger::instantiate();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">AndroidRuntime* runtime = AndroidRuntime::getRuntime();</span><br><span class=\"line\">...</span><br><span class=\"line\">LOGI(<span class=\"string\">\"System server: starting Android services./n\"</span>);</span><br><span class=\"line\">runtime-&gt;callStatic(<span class=\"string\">\"com/android/server/SystemServer\"</span>, <span class=\"string\">\"init2\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>  即完成了SurfaceFlinger的实例化，然后利用运行时的callStatic()函数调用了SystemServer的init2()函数.代码如下:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> final <span class=\"keyword\">void</span> <span class=\"title\">init2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       Slog.i(TAG, <span class=\"string\">\"Entered the Android system server!\"</span>);</span><br><span class=\"line\">       Thread thr = new ServerThread();</span><br><span class=\"line\">       thr.setName(<span class=\"string\">\"android.server.ServerThread\"</span>);</span><br><span class=\"line\">       thr.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个ServerThread线程中，就可以看到我们熟悉的Android服务了：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@<span class=\"function\">Override</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_SYSTEM_RUN,</span><br><span class=\"line\">        SystemClock.uptimeMillis());</span><br><span class=\"line\"></span><br><span class=\"line\">    Looper.prepareMainLooper();</span><br><span class=\"line\"></span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    ContentService contentService = null;</span><br><span class=\"line\">    LightsService lights = null;</span><br><span class=\"line\">    PowerManagerService power = null;</span><br><span class=\"line\">    DynamicPManagerService dpm = null;</span><br><span class=\"line\">    DisplayManagerService display = null;</span><br><span class=\"line\">    BatteryService battery = null;</span><br><span class=\"line\">    VibratorService vibrator = null;</span><br><span class=\"line\">    AlarmManagerService alarm = null;</span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">           </span><br><span class=\"line\">    .....</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Slog.i(TAG, <span class=\"string\">\"Status Bar\"</span>);</span><br><span class=\"line\">            statusBar = new StatusBarManagerService(context, wm);</span><br><span class=\"line\">            ServiceManager.addService(Context.STATUS_BAR_SERVICE, statusBar);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            reportWtf(<span class=\"string\">\"starting StatusBarManagerService\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Slog.i(TAG, <span class=\"string\">\"Clipboard Service\"</span>);</span><br><span class=\"line\">            ServiceManager.addService(Context.CLIPBOARD_SERVICE,</span><br><span class=\"line\">                    new ClipboardService(context));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            reportWtf(<span class=\"string\">\"starting Clipboard Service\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Slog.i(TAG, <span class=\"string\">\"NetworkManagement Service\"</span>);</span><br><span class=\"line\">            networkManagement = NetworkManagementService.create(context);</span><br><span class=\"line\">            ServiceManager.addService(Context.NETWORKMANAGEMENT_SERVICE, networkManagement);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            reportWtf(<span class=\"string\">\"starting NetworkManagement Service\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">    Looper.loop();</span><br><span class=\"line\">    Slog.d(TAG, <span class=\"string\">\"System ServerThread is exiting!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后，调用各服务的systemReady()函数通知系统就绪,至此，系统的启动过程结束.</p>\n","excerpt":"","more":"<blockquote>\n<p>准备工作：Android源码，UnderStand源码阅读工具</p>\n</blockquote>\n<p>我们知道Android系统在启动时首先会启动Linux系统，引导加载Linux Kernel并启动init进程。Init进程是一个由内核启动的用户级进程，是Android系统的第一个进程。该进程的相关代码在android/system/core/init/init.c。在main函数中，有如下代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">init_parse_config_file(<span class=\"string\">\"/init.rc\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> action_for_each_trigger(<span class=\"string\">\"early-init\"</span>, action_add_queue_tail);</span><br><span class=\"line\"></span><br><span class=\"line\"> ......</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/* execute all the boot actions to get us started */</span></span><br><span class=\"line\"> action_for_each_trigger(<span class=\"string\">\"init\"</span>, action_add_queue_tail);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/* skip mounting filesystems in charger mode */</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!is_charger) &#123;</span><br><span class=\"line\">     action_for_each_trigger(<span class=\"string\">\"early-fs\"</span>, action_add_queue_tail);</span><br><span class=\"line\">     action_for_each_trigger(<span class=\"string\">\"fs\"</span>, action_add_queue_tail);</span><br><span class=\"line\">     action_for_each_trigger(<span class=\"string\">\"post-fs\"</span>, action_add_queue_tail);</span><br><span class=\"line\">     action_for_each_trigger(<span class=\"string\">\"post-fs-data\"</span>, action_add_queue_tail);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> .......</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (is_charger) &#123;</span><br><span class=\"line\">     action_for_each_trigger(<span class=\"string\">\"charger\"</span>, action_add_queue_tail);</span><br><span class=\"line\"> &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     action_for_each_trigger(<span class=\"string\">\"early-boot\"</span>, action_add_queue_tail);</span><br><span class=\"line\">     action_for_each_trigger(<span class=\"string\">\"boot\"</span>, action_add_queue_tail);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>这里会加载init.rc并进行解析，init.rc文件定义了在init进程中需要启动哪些进程服务和执行哪些动作。其详细说明参见android/system/core/init/reademe.txt。init.rc见如下定义：</p>\n<p>……<br>service servicemanager /system/bin/servicemanager<br>    class core<br>    user system<br>    group system<br>    critical<br>    onrestart restart zygote<br>    onrestart restart media<br>    onrestart restart surfaceflinger<br>    onrestart restart drm</p>\n<p>service vold /system/bin/vold<br>    class core<br>    socket vold stream 0660 root mount<br>    ioprio be 2</p>\n<p>……..</p>\n<p>service zygote /system/bin/app_process -Xzygote /system/bin –zygote –start-system-server<br>    class main<br>    socket zygote stream 660 root system<br>    onrestart write /sys/android_power/request_state wake<br>    onrestart write /sys/power/state on<br>    onrestart restart media<br>    onrestart restart netd</p>\n<p>service drm /system/bin/drmserver<br>    class main<br>    user drm<br>    group drm system inet drmrpc sdcard_r</p>\n<p>service media /system/bin/mediaserver<br>    class main</p>\n<p>……….</p>\n<p>具体解析过程见android/system/core/init/Init_parser.c。解析所得服务添加到service_list中，动作添加到action_list中。主要代码流程如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (next_token(&amp;state)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> T_EOF:</span><br><span class=\"line\">            state.parse_line(&amp;state, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> parser_done;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> T_NEWLINE:</span><br><span class=\"line\">            state.line++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nargs) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> kw = lookup_keyword(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (kw_is(kw, SECTION)) &#123;</span><br><span class=\"line\">                    state.parse_line(&amp;state, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                    parse_new_section(&amp;state, kw, nargs, args);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    state.parse_line(&amp;state, nargs, args);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                nargs = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> T_TEXT:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nargs &lt; INIT_PARSER_MAXARGS) &#123;</span><br><span class=\"line\">                args[nargs++] = state.text;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">parser_done:</span><br><span class=\"line\">    list_for_each(node, &amp;import_list) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">struct</span> import *import = node_to_item(node, struct import, list);</span><br><span class=\"line\">         <span class=\"keyword\">int</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">         INFO(<span class=\"string\">\"importing '%s'\"</span>, import-&gt;filename);</span><br><span class=\"line\">         ret = init_parse_config_file(import-&gt;filename);</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (ret)</span><br><span class=\"line\">             ERROR(<span class=\"string\">\"could not import file '%s' from '%s'\\n\"</span>,</span><br><span class=\"line\">                   import-&gt;filename, fn);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来在main函数中执行动作和启动进程服务：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(; ;) &#123;</span><br><span class=\"line\">......</span><br><span class=\"line\">execute_one_command();</span><br><span class=\"line\">        restart_processes();</span><br><span class=\"line\">......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通常init过程需要创建一些系统文件夹并启动USB守护进程、Android Debug Bridge守护进程、Debug守护进程、ServiceManager进程、Zygote进程等。</p>\n<p>由init.rc对ServiceManager的描述service servicemanager /system/bin/servicemanager可知servicemanager进程从platform\\frameworks\\base\\cmd\\servicemanager\\Service_manager.cpp启动。在main函数中有如下代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> binder_state *bs;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *svcmgr = BINDER_SERVICE_MANAGER;</span><br><span class=\"line\"></span><br><span class=\"line\">    bs = binder_open(<span class=\"number\">128</span>*<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (binder_become_context_manager(bs)) &#123;</span><br><span class=\"line\">        ALOGE(<span class=\"string\">\"cannot become context manager (%s)\\n\"</span>, strerror(errno));</span><br><span class=\"line\">        return <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    svcmgr_handle = svcmgr;</span><br><span class=\"line\">    binder_loop(bs, svcmgr_handler);</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在android/framework/base/cmd/servicemanager/Binder.c中<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">binder_become_context_manager</span><span class=\"params\">(<span class=\"keyword\">struct</span> binder_state *bs)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    return ioctl(bs-&gt;fd, BINDER_SET_CONTEXT_MGR, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上首先调用binder_open()打开Binder设备(/dev/binder)，调用binder_become_context_manager()把当前进程设置为ServiceManager。ServiceManager本身就是一个服务。最后binder_loop()进入循环状态，并设置svcmgr_handler回调函数等待添加、查询、获取服务等请求。</p>\n<p>在启动servicemanager的同时，再来启动Zygote，由init.rc对zygote的描述service zygot /system/bin/app_process可知zygote进程从Android\\frameworks\\base\\cmds\\app_process\\App_main.cpp启动。这个文件的main（）方法，会调用Android_Runtime.cpp的文件中的start（）方法，这个方法通过JNI机制，来调用ZygoteInit.java孵化器初始文件，这个文件的Main（）函数，将会去调用所有进程。其主要代码如下:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; argc) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* arg = argv[i++];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!parentDir) &#123;</span><br><span class=\"line\">            parentDir = arg;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (strcmp(arg, <span class=\"string\">\"--zygote\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            zygote = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            niceName = <span class=\"string\">\"zygote\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (strcmp(arg, <span class=\"string\">\"--start-system-server\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            startSystemServer = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (strcmp(arg, <span class=\"string\">\"--application\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            application = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (strncmp(arg, <span class=\"string\">\"--nice-name=\"</span>, <span class=\"number\">12</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            niceName = arg + <span class=\"number\">12</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            className = arg;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">........</span><br><span class=\"line\"><span class=\"keyword\">if</span> (zygote) &#123;</span><br><span class=\"line\">        runtime.start(<span class=\"string\">\"com.android.internal.os.ZygoteInit\"</span>,</span><br><span class=\"line\">                startSystemServer ? <span class=\"string\">\"start-system-server\"</span> : <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (className) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Remainder of args get passed to startup class main()</span></span><br><span class=\"line\">        runtime.mClassName = className;</span><br><span class=\"line\">        runtime.mArgC = argc - i;</span><br><span class=\"line\">        runtime.mArgV = argv + i;</span><br><span class=\"line\">        runtime.start(<span class=\"string\">\"com.android.internal.os.RuntimeInit\"</span>,</span><br><span class=\"line\">                application ? <span class=\"string\">\"application\"</span> : <span class=\"string\">\"tool\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">\"Error: no class name or --zygote supplied.\\n\"</span>);</span><br><span class=\"line\">        app_usage();</span><br><span class=\"line\">        LOG_ALWAYS_FATAL(<span class=\"string\">\"app_process: no class name or --zygote supplied.\"</span>);</span><br><span class=\"line\">        return <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>其中runtime是AppRuntime类型，而AppRuntime继承至AndroidRuntime。我们继续跟踪 runtime.start函数：因在AppRuntime中没有对start的复写，我们到AppRuntime查看start的实现，路劲：android/framework/base/core/init<br>代码如下：注意runtime.start所传的参数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> AndroidRuntime::start(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* className, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* options)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(options, <span class=\"string\">\"start-system-server\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/* start the virtual machine */</span></span><br><span class=\"line\"> JNIEnv* env;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (startVm(&amp;mJavaVM, &amp;env) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">return;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> onVmCreated(env);</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">/*</span><br><span class=\"line\">     * Start VM.  This thread becomes the main thread of the VM, and will</span><br><span class=\"line\">     * not return until the VM exits.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>* slashClassName = toSlashClassName(className);</span><br><span class=\"line\">    jclass startClass = env-&gt;FindClass(slashClassName);     <span class=\"comment\">//com.android.internal.os.ZygoteInit</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (startClass == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, <span class=\"string\">\"main\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"([Ljava/lang/String;)V\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (startMeth == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            ALOGE(<span class=\"string\">\"JavaVM unable to find main() in '%s'\\n\"</span>, className);</span><br><span class=\"line\">            <span class=\"comment\">/* keep going */</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);</span><br><span class=\"line\">\t    ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>即先启动了虚拟机，然后利用JNI调用了zygoteInit。路劲：android/framework/base/core/java/com/android/internal/os在ZygoteInit的main中</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String argv[])</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (argv[<span class=\"number\">1</span>].equals(<span class=\"string\">\"start-system-server\"</span>)) &#123;</span><br><span class=\"line\">                startSystemServer();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!argv[<span class=\"number\">1</span>].equals(<span class=\"string\">\"\"</span>)) &#123;</span><br><span class=\"line\">                throw new RuntimeException(argv[<span class=\"number\">0</span>] + USAGE_STRING);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MethodAndArgsCaller caller) &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们继续跟踪startSystemServer() ， 在startSystemServer()中 ：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">private static boolean startSystemServer() throws </span><br><span class=\"line\">\tMethodAndArgsCaller, RuntimeException &#123;</span><br><span class=\"line\">        String args[] = &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            \"--runtime-init\",</span><br><span class=\"line\">            \"--nice-name=system_server\",</span><br><span class=\"line\">            \"com.android.server.SystemServer\",</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">       </span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            parsedArgs = new ZygoteConnection.Arguments(args);</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            pid = Zygote.forkSystemServer(</span><br><span class=\"line\">                    ...</span><br><span class=\"line\">                    parsedArgs.permittedCapabilities,</span><br><span class=\"line\">                    parsedArgs.effectiveCapabilities);</span><br><span class=\"line\">        &#125; catch (IllegalArgumentException ex) &#123;</span><br><span class=\"line\">            throw new RuntimeException(ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p> Zygote包装了Linux的fork。forkSystemServer()调用forkAndSpecialize()，最终穿过虚拟机调用android\\dalvik\\vm\\native\\dalvik_system_Zygote.c中Dalvik_dalvik_system_Zygote_forkAndSpecialize()。由dalvik完成fork新的进程。<br> main()最后会调用runSelectLoopMode()，进入while循环，由peers创建新的进程。</p>\n<p>我们跳转至com.android.server.SystemServer中,目录：android/framework/base/services/java/com/android/server </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    \t...</span><br><span class=\"line\">        init1(args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在其main()函数中调用了init1(args)这个native函数，利用JNI机制，跟踪至frameworks/base/services/jni/com_android_server_systemService.cpp，然后到<br>frameworks/base/cmds/system_server/library/system_init.cpp在system_init()函数中有如下代码：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(propBuf, <span class=\"string\">\"1\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Start the SurfaceFlinger</span></span><br><span class=\"line\">    SurfaceFlinger::instantiate();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">AndroidRuntime* runtime = AndroidRuntime::getRuntime();</span><br><span class=\"line\">...</span><br><span class=\"line\">LOGI(<span class=\"string\">\"System server: starting Android services./n\"</span>);</span><br><span class=\"line\">runtime-&gt;callStatic(<span class=\"string\">\"com/android/server/SystemServer\"</span>, <span class=\"string\">\"init2\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>  即完成了SurfaceFlinger的实例化，然后利用运行时的callStatic()函数调用了SystemServer的init2()函数.代码如下:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> final <span class=\"keyword\">void</span> <span class=\"title\">init2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       Slog.i(TAG, <span class=\"string\">\"Entered the Android system server!\"</span>);</span><br><span class=\"line\">       Thread thr = new ServerThread();</span><br><span class=\"line\">       thr.setName(<span class=\"string\">\"android.server.ServerThread\"</span>);</span><br><span class=\"line\">       thr.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个ServerThread线程中，就可以看到我们熟悉的Android服务了：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@<span class=\"function\">Override</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_SYSTEM_RUN,</span><br><span class=\"line\">        SystemClock.uptimeMillis());</span><br><span class=\"line\"></span><br><span class=\"line\">    Looper.prepareMainLooper();</span><br><span class=\"line\"></span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    ContentService contentService = null;</span><br><span class=\"line\">    LightsService lights = null;</span><br><span class=\"line\">    PowerManagerService power = null;</span><br><span class=\"line\">    DynamicPManagerService dpm = null;</span><br><span class=\"line\">    DisplayManagerService display = null;</span><br><span class=\"line\">    BatteryService battery = null;</span><br><span class=\"line\">    VibratorService vibrator = null;</span><br><span class=\"line\">    AlarmManagerService alarm = null;</span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">           </span><br><span class=\"line\">    .....</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Slog.i(TAG, <span class=\"string\">\"Status Bar\"</span>);</span><br><span class=\"line\">            statusBar = new StatusBarManagerService(context, wm);</span><br><span class=\"line\">            ServiceManager.addService(Context.STATUS_BAR_SERVICE, statusBar);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            reportWtf(<span class=\"string\">\"starting StatusBarManagerService\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Slog.i(TAG, <span class=\"string\">\"Clipboard Service\"</span>);</span><br><span class=\"line\">            ServiceManager.addService(Context.CLIPBOARD_SERVICE,</span><br><span class=\"line\">                    new ClipboardService(context));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            reportWtf(<span class=\"string\">\"starting Clipboard Service\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Slog.i(TAG, <span class=\"string\">\"NetworkManagement Service\"</span>);</span><br><span class=\"line\">            networkManagement = NetworkManagementService.create(context);</span><br><span class=\"line\">            ServiceManager.addService(Context.NETWORKMANAGEMENT_SERVICE, networkManagement);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            reportWtf(<span class=\"string\">\"starting NetworkManagement Service\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">    Looper.loop();</span><br><span class=\"line\">    Slog.d(TAG, <span class=\"string\">\"System ServerThread is exiting!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后，调用各服务的systemReady()函数通知系统就绪,至此，系统的启动过程结束.</p>\n"},{"title":"yii项目实践","toc":true,"comment":true,"date":"2012-11-18T07:49:18.000Z","description":"在mobileportal项目中使用Yii总结","_content":"\n\n### 分页  \n\n```php\n\n<?php  \n$criteria = new CDbCriteria();  \n$criteria->order = ' ctimedesc';         //按什么字段来排序  \n$count =NewsComments::model()->count($criteria);//count()函数计算数组中的单元数目或对象中的属性个数。  \n$pager = new CPagination($count);  \n$pager -> pageSize =5;                           //每页显示的行数  \n$pager->applyLimit($criteria);  \n$newsCommentList =NewsComments::model()->findAll($criteria);//查询所有的数据  \n  \n$this->render('view' , array(  \n    'pages'=>$pager,  \n    'list'=>$newsCommentList,  \n  ));  \n?>  \n//然后在view视图中：  \n<?php  \n $this->widget('CLinkPager',array(  \n  'header'=>'',  \n  'firstPageLabel'=>'首页',  \n  'lastPageLabel'=>'末页',  \n  'prevPageLabel'=>'上一页',  \n  'nextPageLabel'=>'下一页',  \n  'pages'=>$pages,  \n  'maxButtonCount'=>13,  \n ));  \n?>  \n```\n  \n### 在时间段中查找相应数据  \n```php \n\n<?php  \n//在Models的search()函数中添加  \n$criteria->compare('mtime','>='.$this->ctime,true);    \n$criteria->compare('mtime','<='.$this->mtime,true);  \n?>  \n//例如与第三方时间控件进行整合时，在_search视图中使用代码如下：  \n \n <?php echo $form->label($model,'ctime');?>  \n <?php  \n  $this->widget('application.extensions.timepicker.timepicker',array(  \n    'model'=>$model,  \n    'name'=>'ctime',  \n  ));  \n ?>  \n  \n <?php  \n  $this->widget('application.extensions.timepicker.timepicker',array(  \n    'model'=>$model,  \n    'name'=>'mtime',  \n  ));  \n ?>  \n  \n```\n  \n  \n### 对查询的数据进行排序并显示\n\n可以在Models的search()方法中添加如下代码:  \n\n```php\n\n<?php>  \nreturn new CActiveDataProvider(get_class($this), array(  \n  'pagination'=>array(  \n    'pageSize'=>20,//设置每页显示20条  \n  ),  \n  'sort'=>array(  \n    'defaultOrder'=>'comment_idDESC', //按指定的字段进行排序  \n  ),  \n  'criteria'=>$criteria,  \n));  \n?>  \n```\n  \n### 在视图中显示非数据库表中的数据\n\n//a.首先在视图中将对应的字段进行替换。如  \n```php\n\n<?php  \n//   'status',  \narray(  \n  'name'=>'status',  \n  'type'=>'raw',  \n  'value'=>array($this,'showStatus')  \n),  \n?>\n```\n  \n//b.然后在对应的控制器中写相应的方法。如  \n```php\n\n<?php  \npublic function showStatus($data, $row, $c)  \n{  \n switch ($data->status)  \n {  \n  case 'ready':  \n   return'准备';  \n  case 'locked':  \n   return '锁定';  \n  case 'open':  \n   return'打开';  \n  case 'removed':  \n   return'删除';  \n }  \n}  \n?>  \n```\n  \n### 修改admin视图下默认的CButtonColumn\n\n```php\n \n<?php  \narray(  \n 'class'=>'CButtonColumn',  \n 'template'=>'{comment} {view}{update} {delete}',  \n 'buttons'=>array(  \n  'comment' =>array(  \n   'label'=>'评论',  \n   'imageUrl'=>Yii::app()->request->baseUrl.'/images/icons/coins.png',  \n   'url'=>'Yii::app()->createUrl(\"newsComments/index\",array(\"news_id\"=>$data->news_id, ))',//始终使用$data来获取相关的数据。  \n  ),  \n ),  \n 'htmlOptions' => array(  \n   'style'=>'width:100px',  \n ),  \n),  \n?>  \n```\n  \n### ckfinder\n\n需要调用ckfinder直接弹出上传文件的相关目录，以便可以选择特定的图片，并将该图片的相关地址存入文本框中。一般在_from视图中进行数据的创建以及更新时可以用到。\n\n```javascript  \n\n<script type=\"text/javascript\"src=\"../pkjueying/ckfinder/ckfinder.js\"></script>  \n<script type=\"text/javascript\">  \nfunction BrowseServer(imgId)  \n{  \n var finder = new CKFinder() ;  \n finder.basePath = '../pkjueying/ckfinder/';//导入CKFinder的路径  \n finder.selectActionFunction = SetFileField;//设置文件被选中时的函数  \n finder.selectActionData = imgId; //接收地址的inputID  \n finder.popup() ;  \n}  \n\nfunction SetFileField(fileUrl,data)  \n{  \n document.getElementByIdx_x_x(data[\"selectActionData\"]).value= fileUrl ;  \n}  \n</script>  \n```\n  \n```html\n\n<div class=\"row\">  \n <?php echo$form->labelEx($model,'editor_avatar');?>  \n <?php echo$form->textField($model ,'editor_avatar' ,array('id'=>'editor_avatar', ));?>  \n <input type=\"button\" value=\" 浏 览 \"onclick=\"BrowseServer('editor_avatar');\" />  \n <?php echo$form->error($model,'editor_avatar');?>  \n</div>  \n```  \n\n### 使用第三方ckeditor+ckfinder控件\n\n// 示例代码如下：  \n```php\n\n<?php  \necho $form->labelEx($model,'summary');  \n$form->widget('application.extensions.editor.CKkceditor',array(  \n  \"model\" =>$model, // 数据模型  \n  \"attribute\" =>'summary', // 文本域中的字段，也就是之前文本域的名字  \n  \"height\" =>'200px', // 编辑器的高度  \n  \"width\" =>'80%',         //编辑器的宽度  \n  \"filespath\"=>SITE_PATH.\"www/data/upload\",  \n  \"filesurl\"=>Yii::app()->baseUrl.\"/data/upload\",  \n  )  \n);  \necho $form->error($model,'summary');  \n?>  \n```\n  \n### 由数据库表生成所需的代码\n```php\n\n<?php  \n'modules' =>   array(  \n 'gii'=>array(  \n  'class'=>'system.gii.GiiModule',  \n  'password'=>'pkjueying',  \n  // If removed, Gii defaults tolocalhost only. Edit carefully to taste.  \n  'ipFilters'=>array('10.10.16.43','10.10.16.18','10.10.16.47','::1'),  \n ),  \n),  \n?>  \n```\n  \n### 由Yii生成静态页面  \n```php\n\n<?php  \n//在action函数中修改函数的参数，添加第三个参数，设置为true.思路如下：  \n$out_file = $this->render($view,$data,true);  \nsave_to_html($path, $out_file);//此函数仅仅是示例，具体实现自己写。把$out_file存到指定目录，自己命名  \nunset($outFile);  \n?>  \n```\n  \n### yii的controller中外挂action  \n```php\n\n<?php  \nclass UpdateAction extends CAction {   \n  public function run() {   \n // place the action logichere   \n  }   \n}  \n  \nclass PostController extends CController{   \n  public function actions(){   \n return array('edit'=>'application.controllers.post.UpdateAction',);   \n  }   \n  ....  \n}   \n?>  \n```\n  \n### 如何使用theme  \n```php\n\n<?php  \n//在main.php 里面配置  \nreturn array(  \n  'theme'=>'basic',  \n  //......  \n);  \n//要使用theme里面的资源的话，比如说images, js, css, 应该这样，  \nYii::app()->theme->baseUrl.”/images/FileName.gif”  \nYii::app()->Theme->baseUrl.”/css/default/common.css”  \n  \n?>\n\n```\n  \n### 在当前页面注册css和js文件  \n\n```php \n\n<?php  \n $cs=Yii::app()->clientScript;  \n $cs->registerCssFile($cssFile);  \n $cs->registerScriptFile($jsFile);  \n?>  \n```\n  \n### 使用widget方式。 \n```php\n \n//a.显示详细信息  \n<?php  \n$this->widget('zii.widgets.CDetailView',array(   \n    'data'=> $model,   \n    'attributes'=> array(   \n       'id',   \n       'title',   \n       'content',   \n   ),   \n);  \n?>  \n\n//b.显示列表，可以进行条件限制和分页  \n<?php  \n//controller中  \n$dataProvider = new CActiveDataProvider('Post',array(   \n    'criteria'=> array(   \n           'condition' => 'project_id =:project_id',   \n           'params' => array(':project_id' =>$pid),   \n       ),   \n    'pagination'=> array(   \n       'pageSize' => '5',   \n   ),   \n));  \n//视图中  \n$this->widget('zii.widgets.CListView',array(   \n 'dataProvider' => $dataProvider,//数据源   \n 'itemView' => '_view',//渲染子视图，传给模板的值用$data接收。   \n ),   \n);   \n?>  \n  \n//c.显示列表，但是结果会在表格中显示  \n<?php  \n   $this->widget('zii.widgets.grid.CGridView',array(   \n       'dataProvider'=>$dataProvider,//数据源   \n       'columns'=>array(   \n           'title',         // display the 'title' attribute   \n           'category.name',  // display the 'name' attributeof the 'category' relation//显示与category相关的name   \n           'content:html',   // display the'content' attribute as purified HTML显示净化过的HTML格式   \n           array(           // display 'create_time' using anexpression   \n               'name'=>'create_time',   \n               'value'=>'date(\"M j, Y\",$data->create_time)',   \n           ),   \n           array(           // display 'author.username' using anexpression   \n               'name'=>'authorName',   \n               'value'=>'$data->author->username',   \n           ),   \n   array(   //display the 'status' attribute of controller's functionshowStatus($data, $row, $c)  \n    'name'=>'status',  \n    'type'=>'raw',  \n    'value'=>array($this,'showStatus')  \n   ),  \n           array(           // display a column with \"view\", \"update\" and \"delete\"buttons   \n               'class'=>'CButtonColumn',   \n           ),   \n       ),   \n       'filter'=>$model,//对用户的输入进行过滤   \n   ));   \n?>  \n```\n  \n  \n### urlManager的配置  \n\n//a.apache下：在config/main.php的components节点下增加：  \n```php\n\n<?php  \n 'urlManager'=>array(  \n  'urlFormat'=>'path',        \n  'rules'=>array(  \n   '<controller:\\w+>/<id:\\d+>'=>'<controller>/view',  \n   '<controller:\\w+>/<action:\\w+>/<id:\\d+>'=>'<controller>/<action>',  \n   '<controller:\\w+>/<action:\\w+>'=>'<controller>/<action>',  \n  ),  \n ),  \n?>  \n```\n\n//b.apache配置：  \n\n在app的根目录(项目目录，同入口index.php)创建.htaccess文件。内容如下：  \n\nOptions +FollowSymLinks  \nIndexIgnore */*  \nRewriteEngine on  \n\\# if a directory or a file exists, use it directly  \nRewriteCond %{REQUEST_FILENAME} !-f  \nRewriteCond %{REQUEST_FILENAME} !-d  \n\\# otherwise forward it to index.php  \nRewriteRule . index.php  \n  \n//c.nginx下的配置  \n//在config/main.php的components节点下增加：  \n```php\n\n<?php  \n 'urlManager'=>array(  \n  'urlFormat'=>'path',        \n  'rules'=>array(  \n   '<controller:\\w+>/<id:\\d+>'=>'<controller>/view',  \n   '<controller:\\w+>/<action:\\w+>/<id:\\d+>'=>'<controller>/<action>',  \n   '<controller:\\w+>/<action:\\w+>'=>'<controller>/<action>',  \n  ),  \n ),  \n?>  \n```\n//step2：  \n//在nginx.conf的server 段添加:  \nlocation / {   \n    if (!-e$request_filename){   \n       rewrite ^/(.*) /index.php last;   \n   }   \n}  \n","source":"_posts/Yii项目实践.md","raw":"---\ntitle: yii项目实践\ntoc: true\ncomment: true\ndate: 2012-11-18 15:49:18\ncategories: [old blog]\ntags: [Yii]\ndescription: 在mobileportal项目中使用Yii总结\n\n---\n\n\n### 分页  \n\n```php\n\n<?php  \n$criteria = new CDbCriteria();  \n$criteria->order = ' ctimedesc';         //按什么字段来排序  \n$count =NewsComments::model()->count($criteria);//count()函数计算数组中的单元数目或对象中的属性个数。  \n$pager = new CPagination($count);  \n$pager -> pageSize =5;                           //每页显示的行数  \n$pager->applyLimit($criteria);  \n$newsCommentList =NewsComments::model()->findAll($criteria);//查询所有的数据  \n  \n$this->render('view' , array(  \n    'pages'=>$pager,  \n    'list'=>$newsCommentList,  \n  ));  \n?>  \n//然后在view视图中：  \n<?php  \n $this->widget('CLinkPager',array(  \n  'header'=>'',  \n  'firstPageLabel'=>'首页',  \n  'lastPageLabel'=>'末页',  \n  'prevPageLabel'=>'上一页',  \n  'nextPageLabel'=>'下一页',  \n  'pages'=>$pages,  \n  'maxButtonCount'=>13,  \n ));  \n?>  \n```\n  \n### 在时间段中查找相应数据  \n```php \n\n<?php  \n//在Models的search()函数中添加  \n$criteria->compare('mtime','>='.$this->ctime,true);    \n$criteria->compare('mtime','<='.$this->mtime,true);  \n?>  \n//例如与第三方时间控件进行整合时，在_search视图中使用代码如下：  \n \n <?php echo $form->label($model,'ctime');?>  \n <?php  \n  $this->widget('application.extensions.timepicker.timepicker',array(  \n    'model'=>$model,  \n    'name'=>'ctime',  \n  ));  \n ?>  \n  \n <?php  \n  $this->widget('application.extensions.timepicker.timepicker',array(  \n    'model'=>$model,  \n    'name'=>'mtime',  \n  ));  \n ?>  \n  \n```\n  \n  \n### 对查询的数据进行排序并显示\n\n可以在Models的search()方法中添加如下代码:  \n\n```php\n\n<?php>  \nreturn new CActiveDataProvider(get_class($this), array(  \n  'pagination'=>array(  \n    'pageSize'=>20,//设置每页显示20条  \n  ),  \n  'sort'=>array(  \n    'defaultOrder'=>'comment_idDESC', //按指定的字段进行排序  \n  ),  \n  'criteria'=>$criteria,  \n));  \n?>  \n```\n  \n### 在视图中显示非数据库表中的数据\n\n//a.首先在视图中将对应的字段进行替换。如  \n```php\n\n<?php  \n//   'status',  \narray(  \n  'name'=>'status',  \n  'type'=>'raw',  \n  'value'=>array($this,'showStatus')  \n),  \n?>\n```\n  \n//b.然后在对应的控制器中写相应的方法。如  \n```php\n\n<?php  \npublic function showStatus($data, $row, $c)  \n{  \n switch ($data->status)  \n {  \n  case 'ready':  \n   return'准备';  \n  case 'locked':  \n   return '锁定';  \n  case 'open':  \n   return'打开';  \n  case 'removed':  \n   return'删除';  \n }  \n}  \n?>  \n```\n  \n### 修改admin视图下默认的CButtonColumn\n\n```php\n \n<?php  \narray(  \n 'class'=>'CButtonColumn',  \n 'template'=>'{comment} {view}{update} {delete}',  \n 'buttons'=>array(  \n  'comment' =>array(  \n   'label'=>'评论',  \n   'imageUrl'=>Yii::app()->request->baseUrl.'/images/icons/coins.png',  \n   'url'=>'Yii::app()->createUrl(\"newsComments/index\",array(\"news_id\"=>$data->news_id, ))',//始终使用$data来获取相关的数据。  \n  ),  \n ),  \n 'htmlOptions' => array(  \n   'style'=>'width:100px',  \n ),  \n),  \n?>  \n```\n  \n### ckfinder\n\n需要调用ckfinder直接弹出上传文件的相关目录，以便可以选择特定的图片，并将该图片的相关地址存入文本框中。一般在_from视图中进行数据的创建以及更新时可以用到。\n\n```javascript  \n\n<script type=\"text/javascript\"src=\"../pkjueying/ckfinder/ckfinder.js\"></script>  \n<script type=\"text/javascript\">  \nfunction BrowseServer(imgId)  \n{  \n var finder = new CKFinder() ;  \n finder.basePath = '../pkjueying/ckfinder/';//导入CKFinder的路径  \n finder.selectActionFunction = SetFileField;//设置文件被选中时的函数  \n finder.selectActionData = imgId; //接收地址的inputID  \n finder.popup() ;  \n}  \n\nfunction SetFileField(fileUrl,data)  \n{  \n document.getElementByIdx_x_x(data[\"selectActionData\"]).value= fileUrl ;  \n}  \n</script>  \n```\n  \n```html\n\n<div class=\"row\">  \n <?php echo$form->labelEx($model,'editor_avatar');?>  \n <?php echo$form->textField($model ,'editor_avatar' ,array('id'=>'editor_avatar', ));?>  \n <input type=\"button\" value=\" 浏 览 \"onclick=\"BrowseServer('editor_avatar');\" />  \n <?php echo$form->error($model,'editor_avatar');?>  \n</div>  \n```  \n\n### 使用第三方ckeditor+ckfinder控件\n\n// 示例代码如下：  \n```php\n\n<?php  \necho $form->labelEx($model,'summary');  \n$form->widget('application.extensions.editor.CKkceditor',array(  \n  \"model\" =>$model, // 数据模型  \n  \"attribute\" =>'summary', // 文本域中的字段，也就是之前文本域的名字  \n  \"height\" =>'200px', // 编辑器的高度  \n  \"width\" =>'80%',         //编辑器的宽度  \n  \"filespath\"=>SITE_PATH.\"www/data/upload\",  \n  \"filesurl\"=>Yii::app()->baseUrl.\"/data/upload\",  \n  )  \n);  \necho $form->error($model,'summary');  \n?>  \n```\n  \n### 由数据库表生成所需的代码\n```php\n\n<?php  \n'modules' =>   array(  \n 'gii'=>array(  \n  'class'=>'system.gii.GiiModule',  \n  'password'=>'pkjueying',  \n  // If removed, Gii defaults tolocalhost only. Edit carefully to taste.  \n  'ipFilters'=>array('10.10.16.43','10.10.16.18','10.10.16.47','::1'),  \n ),  \n),  \n?>  \n```\n  \n### 由Yii生成静态页面  \n```php\n\n<?php  \n//在action函数中修改函数的参数，添加第三个参数，设置为true.思路如下：  \n$out_file = $this->render($view,$data,true);  \nsave_to_html($path, $out_file);//此函数仅仅是示例，具体实现自己写。把$out_file存到指定目录，自己命名  \nunset($outFile);  \n?>  \n```\n  \n### yii的controller中外挂action  \n```php\n\n<?php  \nclass UpdateAction extends CAction {   \n  public function run() {   \n // place the action logichere   \n  }   \n}  \n  \nclass PostController extends CController{   \n  public function actions(){   \n return array('edit'=>'application.controllers.post.UpdateAction',);   \n  }   \n  ....  \n}   \n?>  \n```\n  \n### 如何使用theme  \n```php\n\n<?php  \n//在main.php 里面配置  \nreturn array(  \n  'theme'=>'basic',  \n  //......  \n);  \n//要使用theme里面的资源的话，比如说images, js, css, 应该这样，  \nYii::app()->theme->baseUrl.”/images/FileName.gif”  \nYii::app()->Theme->baseUrl.”/css/default/common.css”  \n  \n?>\n\n```\n  \n### 在当前页面注册css和js文件  \n\n```php \n\n<?php  \n $cs=Yii::app()->clientScript;  \n $cs->registerCssFile($cssFile);  \n $cs->registerScriptFile($jsFile);  \n?>  \n```\n  \n### 使用widget方式。 \n```php\n \n//a.显示详细信息  \n<?php  \n$this->widget('zii.widgets.CDetailView',array(   \n    'data'=> $model,   \n    'attributes'=> array(   \n       'id',   \n       'title',   \n       'content',   \n   ),   \n);  \n?>  \n\n//b.显示列表，可以进行条件限制和分页  \n<?php  \n//controller中  \n$dataProvider = new CActiveDataProvider('Post',array(   \n    'criteria'=> array(   \n           'condition' => 'project_id =:project_id',   \n           'params' => array(':project_id' =>$pid),   \n       ),   \n    'pagination'=> array(   \n       'pageSize' => '5',   \n   ),   \n));  \n//视图中  \n$this->widget('zii.widgets.CListView',array(   \n 'dataProvider' => $dataProvider,//数据源   \n 'itemView' => '_view',//渲染子视图，传给模板的值用$data接收。   \n ),   \n);   \n?>  \n  \n//c.显示列表，但是结果会在表格中显示  \n<?php  \n   $this->widget('zii.widgets.grid.CGridView',array(   \n       'dataProvider'=>$dataProvider,//数据源   \n       'columns'=>array(   \n           'title',         // display the 'title' attribute   \n           'category.name',  // display the 'name' attributeof the 'category' relation//显示与category相关的name   \n           'content:html',   // display the'content' attribute as purified HTML显示净化过的HTML格式   \n           array(           // display 'create_time' using anexpression   \n               'name'=>'create_time',   \n               'value'=>'date(\"M j, Y\",$data->create_time)',   \n           ),   \n           array(           // display 'author.username' using anexpression   \n               'name'=>'authorName',   \n               'value'=>'$data->author->username',   \n           ),   \n   array(   //display the 'status' attribute of controller's functionshowStatus($data, $row, $c)  \n    'name'=>'status',  \n    'type'=>'raw',  \n    'value'=>array($this,'showStatus')  \n   ),  \n           array(           // display a column with \"view\", \"update\" and \"delete\"buttons   \n               'class'=>'CButtonColumn',   \n           ),   \n       ),   \n       'filter'=>$model,//对用户的输入进行过滤   \n   ));   \n?>  \n```\n  \n  \n### urlManager的配置  \n\n//a.apache下：在config/main.php的components节点下增加：  \n```php\n\n<?php  \n 'urlManager'=>array(  \n  'urlFormat'=>'path',        \n  'rules'=>array(  \n   '<controller:\\w+>/<id:\\d+>'=>'<controller>/view',  \n   '<controller:\\w+>/<action:\\w+>/<id:\\d+>'=>'<controller>/<action>',  \n   '<controller:\\w+>/<action:\\w+>'=>'<controller>/<action>',  \n  ),  \n ),  \n?>  \n```\n\n//b.apache配置：  \n\n在app的根目录(项目目录，同入口index.php)创建.htaccess文件。内容如下：  \n\nOptions +FollowSymLinks  \nIndexIgnore */*  \nRewriteEngine on  \n\\# if a directory or a file exists, use it directly  \nRewriteCond %{REQUEST_FILENAME} !-f  \nRewriteCond %{REQUEST_FILENAME} !-d  \n\\# otherwise forward it to index.php  \nRewriteRule . index.php  \n  \n//c.nginx下的配置  \n//在config/main.php的components节点下增加：  \n```php\n\n<?php  \n 'urlManager'=>array(  \n  'urlFormat'=>'path',        \n  'rules'=>array(  \n   '<controller:\\w+>/<id:\\d+>'=>'<controller>/view',  \n   '<controller:\\w+>/<action:\\w+>/<id:\\d+>'=>'<controller>/<action>',  \n   '<controller:\\w+>/<action:\\w+>'=>'<controller>/<action>',  \n  ),  \n ),  \n?>  \n```\n//step2：  \n//在nginx.conf的server 段添加:  \nlocation / {   \n    if (!-e$request_filename){   \n       rewrite ^/(.*) /index.php last;   \n   }   \n}  \n","slug":"Yii项目实践","published":1,"updated":"2016-05-18T12:11:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioctzhe40004vzfyz8lyyy5p","content":"<h3 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\">$criteria = <span class=\"keyword\">new</span> CDbCriteria();  </span><br><span class=\"line\">$criteria-&gt;order = <span class=\"string\">' ctimedesc'</span>;         <span class=\"comment\">//按什么字段来排序  </span></span><br><span class=\"line\">$count =NewsComments::model()-&gt;count($criteria);<span class=\"comment\">//count()函数计算数组中的单元数目或对象中的属性个数。  </span></span><br><span class=\"line\">$pager = <span class=\"keyword\">new</span> CPagination($count);  </span><br><span class=\"line\">$pager -&gt; pageSize =<span class=\"number\">5</span>;                           <span class=\"comment\">//每页显示的行数  </span></span><br><span class=\"line\">$pager-&gt;applyLimit($criteria);  </span><br><span class=\"line\">$newsCommentList =NewsComments::model()-&gt;findAll($criteria);<span class=\"comment\">//查询所有的数据  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">$this-&gt;render(<span class=\"string\">'view'</span> , <span class=\"keyword\">array</span>(  </span><br><span class=\"line\">    <span class=\"string\">'pages'</span>=&gt;$pager,  </span><br><span class=\"line\">    <span class=\"string\">'list'</span>=&gt;$newsCommentList,  </span><br><span class=\"line\">  ));  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span>  </span><br><span class=\"line\"><span class=\"comment\">//然后在view视图中：  </span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"> $this-&gt;widget(<span class=\"string\">'CLinkPager'</span>,<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">'header'</span>=&gt;<span class=\"string\">''</span>,  </span><br><span class=\"line\">  <span class=\"string\">'firstPageLabel'</span>=&gt;<span class=\"string\">'首页'</span>,  </span><br><span class=\"line\">  <span class=\"string\">'lastPageLabel'</span>=&gt;<span class=\"string\">'末页'</span>,  </span><br><span class=\"line\">  <span class=\"string\">'prevPageLabel'</span>=&gt;<span class=\"string\">'上一页'</span>,  </span><br><span class=\"line\">  <span class=\"string\">'nextPageLabel'</span>=&gt;<span class=\"string\">'下一页'</span>,  </span><br><span class=\"line\">  <span class=\"string\">'pages'</span>=&gt;$pages,  </span><br><span class=\"line\">  <span class=\"string\">'maxButtonCount'</span>=&gt;<span class=\"number\">13</span>,  </span><br><span class=\"line\"> ));  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"在时间段中查找相应数据\"><a href=\"#在时间段中查找相应数据\" class=\"headerlink\" title=\"在时间段中查找相应数据\"></a>在时间段中查找相应数据</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"comment\">//在Models的search()函数中添加  </span></span><br><span class=\"line\">$criteria-&gt;compare(<span class=\"string\">'mtime'</span>,<span class=\"string\">'&gt;='</span>.$this-&gt;ctime,<span class=\"keyword\">true</span>);    </span><br><span class=\"line\">$criteria-&gt;compare(<span class=\"string\">'mtime'</span>,<span class=\"string\">'&lt;='</span>.$this-&gt;mtime,<span class=\"keyword\">true</span>);  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span>  </span><br><span class=\"line\"><span class=\"comment\">//例如与第三方时间控件进行整合时，在_search视图中使用代码如下：  </span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">&lt;?php</span> <span class=\"keyword\">echo</span> $form-&gt;label($model,<span class=\"string\">'ctime'</span>);<span class=\"meta\">?&gt;</span>  </span><br><span class=\"line\"> <span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\">  $this-&gt;widget(<span class=\"string\">'application.extensions.timepicker.timepicker'</span>,<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">    <span class=\"string\">'model'</span>=&gt;$model,  </span><br><span class=\"line\">    <span class=\"string\">'name'</span>=&gt;<span class=\"string\">'ctime'</span>,  </span><br><span class=\"line\">  ));  </span><br><span class=\"line\"> <span class=\"meta\">?&gt;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"> <span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\">  $this-&gt;widget(<span class=\"string\">'application.extensions.timepicker.timepicker'</span>,<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">    <span class=\"string\">'model'</span>=&gt;$model,  </span><br><span class=\"line\">    <span class=\"string\">'name'</span>=&gt;<span class=\"string\">'mtime'</span>,  </span><br><span class=\"line\">  ));  </span><br><span class=\"line\"> <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对查询的数据进行排序并显示\"><a href=\"#对查询的数据进行排序并显示\" class=\"headerlink\" title=\"对查询的数据进行排序并显示\"></a>对查询的数据进行排序并显示</h3><p>可以在Models的search()方法中添加如下代码:  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>&gt;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CActiveDataProvider(get_class($this), <span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">'pagination'</span>=&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">    <span class=\"string\">'pageSize'</span>=&gt;<span class=\"number\">20</span>,<span class=\"comment\">//设置每页显示20条  </span></span><br><span class=\"line\">  ),  </span><br><span class=\"line\">  <span class=\"string\">'sort'</span>=&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">    <span class=\"string\">'defaultOrder'</span>=&gt;<span class=\"string\">'comment_idDESC'</span>, <span class=\"comment\">//按指定的字段进行排序  </span></span><br><span class=\"line\">  ),  </span><br><span class=\"line\">  <span class=\"string\">'criteria'</span>=&gt;$criteria,  </span><br><span class=\"line\">));  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"在视图中显示非数据库表中的数据\"><a href=\"#在视图中显示非数据库表中的数据\" class=\"headerlink\" title=\"在视图中显示非数据库表中的数据\"></a>在视图中显示非数据库表中的数据</h3><p>//a.首先在视图中将对应的字段进行替换。如<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"comment\">//   'status',  </span></span><br><span class=\"line\"><span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">'name'</span>=&gt;<span class=\"string\">'status'</span>,  </span><br><span class=\"line\">  <span class=\"string\">'type'</span>=&gt;<span class=\"string\">'raw'</span>,  </span><br><span class=\"line\">  <span class=\"string\">'value'</span>=&gt;<span class=\"keyword\">array</span>($this,<span class=\"string\">'showStatus'</span>)  </span><br><span class=\"line\">),  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>//b.然后在对应的控制器中写相应的方法。如<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showStatus</span><span class=\"params\">($data, $row, $c)</span>  </span><br><span class=\"line\"></span>&#123;  </span><br><span class=\"line\"> <span class=\"keyword\">switch</span> ($data-&gt;status)  </span><br><span class=\"line\"> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'ready'</span>:  </span><br><span class=\"line\">   <span class=\"keyword\">return</span><span class=\"string\">'准备'</span>;  </span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'locked'</span>:  </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">'锁定'</span>;  </span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'open'</span>:  </span><br><span class=\"line\">   <span class=\"keyword\">return</span><span class=\"string\">'打开'</span>;  </span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'removed'</span>:  </span><br><span class=\"line\">   <span class=\"keyword\">return</span><span class=\"string\">'删除'</span>;  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改admin视图下默认的CButtonColumn\"><a href=\"#修改admin视图下默认的CButtonColumn\" class=\"headerlink\" title=\"修改admin视图下默认的CButtonColumn\"></a>修改admin视图下默认的CButtonColumn</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"keyword\">array</span>(  </span><br><span class=\"line\"> <span class=\"string\">'class'</span>=&gt;<span class=\"string\">'CButtonColumn'</span>,  </span><br><span class=\"line\"> <span class=\"string\">'template'</span>=&gt;<span class=\"string\">'&#123;comment&#125; &#123;view&#125;&#123;update&#125; &#123;delete&#125;'</span>,  </span><br><span class=\"line\"> <span class=\"string\">'buttons'</span>=&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">'comment'</span> =&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">   <span class=\"string\">'label'</span>=&gt;<span class=\"string\">'评论'</span>,  </span><br><span class=\"line\">   <span class=\"string\">'imageUrl'</span>=&gt;Yii::app()-&gt;request-&gt;baseUrl.<span class=\"string\">'/images/icons/coins.png'</span>,  </span><br><span class=\"line\">   <span class=\"string\">'url'</span>=&gt;<span class=\"string\">'Yii::app()-&gt;createUrl(\"newsComments/index\",array(\"news_id\"=&gt;$data-&gt;news_id, ))'</span>,<span class=\"comment\">//始终使用$data来获取相关的数据。  </span></span><br><span class=\"line\">  ),  </span><br><span class=\"line\"> ),  </span><br><span class=\"line\"> <span class=\"string\">'htmlOptions'</span> =&gt; <span class=\"keyword\">array</span>(  </span><br><span class=\"line\">   <span class=\"string\">'style'</span>=&gt;<span class=\"string\">'width:100px'</span>,  </span><br><span class=\"line\"> ),  </span><br><span class=\"line\">),  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ckfinder\"><a href=\"#ckfinder\" class=\"headerlink\" title=\"ckfinder\"></a>ckfinder</h3><p>需要调用ckfinder直接弹出上传文件的相关目录，以便可以选择特定的图片，并将该图片的相关地址存入文本框中。一般在_from视图中进行数据的创建以及更新时可以用到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>src=<span class=\"string\">\"../pkjueying/ckfinder/ckfinder.js\"</span>&gt;&lt;/script&gt;  </span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BrowseServer</span>(<span class=\"params\">imgId</span>)  </span><br><span class=\"line\"></span>&#123;  </span><br><span class=\"line\"> <span class=\"keyword\">var</span> finder = <span class=\"keyword\">new</span> CKFinder() ;  </span><br><span class=\"line\"> finder.basePath = <span class=\"string\">'../pkjueying/ckfinder/'</span>;<span class=\"comment\">//导入CKFinder的路径  </span></span><br><span class=\"line\"> finder.selectActionFunction = SetFileField;<span class=\"comment\">//设置文件被选中时的函数  </span></span><br><span class=\"line\"> finder.selectActionData = imgId; <span class=\"comment\">//接收地址的inputID  </span></span><br><span class=\"line\"> finder.popup() ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SetFileField</span>(<span class=\"params\">fileUrl,data</span>)  </span><br><span class=\"line\"></span>&#123;  </span><br><span class=\"line\"> <span class=\"built_in\">document</span>.getElementByIdx_x_x(data[<span class=\"string\">\"selectActionData\"</span>]).value= fileUrl ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span>  </span><br><span class=\"line\"> <span class=\"php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">echo</span>$form-&gt;labelEx($model,<span class=\"string\">'editor_avatar'</span>);<span class=\"meta\">?&gt;</span></span>  </span><br><span class=\"line\"> <span class=\"php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">echo</span>$form-&gt;textField($model ,<span class=\"string\">'editor_avatar'</span> ,<span class=\"keyword\">array</span>(<span class=\"string\">'id'</span>=&gt;<span class=\"string\">'editor_avatar'</span>, ));<span class=\"meta\">?&gt;</span></span>  </span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\" 浏 览 \"</span><span class=\"attr\">onclick</span>=<span class=\"string\">\"BrowseServer('editor_avatar');\"</span> /&gt;</span>  </span><br><span class=\"line\"> <span class=\"php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">echo</span>$form-&gt;error($model,<span class=\"string\">'editor_avatar'</span>);<span class=\"meta\">?&gt;</span></span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">### 使用第三方ckeditor+ckfinder控件</span><br><span class=\"line\"></span><br><span class=\"line\">// 示例代码如下：  </span><br><span class=\"line\">```php</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"keyword\">echo</span> $form-&gt;labelEx($model,<span class=\"string\">'summary'</span>);  </span><br><span class=\"line\">$form-&gt;widget(<span class=\"string\">'application.extensions.editor.CKkceditor'</span>,<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">\"model\"</span> =&gt;$model, <span class=\"comment\">// 数据模型  </span></span><br><span class=\"line\">  <span class=\"string\">\"attribute\"</span> =&gt;<span class=\"string\">'summary'</span>, <span class=\"comment\">// 文本域中的字段，也就是之前文本域的名字  </span></span><br><span class=\"line\">  <span class=\"string\">\"height\"</span> =&gt;<span class=\"string\">'200px'</span>, <span class=\"comment\">// 编辑器的高度  </span></span><br><span class=\"line\">  <span class=\"string\">\"width\"</span> =&gt;<span class=\"string\">'80%'</span>,         <span class=\"comment\">//编辑器的宽度  </span></span><br><span class=\"line\">  <span class=\"string\">\"filespath\"</span>=&gt;SITE_PATH.<span class=\"string\">\"www/data/upload\"</span>,  </span><br><span class=\"line\">  <span class=\"string\">\"filesurl\"</span>=&gt;Yii::app()-&gt;baseUrl.<span class=\"string\">\"/data/upload\"</span>,  </span><br><span class=\"line\">  )  </span><br><span class=\"line\">);  </span><br><span class=\"line\"><span class=\"keyword\">echo</span> $form-&gt;error($model,<span class=\"string\">'summary'</span>);  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"由数据库表生成所需的代码\"><a href=\"#由数据库表生成所需的代码\" class=\"headerlink\" title=\"由数据库表生成所需的代码\"></a>由数据库表生成所需的代码</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"string\">'modules'</span> =&gt;   <span class=\"keyword\">array</span>(  </span><br><span class=\"line\"> <span class=\"string\">'gii'</span>=&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">'class'</span>=&gt;<span class=\"string\">'system.gii.GiiModule'</span>,  </span><br><span class=\"line\">  <span class=\"string\">'password'</span>=&gt;<span class=\"string\">'pkjueying'</span>,  </span><br><span class=\"line\">  <span class=\"comment\">// If removed, Gii defaults tolocalhost only. Edit carefully to taste.  </span></span><br><span class=\"line\">  <span class=\"string\">'ipFilters'</span>=&gt;<span class=\"keyword\">array</span>(<span class=\"string\">'10.10.16.43'</span>,<span class=\"string\">'10.10.16.18'</span>,<span class=\"string\">'10.10.16.47'</span>,<span class=\"string\">'::1'</span>),  </span><br><span class=\"line\"> ),  </span><br><span class=\"line\">),  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"由Yii生成静态页面\"><a href=\"#由Yii生成静态页面\" class=\"headerlink\" title=\"由Yii生成静态页面\"></a>由Yii生成静态页面</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"comment\">//在action函数中修改函数的参数，添加第三个参数，设置为true.思路如下：  </span></span><br><span class=\"line\">$out_file = $this-&gt;render($view,$data,<span class=\"keyword\">true</span>);  </span><br><span class=\"line\">save_to_html($path, $out_file);<span class=\"comment\">//此函数仅仅是示例，具体实现自己写。把$out_file存到指定目录，自己命名  </span></span><br><span class=\"line\"><span class=\"keyword\">unset</span>($outFile);  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"yii的controller中外挂action\"><a href=\"#yii的controller中外挂action\" class=\"headerlink\" title=\"yii的controller中外挂action\"></a>yii的controller中外挂action</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UpdateAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">CAction</span> </span>&#123;   </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;   </span><br><span class=\"line\"> <span class=\"comment\">// place the action logichere   </span></span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostController</span> <span class=\"keyword\">extends</span> <span class=\"title\">CController</span></span>&#123;   </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">actions</span><span class=\"params\">()</span></span>&#123;   </span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(<span class=\"string\">'edit'</span>=&gt;<span class=\"string\">'application.controllers.post.UpdateAction'</span>,);   </span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">  ....  </span><br><span class=\"line\">&#125;   </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"如何使用theme\"><a href=\"#如何使用theme\" class=\"headerlink\" title=\"如何使用theme\"></a>如何使用theme</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"comment\">//在main.php 里面配置  </span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">'theme'</span>=&gt;<span class=\"string\">'basic'</span>,  </span><br><span class=\"line\">  <span class=\"comment\">//......  </span></span><br><span class=\"line\">);  </span><br><span class=\"line\"><span class=\"comment\">//要使用theme里面的资源的话，比如说images, js, css, 应该这样，  </span></span><br><span class=\"line\">Yii::app()-&gt;theme-&gt;baseUrl.”/images/FileName.gif”  </span><br><span class=\"line\">Yii::app()-&gt;Theme-&gt;baseUrl.”/css/<span class=\"keyword\">default</span>/common.css”  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"在当前页面注册css和js文件\"><a href=\"#在当前页面注册css和js文件\" class=\"headerlink\" title=\"在当前页面注册css和js文件\"></a>在当前页面注册css和js文件</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"> $cs=Yii::app()-&gt;clientScript;  </span><br><span class=\"line\"> $cs-&gt;registerCssFile($cssFile);  </span><br><span class=\"line\"> $cs-&gt;registerScriptFile($jsFile);  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用widget方式。\"><a href=\"#使用widget方式。\" class=\"headerlink\" title=\"使用widget方式。\"></a>使用widget方式。</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//a.显示详细信息  </span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\">$this-&gt;widget(<span class=\"string\">'zii.widgets.CDetailView'</span>,<span class=\"keyword\">array</span>(   </span><br><span class=\"line\">    <span class=\"string\">'data'</span>=&gt; $model,   </span><br><span class=\"line\">    <span class=\"string\">'attributes'</span>=&gt; <span class=\"keyword\">array</span>(   </span><br><span class=\"line\">       <span class=\"string\">'id'</span>,   </span><br><span class=\"line\">       <span class=\"string\">'title'</span>,   </span><br><span class=\"line\">       <span class=\"string\">'content'</span>,   </span><br><span class=\"line\">   ),   </span><br><span class=\"line\">);  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b.显示列表，可以进行条件限制和分页  </span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"comment\">//controller中  </span></span><br><span class=\"line\">$dataProvider = <span class=\"keyword\">new</span> CActiveDataProvider(<span class=\"string\">'Post'</span>,<span class=\"keyword\">array</span>(   </span><br><span class=\"line\">    <span class=\"string\">'criteria'</span>=&gt; <span class=\"keyword\">array</span>(   </span><br><span class=\"line\">           <span class=\"string\">'condition'</span> =&gt; <span class=\"string\">'project_id =:project_id'</span>,   </span><br><span class=\"line\">           <span class=\"string\">'params'</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">':project_id'</span> =&gt;$pid),   </span><br><span class=\"line\">       ),   </span><br><span class=\"line\">    <span class=\"string\">'pagination'</span>=&gt; <span class=\"keyword\">array</span>(   </span><br><span class=\"line\">       <span class=\"string\">'pageSize'</span> =&gt; <span class=\"string\">'5'</span>,   </span><br><span class=\"line\">   ),   </span><br><span class=\"line\">));  </span><br><span class=\"line\"><span class=\"comment\">//视图中  </span></span><br><span class=\"line\">$this-&gt;widget(<span class=\"string\">'zii.widgets.CListView'</span>,<span class=\"keyword\">array</span>(   </span><br><span class=\"line\"> <span class=\"string\">'dataProvider'</span> =&gt; $dataProvider,<span class=\"comment\">//数据源   </span></span><br><span class=\"line\"> <span class=\"string\">'itemView'</span> =&gt; <span class=\"string\">'_view'</span>,<span class=\"comment\">//渲染子视图，传给模板的值用$data接收。   </span></span><br><span class=\"line\"> ),   </span><br><span class=\"line\">);   </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//c.显示列表，但是结果会在表格中显示  </span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\">   $this-&gt;widget(<span class=\"string\">'zii.widgets.grid.CGridView'</span>,<span class=\"keyword\">array</span>(   </span><br><span class=\"line\">       <span class=\"string\">'dataProvider'</span>=&gt;$dataProvider,<span class=\"comment\">//数据源   </span></span><br><span class=\"line\">       <span class=\"string\">'columns'</span>=&gt;<span class=\"keyword\">array</span>(   </span><br><span class=\"line\">           <span class=\"string\">'title'</span>,         <span class=\"comment\">// display the 'title' attribute   </span></span><br><span class=\"line\">           <span class=\"string\">'category.name'</span>,  <span class=\"comment\">// display the 'name' attributeof the 'category' relation//显示与category相关的name   </span></span><br><span class=\"line\">           <span class=\"string\">'content:html'</span>,   <span class=\"comment\">// display the'content' attribute as purified HTML显示净化过的HTML格式   </span></span><br><span class=\"line\">           <span class=\"keyword\">array</span>(           <span class=\"comment\">// display 'create_time' using anexpression   </span></span><br><span class=\"line\">               <span class=\"string\">'name'</span>=&gt;<span class=\"string\">'create_time'</span>,   </span><br><span class=\"line\">               <span class=\"string\">'value'</span>=&gt;<span class=\"string\">'date(\"M j, Y\",$data-&gt;create_time)'</span>,   </span><br><span class=\"line\">           ),   </span><br><span class=\"line\">           <span class=\"keyword\">array</span>(           <span class=\"comment\">// display 'author.username' using anexpression   </span></span><br><span class=\"line\">               <span class=\"string\">'name'</span>=&gt;<span class=\"string\">'authorName'</span>,   </span><br><span class=\"line\">               <span class=\"string\">'value'</span>=&gt;<span class=\"string\">'$data-&gt;author-&gt;username'</span>,   </span><br><span class=\"line\">           ),   </span><br><span class=\"line\">   <span class=\"keyword\">array</span>(   <span class=\"comment\">//display the 'status' attribute of controller's functionshowStatus($data, $row, $c)  </span></span><br><span class=\"line\">    <span class=\"string\">'name'</span>=&gt;<span class=\"string\">'status'</span>,  </span><br><span class=\"line\">    <span class=\"string\">'type'</span>=&gt;<span class=\"string\">'raw'</span>,  </span><br><span class=\"line\">    <span class=\"string\">'value'</span>=&gt;<span class=\"keyword\">array</span>($this,<span class=\"string\">'showStatus'</span>)  </span><br><span class=\"line\">   ),  </span><br><span class=\"line\">           <span class=\"keyword\">array</span>(           <span class=\"comment\">// display a column with \"view\", \"update\" and \"delete\"buttons   </span></span><br><span class=\"line\">               <span class=\"string\">'class'</span>=&gt;<span class=\"string\">'CButtonColumn'</span>,   </span><br><span class=\"line\">           ),   </span><br><span class=\"line\">       ),   </span><br><span class=\"line\">       <span class=\"string\">'filter'</span>=&gt;$model,<span class=\"comment\">//对用户的输入进行过滤   </span></span><br><span class=\"line\">   ));   </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"urlManager的配置\"><a href=\"#urlManager的配置\" class=\"headerlink\" title=\"urlManager的配置\"></a>urlManager的配置</h3><p>//a.apache下：在config/main.php的components节点下增加：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"> <span class=\"string\">'urlManager'</span>=&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">'urlFormat'</span>=&gt;<span class=\"string\">'path'</span>,        </span><br><span class=\"line\">  <span class=\"string\">'rules'</span>=&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">   <span class=\"string\">'&lt;controller:\\w+&gt;/&lt;id:\\d+&gt;'</span>=&gt;<span class=\"string\">'&lt;controller&gt;/view'</span>,  </span><br><span class=\"line\">   <span class=\"string\">'&lt;controller:\\w+&gt;/&lt;action:\\w+&gt;/&lt;id:\\d+&gt;'</span>=&gt;<span class=\"string\">'&lt;controller&gt;/&lt;action&gt;'</span>,  </span><br><span class=\"line\">   <span class=\"string\">'&lt;controller:\\w+&gt;/&lt;action:\\w+&gt;'</span>=&gt;<span class=\"string\">'&lt;controller&gt;/&lt;action&gt;'</span>,  </span><br><span class=\"line\">  ),  </span><br><span class=\"line\"> ),  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>//b.apache配置：  </p>\n<p>在app的根目录(项目目录，同入口index.php)创建.htaccess文件。内容如下：  </p>\n<p>Options +FollowSymLinks<br>IndexIgnore <em>/</em><br>RewriteEngine on<br># if a directory or a file exists, use it directly<br>RewriteCond %{REQUEST_FILENAME} !-f<br>RewriteCond %{REQUEST_FILENAME} !-d<br># otherwise forward it to index.php<br>RewriteRule . index.php  </p>\n<p>//c.nginx下的配置<br>//在config/main.php的components节点下增加：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"> <span class=\"string\">'urlManager'</span>=&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">'urlFormat'</span>=&gt;<span class=\"string\">'path'</span>,        </span><br><span class=\"line\">  <span class=\"string\">'rules'</span>=&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">   <span class=\"string\">'&lt;controller:\\w+&gt;/&lt;id:\\d+&gt;'</span>=&gt;<span class=\"string\">'&lt;controller&gt;/view'</span>,  </span><br><span class=\"line\">   <span class=\"string\">'&lt;controller:\\w+&gt;/&lt;action:\\w+&gt;/&lt;id:\\d+&gt;'</span>=&gt;<span class=\"string\">'&lt;controller&gt;/&lt;action&gt;'</span>,  </span><br><span class=\"line\">   <span class=\"string\">'&lt;controller:\\w+&gt;/&lt;action:\\w+&gt;'</span>=&gt;<span class=\"string\">'&lt;controller&gt;/&lt;action&gt;'</span>,  </span><br><span class=\"line\">  ),  </span><br><span class=\"line\"> ),  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>//step2：<br>//在nginx.conf的server 段添加:<br>location / {<br>    if (!-e$request_filename){<br>       rewrite ^/(.*) /index.php last;<br>   }<br>}  </p>\n","excerpt":"","more":"<h3 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\">$criteria = <span class=\"keyword\">new</span> CDbCriteria();  </span><br><span class=\"line\">$criteria-&gt;order = <span class=\"string\">' ctimedesc'</span>;         <span class=\"comment\">//按什么字段来排序  </span></span><br><span class=\"line\">$count =NewsComments::model()-&gt;count($criteria);<span class=\"comment\">//count()函数计算数组中的单元数目或对象中的属性个数。  </span></span><br><span class=\"line\">$pager = <span class=\"keyword\">new</span> CPagination($count);  </span><br><span class=\"line\">$pager -&gt; pageSize =<span class=\"number\">5</span>;                           <span class=\"comment\">//每页显示的行数  </span></span><br><span class=\"line\">$pager-&gt;applyLimit($criteria);  </span><br><span class=\"line\">$newsCommentList =NewsComments::model()-&gt;findAll($criteria);<span class=\"comment\">//查询所有的数据  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">$this-&gt;render(<span class=\"string\">'view'</span> , <span class=\"keyword\">array</span>(  </span><br><span class=\"line\">    <span class=\"string\">'pages'</span>=&gt;$pager,  </span><br><span class=\"line\">    <span class=\"string\">'list'</span>=&gt;$newsCommentList,  </span><br><span class=\"line\">  ));  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span>  </span><br><span class=\"line\"><span class=\"comment\">//然后在view视图中：  </span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"> $this-&gt;widget(<span class=\"string\">'CLinkPager'</span>,<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">'header'</span>=&gt;<span class=\"string\">''</span>,  </span><br><span class=\"line\">  <span class=\"string\">'firstPageLabel'</span>=&gt;<span class=\"string\">'首页'</span>,  </span><br><span class=\"line\">  <span class=\"string\">'lastPageLabel'</span>=&gt;<span class=\"string\">'末页'</span>,  </span><br><span class=\"line\">  <span class=\"string\">'prevPageLabel'</span>=&gt;<span class=\"string\">'上一页'</span>,  </span><br><span class=\"line\">  <span class=\"string\">'nextPageLabel'</span>=&gt;<span class=\"string\">'下一页'</span>,  </span><br><span class=\"line\">  <span class=\"string\">'pages'</span>=&gt;$pages,  </span><br><span class=\"line\">  <span class=\"string\">'maxButtonCount'</span>=&gt;<span class=\"number\">13</span>,  </span><br><span class=\"line\"> ));  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"在时间段中查找相应数据\"><a href=\"#在时间段中查找相应数据\" class=\"headerlink\" title=\"在时间段中查找相应数据\"></a>在时间段中查找相应数据</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"comment\">//在Models的search()函数中添加  </span></span><br><span class=\"line\">$criteria-&gt;compare(<span class=\"string\">'mtime'</span>,<span class=\"string\">'&gt;='</span>.$this-&gt;ctime,<span class=\"keyword\">true</span>);    </span><br><span class=\"line\">$criteria-&gt;compare(<span class=\"string\">'mtime'</span>,<span class=\"string\">'&lt;='</span>.$this-&gt;mtime,<span class=\"keyword\">true</span>);  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span>  </span><br><span class=\"line\"><span class=\"comment\">//例如与第三方时间控件进行整合时，在_search视图中使用代码如下：  </span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">&lt;?php</span> <span class=\"keyword\">echo</span> $form-&gt;label($model,<span class=\"string\">'ctime'</span>);<span class=\"meta\">?&gt;</span>  </span><br><span class=\"line\"> <span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\">  $this-&gt;widget(<span class=\"string\">'application.extensions.timepicker.timepicker'</span>,<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">    <span class=\"string\">'model'</span>=&gt;$model,  </span><br><span class=\"line\">    <span class=\"string\">'name'</span>=&gt;<span class=\"string\">'ctime'</span>,  </span><br><span class=\"line\">  ));  </span><br><span class=\"line\"> <span class=\"meta\">?&gt;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"> <span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\">  $this-&gt;widget(<span class=\"string\">'application.extensions.timepicker.timepicker'</span>,<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">    <span class=\"string\">'model'</span>=&gt;$model,  </span><br><span class=\"line\">    <span class=\"string\">'name'</span>=&gt;<span class=\"string\">'mtime'</span>,  </span><br><span class=\"line\">  ));  </span><br><span class=\"line\"> <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对查询的数据进行排序并显示\"><a href=\"#对查询的数据进行排序并显示\" class=\"headerlink\" title=\"对查询的数据进行排序并显示\"></a>对查询的数据进行排序并显示</h3><p>可以在Models的search()方法中添加如下代码:  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>&gt;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CActiveDataProvider(get_class($this), <span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">'pagination'</span>=&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">    <span class=\"string\">'pageSize'</span>=&gt;<span class=\"number\">20</span>,<span class=\"comment\">//设置每页显示20条  </span></span><br><span class=\"line\">  ),  </span><br><span class=\"line\">  <span class=\"string\">'sort'</span>=&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">    <span class=\"string\">'defaultOrder'</span>=&gt;<span class=\"string\">'comment_idDESC'</span>, <span class=\"comment\">//按指定的字段进行排序  </span></span><br><span class=\"line\">  ),  </span><br><span class=\"line\">  <span class=\"string\">'criteria'</span>=&gt;$criteria,  </span><br><span class=\"line\">));  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"在视图中显示非数据库表中的数据\"><a href=\"#在视图中显示非数据库表中的数据\" class=\"headerlink\" title=\"在视图中显示非数据库表中的数据\"></a>在视图中显示非数据库表中的数据</h3><p>//a.首先在视图中将对应的字段进行替换。如<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"comment\">//   'status',  </span></span><br><span class=\"line\"><span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">'name'</span>=&gt;<span class=\"string\">'status'</span>,  </span><br><span class=\"line\">  <span class=\"string\">'type'</span>=&gt;<span class=\"string\">'raw'</span>,  </span><br><span class=\"line\">  <span class=\"string\">'value'</span>=&gt;<span class=\"keyword\">array</span>($this,<span class=\"string\">'showStatus'</span>)  </span><br><span class=\"line\">),  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>//b.然后在对应的控制器中写相应的方法。如<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showStatus</span><span class=\"params\">($data, $row, $c)</span>  </span><br><span class=\"line\"></span>&#123;  </span><br><span class=\"line\"> <span class=\"keyword\">switch</span> ($data-&gt;status)  </span><br><span class=\"line\"> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'ready'</span>:  </span><br><span class=\"line\">   <span class=\"keyword\">return</span><span class=\"string\">'准备'</span>;  </span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'locked'</span>:  </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">'锁定'</span>;  </span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'open'</span>:  </span><br><span class=\"line\">   <span class=\"keyword\">return</span><span class=\"string\">'打开'</span>;  </span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'removed'</span>:  </span><br><span class=\"line\">   <span class=\"keyword\">return</span><span class=\"string\">'删除'</span>;  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改admin视图下默认的CButtonColumn\"><a href=\"#修改admin视图下默认的CButtonColumn\" class=\"headerlink\" title=\"修改admin视图下默认的CButtonColumn\"></a>修改admin视图下默认的CButtonColumn</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"keyword\">array</span>(  </span><br><span class=\"line\"> <span class=\"string\">'class'</span>=&gt;<span class=\"string\">'CButtonColumn'</span>,  </span><br><span class=\"line\"> <span class=\"string\">'template'</span>=&gt;<span class=\"string\">'&#123;comment&#125; &#123;view&#125;&#123;update&#125; &#123;delete&#125;'</span>,  </span><br><span class=\"line\"> <span class=\"string\">'buttons'</span>=&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">'comment'</span> =&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">   <span class=\"string\">'label'</span>=&gt;<span class=\"string\">'评论'</span>,  </span><br><span class=\"line\">   <span class=\"string\">'imageUrl'</span>=&gt;Yii::app()-&gt;request-&gt;baseUrl.<span class=\"string\">'/images/icons/coins.png'</span>,  </span><br><span class=\"line\">   <span class=\"string\">'url'</span>=&gt;<span class=\"string\">'Yii::app()-&gt;createUrl(\"newsComments/index\",array(\"news_id\"=&gt;$data-&gt;news_id, ))'</span>,<span class=\"comment\">//始终使用$data来获取相关的数据。  </span></span><br><span class=\"line\">  ),  </span><br><span class=\"line\"> ),  </span><br><span class=\"line\"> <span class=\"string\">'htmlOptions'</span> =&gt; <span class=\"keyword\">array</span>(  </span><br><span class=\"line\">   <span class=\"string\">'style'</span>=&gt;<span class=\"string\">'width:100px'</span>,  </span><br><span class=\"line\"> ),  </span><br><span class=\"line\">),  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ckfinder\"><a href=\"#ckfinder\" class=\"headerlink\" title=\"ckfinder\"></a>ckfinder</h3><p>需要调用ckfinder直接弹出上传文件的相关目录，以便可以选择特定的图片，并将该图片的相关地址存入文本框中。一般在_from视图中进行数据的创建以及更新时可以用到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>src=<span class=\"string\">\"../pkjueying/ckfinder/ckfinder.js\"</span>&gt;&lt;/script&gt;  </span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BrowseServer</span>(<span class=\"params\">imgId</span>)  </span><br><span class=\"line\"></span>&#123;  </span><br><span class=\"line\"> <span class=\"keyword\">var</span> finder = <span class=\"keyword\">new</span> CKFinder() ;  </span><br><span class=\"line\"> finder.basePath = <span class=\"string\">'../pkjueying/ckfinder/'</span>;<span class=\"comment\">//导入CKFinder的路径  </span></span><br><span class=\"line\"> finder.selectActionFunction = SetFileField;<span class=\"comment\">//设置文件被选中时的函数  </span></span><br><span class=\"line\"> finder.selectActionData = imgId; <span class=\"comment\">//接收地址的inputID  </span></span><br><span class=\"line\"> finder.popup() ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SetFileField</span>(<span class=\"params\">fileUrl,data</span>)  </span><br><span class=\"line\"></span>&#123;  </span><br><span class=\"line\"> <span class=\"built_in\">document</span>.getElementByIdx_x_x(data[<span class=\"string\">\"selectActionData\"</span>]).value= fileUrl ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span>  </span><br><span class=\"line\"> <span class=\"php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">echo</span>$form-&gt;labelEx($model,<span class=\"string\">'editor_avatar'</span>);<span class=\"meta\">?&gt;</span></span>  </span><br><span class=\"line\"> <span class=\"php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">echo</span>$form-&gt;textField($model ,<span class=\"string\">'editor_avatar'</span> ,<span class=\"keyword\">array</span>(<span class=\"string\">'id'</span>=&gt;<span class=\"string\">'editor_avatar'</span>, ));<span class=\"meta\">?&gt;</span></span>  </span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\" 浏 览 \"</span><span class=\"attr\">onclick</span>=<span class=\"string\">\"BrowseServer('editor_avatar');\"</span> /&gt;</span>  </span><br><span class=\"line\"> <span class=\"php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">echo</span>$form-&gt;error($model,<span class=\"string\">'editor_avatar'</span>);<span class=\"meta\">?&gt;</span></span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">### 使用第三方ckeditor+ckfinder控件</span><br><span class=\"line\"></span><br><span class=\"line\">// 示例代码如下：  </span><br><span class=\"line\">```php</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"keyword\">echo</span> $form-&gt;labelEx($model,<span class=\"string\">'summary'</span>);  </span><br><span class=\"line\">$form-&gt;widget(<span class=\"string\">'application.extensions.editor.CKkceditor'</span>,<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">\"model\"</span> =&gt;$model, <span class=\"comment\">// 数据模型  </span></span><br><span class=\"line\">  <span class=\"string\">\"attribute\"</span> =&gt;<span class=\"string\">'summary'</span>, <span class=\"comment\">// 文本域中的字段，也就是之前文本域的名字  </span></span><br><span class=\"line\">  <span class=\"string\">\"height\"</span> =&gt;<span class=\"string\">'200px'</span>, <span class=\"comment\">// 编辑器的高度  </span></span><br><span class=\"line\">  <span class=\"string\">\"width\"</span> =&gt;<span class=\"string\">'80%'</span>,         <span class=\"comment\">//编辑器的宽度  </span></span><br><span class=\"line\">  <span class=\"string\">\"filespath\"</span>=&gt;SITE_PATH.<span class=\"string\">\"www/data/upload\"</span>,  </span><br><span class=\"line\">  <span class=\"string\">\"filesurl\"</span>=&gt;Yii::app()-&gt;baseUrl.<span class=\"string\">\"/data/upload\"</span>,  </span><br><span class=\"line\">  )  </span><br><span class=\"line\">);  </span><br><span class=\"line\"><span class=\"keyword\">echo</span> $form-&gt;error($model,<span class=\"string\">'summary'</span>);  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"由数据库表生成所需的代码\"><a href=\"#由数据库表生成所需的代码\" class=\"headerlink\" title=\"由数据库表生成所需的代码\"></a>由数据库表生成所需的代码</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"string\">'modules'</span> =&gt;   <span class=\"keyword\">array</span>(  </span><br><span class=\"line\"> <span class=\"string\">'gii'</span>=&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">'class'</span>=&gt;<span class=\"string\">'system.gii.GiiModule'</span>,  </span><br><span class=\"line\">  <span class=\"string\">'password'</span>=&gt;<span class=\"string\">'pkjueying'</span>,  </span><br><span class=\"line\">  <span class=\"comment\">// If removed, Gii defaults tolocalhost only. Edit carefully to taste.  </span></span><br><span class=\"line\">  <span class=\"string\">'ipFilters'</span>=&gt;<span class=\"keyword\">array</span>(<span class=\"string\">'10.10.16.43'</span>,<span class=\"string\">'10.10.16.18'</span>,<span class=\"string\">'10.10.16.47'</span>,<span class=\"string\">'::1'</span>),  </span><br><span class=\"line\"> ),  </span><br><span class=\"line\">),  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"由Yii生成静态页面\"><a href=\"#由Yii生成静态页面\" class=\"headerlink\" title=\"由Yii生成静态页面\"></a>由Yii生成静态页面</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"comment\">//在action函数中修改函数的参数，添加第三个参数，设置为true.思路如下：  </span></span><br><span class=\"line\">$out_file = $this-&gt;render($view,$data,<span class=\"keyword\">true</span>);  </span><br><span class=\"line\">save_to_html($path, $out_file);<span class=\"comment\">//此函数仅仅是示例，具体实现自己写。把$out_file存到指定目录，自己命名  </span></span><br><span class=\"line\"><span class=\"keyword\">unset</span>($outFile);  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"yii的controller中外挂action\"><a href=\"#yii的controller中外挂action\" class=\"headerlink\" title=\"yii的controller中外挂action\"></a>yii的controller中外挂action</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UpdateAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">CAction</span> </span>&#123;   </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;   </span><br><span class=\"line\"> <span class=\"comment\">// place the action logichere   </span></span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostController</span> <span class=\"keyword\">extends</span> <span class=\"title\">CController</span></span>&#123;   </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">actions</span><span class=\"params\">()</span></span>&#123;   </span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(<span class=\"string\">'edit'</span>=&gt;<span class=\"string\">'application.controllers.post.UpdateAction'</span>,);   </span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">  ....  </span><br><span class=\"line\">&#125;   </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"如何使用theme\"><a href=\"#如何使用theme\" class=\"headerlink\" title=\"如何使用theme\"></a>如何使用theme</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"comment\">//在main.php 里面配置  </span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">'theme'</span>=&gt;<span class=\"string\">'basic'</span>,  </span><br><span class=\"line\">  <span class=\"comment\">//......  </span></span><br><span class=\"line\">);  </span><br><span class=\"line\"><span class=\"comment\">//要使用theme里面的资源的话，比如说images, js, css, 应该这样，  </span></span><br><span class=\"line\">Yii::app()-&gt;theme-&gt;baseUrl.”/images/FileName.gif”  </span><br><span class=\"line\">Yii::app()-&gt;Theme-&gt;baseUrl.”/css/<span class=\"keyword\">default</span>/common.css”  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"在当前页面注册css和js文件\"><a href=\"#在当前页面注册css和js文件\" class=\"headerlink\" title=\"在当前页面注册css和js文件\"></a>在当前页面注册css和js文件</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"> $cs=Yii::app()-&gt;clientScript;  </span><br><span class=\"line\"> $cs-&gt;registerCssFile($cssFile);  </span><br><span class=\"line\"> $cs-&gt;registerScriptFile($jsFile);  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用widget方式。\"><a href=\"#使用widget方式。\" class=\"headerlink\" title=\"使用widget方式。\"></a>使用widget方式。</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//a.显示详细信息  </span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\">$this-&gt;widget(<span class=\"string\">'zii.widgets.CDetailView'</span>,<span class=\"keyword\">array</span>(   </span><br><span class=\"line\">    <span class=\"string\">'data'</span>=&gt; $model,   </span><br><span class=\"line\">    <span class=\"string\">'attributes'</span>=&gt; <span class=\"keyword\">array</span>(   </span><br><span class=\"line\">       <span class=\"string\">'id'</span>,   </span><br><span class=\"line\">       <span class=\"string\">'title'</span>,   </span><br><span class=\"line\">       <span class=\"string\">'content'</span>,   </span><br><span class=\"line\">   ),   </span><br><span class=\"line\">);  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b.显示列表，可以进行条件限制和分页  </span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"comment\">//controller中  </span></span><br><span class=\"line\">$dataProvider = <span class=\"keyword\">new</span> CActiveDataProvider(<span class=\"string\">'Post'</span>,<span class=\"keyword\">array</span>(   </span><br><span class=\"line\">    <span class=\"string\">'criteria'</span>=&gt; <span class=\"keyword\">array</span>(   </span><br><span class=\"line\">           <span class=\"string\">'condition'</span> =&gt; <span class=\"string\">'project_id =:project_id'</span>,   </span><br><span class=\"line\">           <span class=\"string\">'params'</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">':project_id'</span> =&gt;$pid),   </span><br><span class=\"line\">       ),   </span><br><span class=\"line\">    <span class=\"string\">'pagination'</span>=&gt; <span class=\"keyword\">array</span>(   </span><br><span class=\"line\">       <span class=\"string\">'pageSize'</span> =&gt; <span class=\"string\">'5'</span>,   </span><br><span class=\"line\">   ),   </span><br><span class=\"line\">));  </span><br><span class=\"line\"><span class=\"comment\">//视图中  </span></span><br><span class=\"line\">$this-&gt;widget(<span class=\"string\">'zii.widgets.CListView'</span>,<span class=\"keyword\">array</span>(   </span><br><span class=\"line\"> <span class=\"string\">'dataProvider'</span> =&gt; $dataProvider,<span class=\"comment\">//数据源   </span></span><br><span class=\"line\"> <span class=\"string\">'itemView'</span> =&gt; <span class=\"string\">'_view'</span>,<span class=\"comment\">//渲染子视图，传给模板的值用$data接收。   </span></span><br><span class=\"line\"> ),   </span><br><span class=\"line\">);   </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//c.显示列表，但是结果会在表格中显示  </span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\">   $this-&gt;widget(<span class=\"string\">'zii.widgets.grid.CGridView'</span>,<span class=\"keyword\">array</span>(   </span><br><span class=\"line\">       <span class=\"string\">'dataProvider'</span>=&gt;$dataProvider,<span class=\"comment\">//数据源   </span></span><br><span class=\"line\">       <span class=\"string\">'columns'</span>=&gt;<span class=\"keyword\">array</span>(   </span><br><span class=\"line\">           <span class=\"string\">'title'</span>,         <span class=\"comment\">// display the 'title' attribute   </span></span><br><span class=\"line\">           <span class=\"string\">'category.name'</span>,  <span class=\"comment\">// display the 'name' attributeof the 'category' relation//显示与category相关的name   </span></span><br><span class=\"line\">           <span class=\"string\">'content:html'</span>,   <span class=\"comment\">// display the'content' attribute as purified HTML显示净化过的HTML格式   </span></span><br><span class=\"line\">           <span class=\"keyword\">array</span>(           <span class=\"comment\">// display 'create_time' using anexpression   </span></span><br><span class=\"line\">               <span class=\"string\">'name'</span>=&gt;<span class=\"string\">'create_time'</span>,   </span><br><span class=\"line\">               <span class=\"string\">'value'</span>=&gt;<span class=\"string\">'date(\"M j, Y\",$data-&gt;create_time)'</span>,   </span><br><span class=\"line\">           ),   </span><br><span class=\"line\">           <span class=\"keyword\">array</span>(           <span class=\"comment\">// display 'author.username' using anexpression   </span></span><br><span class=\"line\">               <span class=\"string\">'name'</span>=&gt;<span class=\"string\">'authorName'</span>,   </span><br><span class=\"line\">               <span class=\"string\">'value'</span>=&gt;<span class=\"string\">'$data-&gt;author-&gt;username'</span>,   </span><br><span class=\"line\">           ),   </span><br><span class=\"line\">   <span class=\"keyword\">array</span>(   <span class=\"comment\">//display the 'status' attribute of controller's functionshowStatus($data, $row, $c)  </span></span><br><span class=\"line\">    <span class=\"string\">'name'</span>=&gt;<span class=\"string\">'status'</span>,  </span><br><span class=\"line\">    <span class=\"string\">'type'</span>=&gt;<span class=\"string\">'raw'</span>,  </span><br><span class=\"line\">    <span class=\"string\">'value'</span>=&gt;<span class=\"keyword\">array</span>($this,<span class=\"string\">'showStatus'</span>)  </span><br><span class=\"line\">   ),  </span><br><span class=\"line\">           <span class=\"keyword\">array</span>(           <span class=\"comment\">// display a column with \"view\", \"update\" and \"delete\"buttons   </span></span><br><span class=\"line\">               <span class=\"string\">'class'</span>=&gt;<span class=\"string\">'CButtonColumn'</span>,   </span><br><span class=\"line\">           ),   </span><br><span class=\"line\">       ),   </span><br><span class=\"line\">       <span class=\"string\">'filter'</span>=&gt;$model,<span class=\"comment\">//对用户的输入进行过滤   </span></span><br><span class=\"line\">   ));   </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"urlManager的配置\"><a href=\"#urlManager的配置\" class=\"headerlink\" title=\"urlManager的配置\"></a>urlManager的配置</h3><p>//a.apache下：在config/main.php的components节点下增加：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"> <span class=\"string\">'urlManager'</span>=&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">'urlFormat'</span>=&gt;<span class=\"string\">'path'</span>,        </span><br><span class=\"line\">  <span class=\"string\">'rules'</span>=&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">   <span class=\"string\">'&lt;controller:\\w+&gt;/&lt;id:\\d+&gt;'</span>=&gt;<span class=\"string\">'&lt;controller&gt;/view'</span>,  </span><br><span class=\"line\">   <span class=\"string\">'&lt;controller:\\w+&gt;/&lt;action:\\w+&gt;/&lt;id:\\d+&gt;'</span>=&gt;<span class=\"string\">'&lt;controller&gt;/&lt;action&gt;'</span>,  </span><br><span class=\"line\">   <span class=\"string\">'&lt;controller:\\w+&gt;/&lt;action:\\w+&gt;'</span>=&gt;<span class=\"string\">'&lt;controller&gt;/&lt;action&gt;'</span>,  </span><br><span class=\"line\">  ),  </span><br><span class=\"line\"> ),  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>//b.apache配置：  </p>\n<p>在app的根目录(项目目录，同入口index.php)创建.htaccess文件。内容如下：  </p>\n<p>Options +FollowSymLinks<br>IndexIgnore <em>/</em><br>RewriteEngine on<br># if a directory or a file exists, use it directly<br>RewriteCond %{REQUEST_FILENAME} !-f<br>RewriteCond %{REQUEST_FILENAME} !-d<br># otherwise forward it to index.php<br>RewriteRule . index.php  </p>\n<p>//c.nginx下的配置<br>//在config/main.php的components节点下增加：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"> <span class=\"string\">'urlManager'</span>=&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">  <span class=\"string\">'urlFormat'</span>=&gt;<span class=\"string\">'path'</span>,        </span><br><span class=\"line\">  <span class=\"string\">'rules'</span>=&gt;<span class=\"keyword\">array</span>(  </span><br><span class=\"line\">   <span class=\"string\">'&lt;controller:\\w+&gt;/&lt;id:\\d+&gt;'</span>=&gt;<span class=\"string\">'&lt;controller&gt;/view'</span>,  </span><br><span class=\"line\">   <span class=\"string\">'&lt;controller:\\w+&gt;/&lt;action:\\w+&gt;/&lt;id:\\d+&gt;'</span>=&gt;<span class=\"string\">'&lt;controller&gt;/&lt;action&gt;'</span>,  </span><br><span class=\"line\">   <span class=\"string\">'&lt;controller:\\w+&gt;/&lt;action:\\w+&gt;'</span>=&gt;<span class=\"string\">'&lt;controller&gt;/&lt;action&gt;'</span>,  </span><br><span class=\"line\">  ),  </span><br><span class=\"line\"> ),  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>//step2：<br>//在nginx.conf的server 段添加:<br>location / {<br>    if (!-e$request_filename){<br>       rewrite ^/(.*) /index.php last;<br>   }<br>}  </p>\n"},{"title":"binder简要学习","date":"2016-03-17T05:36:49.000Z","comment":true,"toc":true,"description":"理解Binder对于理解整个Android系统有着非常重要的作用，Android系统的四大组件，AMS，PMS等系统服务无一不与Binder挂钩","_content":"\n# Binder \n\n### 本文目标\n\n理解Binder对于理解整个Android系统有着非常重要的作用，Android系统的四大组件，AMS，PMS等系统服务无一不与Binder挂钩；如果对Binder不甚了解，那么就很难了解这些系统机制.\n\n要真正的弄明白 Binder机制 还是比较麻烦的，我们今天只是大致的介绍一下在应用层怎么使用\n\n本文目标:\n\n* 不依赖AIDL工具，手写远程Service完成跨进程通信\n\n* 弄明白AIDL生成的相关代码\n\n* 以及基于AIDL代码的分析，了解系统相关服务的代码逻辑.\n\n\n### Linux相关概念\n\n因为是讲进程间的通信，而android又是基于linux，所以对于linux系统需要一定的了解.\n推荐 [linux内核设计与实现](https://book.douban.com/subject/1503819/) 其主要是讲一些系统概念\n\n\n* 操作系统的不同进程之间，数据不共享；对于每个进程来说，都以为自己独享了整个系统，完全不知道其他进程的存在；因此一个进程需要与另外一个进程通信，需要某种 **系统机制** 才能完成。\n\n* 用户程序只可以访问某些许可的资源，不许可的资源是拒绝被访问的，于是认为的就把Kernel和上层的应用程序抽像的隔离开，分别称之为 **内核空间(Kernel Space)** 和 **用户空间(User Space)** .\n\n* 用户空间访问内核空间的唯一方式就是 **系统调用** ；通过这个统一入口，所有的资源访问都是在内核的控制下执行，以免导致用户程序对系统资源的越权访问，从而保障了系统的安全和稳定.\n\n* 当一个任务（进程）执行系统调用而陷入内核代码中执行时，我们就称进程处于 **内核运行态** 此时处理器处于特权级最高的内核代码中执行。当进程在执行用户自己的代码时，则称其处于 **用户运行态**（用户态）。处理器在特权等级高的时候才能执行那些特权CPU指令。\n\n* 通过系统调用，用户空间可以访问内核空间. 如果一个用户空间想与另外一个用户空间进行通信，一般是需要操作系统内核添加支持. \n\n* Linux有个比较好的机制，就是可以 **动态加载内核模块** ；**模块** 是具有独立功能的程序，它可以被单独编译，但不能独立运行。它在运行时被链接到内核作为内核的一部分在内核空间运行。\n\n\t这样，Android系统就可以在Linux的基础之上，通过添加一个内核模块运行在内核空间，用户进程之间可通过这个模块完成通信。这个模块就是所谓的 **Binder驱动** .\n\n\t尽管名叫‘驱动’，实际上和硬件设备没有任何关系，只是实现方式和设备驱动程序是一样的：它工作于内核态，提供open()，mmap()，poll()，ioctl()等标准文件设备的操作.\n\n* Linux已拥有的进程间通信IPC手段包括： Pipe、Signal、Socket、Message、Share Memory 和信号量Semaphore.\n\n### 为何使用Binder\n\n为什么要单独弄一套， 而不是使用linux系统提供的那些进程间通信的方式\n\n主要是考虑到性能和安全，还有易用. \n\n* 最易想到的就是利用存储-转发机制：使用Linux 提供的系统调用接口：copy_from_user()和copy_to_user() 来实现进程间通信，缺点是效率低下，需要做两次拷贝：用户空间->内核空间->用户空间。\n\n* Binder驱动 为了实现用户空间到用户空间的拷贝，mmap()分配的内存除了映射进了接收方进程里，还映射进了内核空间。所以调用copy_from_user()将数据拷贝进内核空间也相当于拷贝进了接收方的用户空间， 所以Binder机制只需要一次拷贝。\n\n* 而共享内存的话，效率比较高， 但控制复杂....\n\n* 安全性: 传统IPC没有任何安全措施，完全依赖上层协议来确保；传统IPC访问接入点是开放的，无法建立私有通道；例如Socket通信的话，socket的ip地址或文件名都是开放的，只要知道这些接入点的程序都可以和对端建立连接，不管怎样都无法阻止恶意程序通过猜测接收方地址获得连接。\n\n> Binder基于Client-Server通信模式，传输过程只需一次拷贝，为发送发添加UID/PID身份，既支持实名Binder也支持匿名Binder，安全性高。\n\n\n\n### Binder通信模型\n\n\n应用层大家所熟知的通信结构， 如下图:\n    \n![Binder通信概述](/img/binder/binder通信概述.jpg)\n\n1. 从表面上来看，是client通过获得一个server的代理接口，对server进行直接调用；\n2. 实际上，代理接口中定义的方法与server中定义的方法是一一对应的；\n3. client调用某个代理接口中的方法时，代理接口的方法会将client传递的参数打包成为Parcel对象；\n4. 代理接口将该Parcel发送给内核中的binder driver.\n5. server会读取binder driver中的请求数据，如果是发送给自己的，解包Parcel对象，处理并将结果返回；\n6. 整个的调用过程是一个同步过程，在server处理的时候，client会block住。\n\n\n在整个Binder系统中，Binder框架定义了四个角色：Server，Client，ServiceManager 以及Binder驱动。其中Server，Client，SM运行于用户空间，驱动运行于内核空间\n\n![Binder通信模型](/img/binder/binder-通信模型.jpg)\n\n整个步骤如下: \n\n* SM建立；首先有一个进程向驱动提出申请为SM；驱动同意之后，SM进程负责管理Service.\n\n* 各个Server向SM注册；将Server自己的名字和内存地址报告给SM; 这样SM就建立了一张表，对应着各个Server的名字和地址\n\n* Client想要与Server通信，首先询问SM；通过服务名获取到对应的内存地址；Client收到之后，就可以进行通信了.\n\n\t可以看出驱动是整个通信过程的核心，完成跨进程通信的秘密全部隐藏在驱动里面；这里Client与SM的通信，以及Client与Server的通信，都会经过驱动\n\t\n\t\n> 相关接口可参见 native/libs/binder/IServiceManager.cpp  以及对应的native 层 service_manager.c\n\n\n### Binder机制跨进程原理\n\n![Binder机制跨进程原理](/img/binder/binder-跨进程原理.jpg)\n\n* 首先，Server进程要向SM注册；告诉自己是谁，自己有什么能力;在这个场景就是Server告诉SM，它叫AAA，它有一个object对象，可以执行add 操作；于是SM建立了一张表：AAA这个名字对应进程Server; 如原代码中 .//native/libs/binder/IServiceManager.cpp\n\n\t\tvirtual status_t addService(const String16& name, const sp<IBinder>& service,\n            bool allowIsolated)\n\t    {\n    \t    Parcel data, reply;\n\t\tdata.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());\n        \tdata.writeString16(name);\n        \tdata.writeStrongBinder(service);\n\t        data.writeInt32(allowIsolated ? 1 : 0);\n    \t    status_t err = remote()->transact(ADD_SERVICE_TRANSACTION, data, &reply);\n        \treturn err == NO_ERROR ? reply.readExceptionCode() : err;\n    \t}\n\n* 然后Client向SM查询：名字叫做AAA的进程里面的object对象；进程之间通信的数据都会经过运行在内核空间里面的驱动，驱动在数据流过的时候会做一些处理，它并不会给Client进程返回一个真正的object对象，而是返回一个看起来跟object一模一样的代理对象objectProxy，这个objectProxy也有一个add方法，但是这个add方法没有Server进程里面object对象的add方法那个能力；它唯一做的事情就是把参数包装然后交给驱动。\n\n* 驱动收到这个消息，发现是这个objectProxy；通过查表就知道：之前用objectProxy替换了object发送给Client了，它真正应该要访问的是object对象的add方法；于是Binder驱动通知Server进程，调用它的object对象的add方法，然后把结果发给binder驱动，Sever进程收到这个消息，执行add之后将结果返回驱动，驱动然后把结果返回给Client进程；于是整个过程就完成了.\n\nBinder跨进程传输并不是真的把一个对象传输到了另外一个进程；传输过程是在Binder跨进程穿越的时候，它在一个进程留下了一个本体，在另外一个进程则使用该对象的一个proxy；Client进程的操作其实是对于proxy的操作，proxy利用Binder驱动最终让真正的binder对象完成操作。\n\nAndroid系统实现这种机制使用的是代理模式, 对于Binder的访问，如果是在同一个进程，那么直接返回原始的Binder实体；如果在不同进程，那么就给他一个代理对象- 在后面的demo中我们可以看见...\n\t\n\tpublic static ICalculate asInterface(IBinder obj) {\n            if(obj == null) {\n                return null;\n            } else {\n                IInterface iin = obj.queryLocalInterface(\"com.zhangfl.jpush.ICalculate\");\n                return (ICalculate)(iin != null && iin instanceof ICalculate?(ICalculate)iin:new ICalculate.Stub.Proxy(obj));\n            }\n        }\n        \n\n> Client进程只不过是持有了Server端的代理；代理对象协助驱动完成了跨进程通信。\n\n### proxy代理模式\n\n模式中的三种角色:\n\n![proxy设计模式](/img/binder/proxy_uml.jpg)\n\n* 抽象角色：声明真实对象和代理对象的共同接口。\n\n* 代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。\n\n* 真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。\n\n> 模式原则: 对修改关闭，对扩展开放，保证了系统的稳定性\n\n\n\n### 驱动里面的Binder\n\n\n略过:  具体可以参考源码以及 [Binder设计与实现](http://blog.csdn.net/universus/article/details/6211589) 一文\n\n\n### Java层的Binder\n\nIBinder/IInterface/Binder/BinderProxy/Stub\n\n* IBinder是一个接口，它代表了一种跨进程传输的能力；只要实现了这个接口，就能将这个对象进行跨进程传递；这是驱动底层支持的；在跨进程数据流经驱动的时候，驱动会识别IBinder类型的数据，从而自动完成不同进程Binder本地对象以及Binder代理对象的转换。\n\n* IInterface代表的就是远程server对象具有的能力。具体来说，就是aidl里面的接口。\n\n* Java层的Binder类，代表的其实就是Binder本地对象。BinderProxy类是Binder类的一个内部类，它代表远程进程的Binder对象的本地代理；这两个类都继承自IBinder, 因而都具有跨进程传输的能力；实际上，在跨越进程的时候，Binder驱动会自动完成这两个对象的转换。\n\n* 在使用AIDL的时候，编译工具会给我们生成一个Stub的静态内部类；这个类继承了Binder, 说明它是一个Binder本地对象，它实现了IInterface接口，表明它具有远程Server承诺给Client的能力；Stub是一个抽象类，具体的IInterface的相关实现需要我们手动完成. 其实这里使用了策略模式.\n\n### AIDL过程分析\n\n一种固定的模式：\n\n* 一个需要跨进程传递的对象一定继承自IBinder，如果是Binder本地对象，那么一定继承Binder实现IInterface，如果是代理对象，那么就实现了IInterface并持有IBinder引用；\n\nProxy与Stub不一样，虽然他们都既是Binder又是IInterface，不同的是Stub采用的是继承（is 关系），Proxy采用的是组合（has 关系）。他们均实现了所有的IInterface函数，不同的是，Stub使用策略模式调用的是虚函数（待子类实现），而Proxy则使用组合模式。为什么Stub采用继承而Proxy采用组合？事实上，Stub本身is一个IBinder（Binder），它本身就是一个能跨越进程边界传输的对象，所以它得继承IBinder实现transact这个函数从而得到跨越进程的能力（这个能力由驱动赋予）。Proxy类使用组合，是因为他不关心自己是什么，它也不需要跨越进程传输，它只需要拥有这个能力即可，要拥有这个能力，只需要保留一个对IBinder的引用\n\n\n### demo.\n\n......\n\n\n### 系统服务分析\n\nIXXX、IXXX.Stub和IXXX.Stub.Proxy，并做好对应。这样看相关的系统服务就比较容易了，以ServiceManager为例\n\n实际上ServerManager既是系统服务的管理者，同时也是一个系统服务。因此它肯定是基于Binder实现的\n\n- 与IXXX相对应的类就是IServiceManager类，封装了远程调用的几个主要函数\n\n- 与IXXX.Stub对应的类就是ServiceManagerNative\n\n- 与IXXX.Stub.Proxy对应的类ServiceManagerProxy\n\n\t查看上面相关类的代码，实际上和使用adil生成的代码没什么两样。仅仅是类命名不一样，将三个类分开写了而已。\n\n\t在服务端继承ServiceManagerNative类实现里面的相关方法就能实现服务端，然后在客户端将远程服务端所对应的的Binder封装成：\n\t\n\tIServiceManager iSm = ServiceManagerNative.asInterface(binder)即可\n\n\tPS： 实际上，在源码中找不到继承自ServiceManagerNative类的远程服务端类ServiceManagerService，根本就找不到这样一个类。原因是SMS在native层被实现成一个独立的进程，是在启动后解析init.rc脚本启动服务的.\n\t\n\n再看看ActivityManager中的Binder。\n\n- IActivityManager对应IXXX接口\n\n- ActivityManagerNative对应IXXX.Stub类，继承自Binder类。\n\n- ActivityManagerProxy对应IXXX.Stub.Proxy类。\n\n\tAMS的服务端就是ActivityManagerService类，这个类继承自ActivityManagerNative，实现了IActivityManager接口中的方法用来进行IPC。\n\n\t只要在客户端得到了这个远程服务端的Binder引用就可以进行IPC通信了\n\n\n\n### 参考\n\n* [linux内核设计与实现](https://book.douban.com/subject/1503819/)\n\n* [Binder设计与实现](http://blog.csdn.net/universus/article/details/6211589)\n\n* [Android进程间通信（IPC）机制Binder简要介绍和学习计划系列](http://blog.csdn.net/luoshengyang/article/details/6618363)\n\n","source":"_posts/binder01.md","raw":"---\ntitle: binder简要学习\ndate: 2016-03-17 13:36:49\ncategories: android\ntags: [android,binder]\ncomment: true\ntoc: true\ndescription: 理解Binder对于理解整个Android系统有着非常重要的作用，Android系统的四大组件，AMS，PMS等系统服务无一不与Binder挂钩\n\n---\n\n# Binder \n\n### 本文目标\n\n理解Binder对于理解整个Android系统有着非常重要的作用，Android系统的四大组件，AMS，PMS等系统服务无一不与Binder挂钩；如果对Binder不甚了解，那么就很难了解这些系统机制.\n\n要真正的弄明白 Binder机制 还是比较麻烦的，我们今天只是大致的介绍一下在应用层怎么使用\n\n本文目标:\n\n* 不依赖AIDL工具，手写远程Service完成跨进程通信\n\n* 弄明白AIDL生成的相关代码\n\n* 以及基于AIDL代码的分析，了解系统相关服务的代码逻辑.\n\n\n### Linux相关概念\n\n因为是讲进程间的通信，而android又是基于linux，所以对于linux系统需要一定的了解.\n推荐 [linux内核设计与实现](https://book.douban.com/subject/1503819/) 其主要是讲一些系统概念\n\n\n* 操作系统的不同进程之间，数据不共享；对于每个进程来说，都以为自己独享了整个系统，完全不知道其他进程的存在；因此一个进程需要与另外一个进程通信，需要某种 **系统机制** 才能完成。\n\n* 用户程序只可以访问某些许可的资源，不许可的资源是拒绝被访问的，于是认为的就把Kernel和上层的应用程序抽像的隔离开，分别称之为 **内核空间(Kernel Space)** 和 **用户空间(User Space)** .\n\n* 用户空间访问内核空间的唯一方式就是 **系统调用** ；通过这个统一入口，所有的资源访问都是在内核的控制下执行，以免导致用户程序对系统资源的越权访问，从而保障了系统的安全和稳定.\n\n* 当一个任务（进程）执行系统调用而陷入内核代码中执行时，我们就称进程处于 **内核运行态** 此时处理器处于特权级最高的内核代码中执行。当进程在执行用户自己的代码时，则称其处于 **用户运行态**（用户态）。处理器在特权等级高的时候才能执行那些特权CPU指令。\n\n* 通过系统调用，用户空间可以访问内核空间. 如果一个用户空间想与另外一个用户空间进行通信，一般是需要操作系统内核添加支持. \n\n* Linux有个比较好的机制，就是可以 **动态加载内核模块** ；**模块** 是具有独立功能的程序，它可以被单独编译，但不能独立运行。它在运行时被链接到内核作为内核的一部分在内核空间运行。\n\n\t这样，Android系统就可以在Linux的基础之上，通过添加一个内核模块运行在内核空间，用户进程之间可通过这个模块完成通信。这个模块就是所谓的 **Binder驱动** .\n\n\t尽管名叫‘驱动’，实际上和硬件设备没有任何关系，只是实现方式和设备驱动程序是一样的：它工作于内核态，提供open()，mmap()，poll()，ioctl()等标准文件设备的操作.\n\n* Linux已拥有的进程间通信IPC手段包括： Pipe、Signal、Socket、Message、Share Memory 和信号量Semaphore.\n\n### 为何使用Binder\n\n为什么要单独弄一套， 而不是使用linux系统提供的那些进程间通信的方式\n\n主要是考虑到性能和安全，还有易用. \n\n* 最易想到的就是利用存储-转发机制：使用Linux 提供的系统调用接口：copy_from_user()和copy_to_user() 来实现进程间通信，缺点是效率低下，需要做两次拷贝：用户空间->内核空间->用户空间。\n\n* Binder驱动 为了实现用户空间到用户空间的拷贝，mmap()分配的内存除了映射进了接收方进程里，还映射进了内核空间。所以调用copy_from_user()将数据拷贝进内核空间也相当于拷贝进了接收方的用户空间， 所以Binder机制只需要一次拷贝。\n\n* 而共享内存的话，效率比较高， 但控制复杂....\n\n* 安全性: 传统IPC没有任何安全措施，完全依赖上层协议来确保；传统IPC访问接入点是开放的，无法建立私有通道；例如Socket通信的话，socket的ip地址或文件名都是开放的，只要知道这些接入点的程序都可以和对端建立连接，不管怎样都无法阻止恶意程序通过猜测接收方地址获得连接。\n\n> Binder基于Client-Server通信模式，传输过程只需一次拷贝，为发送发添加UID/PID身份，既支持实名Binder也支持匿名Binder，安全性高。\n\n\n\n### Binder通信模型\n\n\n应用层大家所熟知的通信结构， 如下图:\n    \n![Binder通信概述](/img/binder/binder通信概述.jpg)\n\n1. 从表面上来看，是client通过获得一个server的代理接口，对server进行直接调用；\n2. 实际上，代理接口中定义的方法与server中定义的方法是一一对应的；\n3. client调用某个代理接口中的方法时，代理接口的方法会将client传递的参数打包成为Parcel对象；\n4. 代理接口将该Parcel发送给内核中的binder driver.\n5. server会读取binder driver中的请求数据，如果是发送给自己的，解包Parcel对象，处理并将结果返回；\n6. 整个的调用过程是一个同步过程，在server处理的时候，client会block住。\n\n\n在整个Binder系统中，Binder框架定义了四个角色：Server，Client，ServiceManager 以及Binder驱动。其中Server，Client，SM运行于用户空间，驱动运行于内核空间\n\n![Binder通信模型](/img/binder/binder-通信模型.jpg)\n\n整个步骤如下: \n\n* SM建立；首先有一个进程向驱动提出申请为SM；驱动同意之后，SM进程负责管理Service.\n\n* 各个Server向SM注册；将Server自己的名字和内存地址报告给SM; 这样SM就建立了一张表，对应着各个Server的名字和地址\n\n* Client想要与Server通信，首先询问SM；通过服务名获取到对应的内存地址；Client收到之后，就可以进行通信了.\n\n\t可以看出驱动是整个通信过程的核心，完成跨进程通信的秘密全部隐藏在驱动里面；这里Client与SM的通信，以及Client与Server的通信，都会经过驱动\n\t\n\t\n> 相关接口可参见 native/libs/binder/IServiceManager.cpp  以及对应的native 层 service_manager.c\n\n\n### Binder机制跨进程原理\n\n![Binder机制跨进程原理](/img/binder/binder-跨进程原理.jpg)\n\n* 首先，Server进程要向SM注册；告诉自己是谁，自己有什么能力;在这个场景就是Server告诉SM，它叫AAA，它有一个object对象，可以执行add 操作；于是SM建立了一张表：AAA这个名字对应进程Server; 如原代码中 .//native/libs/binder/IServiceManager.cpp\n\n\t\tvirtual status_t addService(const String16& name, const sp<IBinder>& service,\n            bool allowIsolated)\n\t    {\n    \t    Parcel data, reply;\n\t\tdata.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());\n        \tdata.writeString16(name);\n        \tdata.writeStrongBinder(service);\n\t        data.writeInt32(allowIsolated ? 1 : 0);\n    \t    status_t err = remote()->transact(ADD_SERVICE_TRANSACTION, data, &reply);\n        \treturn err == NO_ERROR ? reply.readExceptionCode() : err;\n    \t}\n\n* 然后Client向SM查询：名字叫做AAA的进程里面的object对象；进程之间通信的数据都会经过运行在内核空间里面的驱动，驱动在数据流过的时候会做一些处理，它并不会给Client进程返回一个真正的object对象，而是返回一个看起来跟object一模一样的代理对象objectProxy，这个objectProxy也有一个add方法，但是这个add方法没有Server进程里面object对象的add方法那个能力；它唯一做的事情就是把参数包装然后交给驱动。\n\n* 驱动收到这个消息，发现是这个objectProxy；通过查表就知道：之前用objectProxy替换了object发送给Client了，它真正应该要访问的是object对象的add方法；于是Binder驱动通知Server进程，调用它的object对象的add方法，然后把结果发给binder驱动，Sever进程收到这个消息，执行add之后将结果返回驱动，驱动然后把结果返回给Client进程；于是整个过程就完成了.\n\nBinder跨进程传输并不是真的把一个对象传输到了另外一个进程；传输过程是在Binder跨进程穿越的时候，它在一个进程留下了一个本体，在另外一个进程则使用该对象的一个proxy；Client进程的操作其实是对于proxy的操作，proxy利用Binder驱动最终让真正的binder对象完成操作。\n\nAndroid系统实现这种机制使用的是代理模式, 对于Binder的访问，如果是在同一个进程，那么直接返回原始的Binder实体；如果在不同进程，那么就给他一个代理对象- 在后面的demo中我们可以看见...\n\t\n\tpublic static ICalculate asInterface(IBinder obj) {\n            if(obj == null) {\n                return null;\n            } else {\n                IInterface iin = obj.queryLocalInterface(\"com.zhangfl.jpush.ICalculate\");\n                return (ICalculate)(iin != null && iin instanceof ICalculate?(ICalculate)iin:new ICalculate.Stub.Proxy(obj));\n            }\n        }\n        \n\n> Client进程只不过是持有了Server端的代理；代理对象协助驱动完成了跨进程通信。\n\n### proxy代理模式\n\n模式中的三种角色:\n\n![proxy设计模式](/img/binder/proxy_uml.jpg)\n\n* 抽象角色：声明真实对象和代理对象的共同接口。\n\n* 代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。\n\n* 真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。\n\n> 模式原则: 对修改关闭，对扩展开放，保证了系统的稳定性\n\n\n\n### 驱动里面的Binder\n\n\n略过:  具体可以参考源码以及 [Binder设计与实现](http://blog.csdn.net/universus/article/details/6211589) 一文\n\n\n### Java层的Binder\n\nIBinder/IInterface/Binder/BinderProxy/Stub\n\n* IBinder是一个接口，它代表了一种跨进程传输的能力；只要实现了这个接口，就能将这个对象进行跨进程传递；这是驱动底层支持的；在跨进程数据流经驱动的时候，驱动会识别IBinder类型的数据，从而自动完成不同进程Binder本地对象以及Binder代理对象的转换。\n\n* IInterface代表的就是远程server对象具有的能力。具体来说，就是aidl里面的接口。\n\n* Java层的Binder类，代表的其实就是Binder本地对象。BinderProxy类是Binder类的一个内部类，它代表远程进程的Binder对象的本地代理；这两个类都继承自IBinder, 因而都具有跨进程传输的能力；实际上，在跨越进程的时候，Binder驱动会自动完成这两个对象的转换。\n\n* 在使用AIDL的时候，编译工具会给我们生成一个Stub的静态内部类；这个类继承了Binder, 说明它是一个Binder本地对象，它实现了IInterface接口，表明它具有远程Server承诺给Client的能力；Stub是一个抽象类，具体的IInterface的相关实现需要我们手动完成. 其实这里使用了策略模式.\n\n### AIDL过程分析\n\n一种固定的模式：\n\n* 一个需要跨进程传递的对象一定继承自IBinder，如果是Binder本地对象，那么一定继承Binder实现IInterface，如果是代理对象，那么就实现了IInterface并持有IBinder引用；\n\nProxy与Stub不一样，虽然他们都既是Binder又是IInterface，不同的是Stub采用的是继承（is 关系），Proxy采用的是组合（has 关系）。他们均实现了所有的IInterface函数，不同的是，Stub使用策略模式调用的是虚函数（待子类实现），而Proxy则使用组合模式。为什么Stub采用继承而Proxy采用组合？事实上，Stub本身is一个IBinder（Binder），它本身就是一个能跨越进程边界传输的对象，所以它得继承IBinder实现transact这个函数从而得到跨越进程的能力（这个能力由驱动赋予）。Proxy类使用组合，是因为他不关心自己是什么，它也不需要跨越进程传输，它只需要拥有这个能力即可，要拥有这个能力，只需要保留一个对IBinder的引用\n\n\n### demo.\n\n......\n\n\n### 系统服务分析\n\nIXXX、IXXX.Stub和IXXX.Stub.Proxy，并做好对应。这样看相关的系统服务就比较容易了，以ServiceManager为例\n\n实际上ServerManager既是系统服务的管理者，同时也是一个系统服务。因此它肯定是基于Binder实现的\n\n- 与IXXX相对应的类就是IServiceManager类，封装了远程调用的几个主要函数\n\n- 与IXXX.Stub对应的类就是ServiceManagerNative\n\n- 与IXXX.Stub.Proxy对应的类ServiceManagerProxy\n\n\t查看上面相关类的代码，实际上和使用adil生成的代码没什么两样。仅仅是类命名不一样，将三个类分开写了而已。\n\n\t在服务端继承ServiceManagerNative类实现里面的相关方法就能实现服务端，然后在客户端将远程服务端所对应的的Binder封装成：\n\t\n\tIServiceManager iSm = ServiceManagerNative.asInterface(binder)即可\n\n\tPS： 实际上，在源码中找不到继承自ServiceManagerNative类的远程服务端类ServiceManagerService，根本就找不到这样一个类。原因是SMS在native层被实现成一个独立的进程，是在启动后解析init.rc脚本启动服务的.\n\t\n\n再看看ActivityManager中的Binder。\n\n- IActivityManager对应IXXX接口\n\n- ActivityManagerNative对应IXXX.Stub类，继承自Binder类。\n\n- ActivityManagerProxy对应IXXX.Stub.Proxy类。\n\n\tAMS的服务端就是ActivityManagerService类，这个类继承自ActivityManagerNative，实现了IActivityManager接口中的方法用来进行IPC。\n\n\t只要在客户端得到了这个远程服务端的Binder引用就可以进行IPC通信了\n\n\n\n### 参考\n\n* [linux内核设计与实现](https://book.douban.com/subject/1503819/)\n\n* [Binder设计与实现](http://blog.csdn.net/universus/article/details/6211589)\n\n* [Android进程间通信（IPC）机制Binder简要介绍和学习计划系列](http://blog.csdn.net/luoshengyang/article/details/6618363)\n\n","slug":"binder01","published":1,"updated":"2016-05-18T12:14:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioctzhe60005vzfyro34ml1n","content":"<h1 id=\"Binder\"><a href=\"#Binder\" class=\"headerlink\" title=\"Binder\"></a>Binder</h1><h3 id=\"本文目标\"><a href=\"#本文目标\" class=\"headerlink\" title=\"本文目标\"></a>本文目标</h3><p>理解Binder对于理解整个Android系统有着非常重要的作用，Android系统的四大组件，AMS，PMS等系统服务无一不与Binder挂钩；如果对Binder不甚了解，那么就很难了解这些系统机制.</p>\n<p>要真正的弄明白 Binder机制 还是比较麻烦的，我们今天只是大致的介绍一下在应用层怎么使用</p>\n<p>本文目标:</p>\n<ul>\n<li><p>不依赖AIDL工具，手写远程Service完成跨进程通信</p>\n</li>\n<li><p>弄明白AIDL生成的相关代码</p>\n</li>\n<li><p>以及基于AIDL代码的分析，了解系统相关服务的代码逻辑.</p>\n</li>\n</ul>\n<h3 id=\"Linux相关概念\"><a href=\"#Linux相关概念\" class=\"headerlink\" title=\"Linux相关概念\"></a>Linux相关概念</h3><p>因为是讲进程间的通信，而android又是基于linux，所以对于linux系统需要一定的了解.<br>推荐 <a href=\"https://book.douban.com/subject/1503819/\" target=\"_blank\" rel=\"external\">linux内核设计与实现</a> 其主要是讲一些系统概念</p>\n<ul>\n<li><p>操作系统的不同进程之间，数据不共享；对于每个进程来说，都以为自己独享了整个系统，完全不知道其他进程的存在；因此一个进程需要与另外一个进程通信，需要某种 <strong>系统机制</strong> 才能完成。</p>\n</li>\n<li><p>用户程序只可以访问某些许可的资源，不许可的资源是拒绝被访问的，于是认为的就把Kernel和上层的应用程序抽像的隔离开，分别称之为 <strong>内核空间(Kernel Space)</strong> 和 <strong>用户空间(User Space)</strong> .</p>\n</li>\n<li><p>用户空间访问内核空间的唯一方式就是 <strong>系统调用</strong> ；通过这个统一入口，所有的资源访问都是在内核的控制下执行，以免导致用户程序对系统资源的越权访问，从而保障了系统的安全和稳定.</p>\n</li>\n<li><p>当一个任务（进程）执行系统调用而陷入内核代码中执行时，我们就称进程处于 <strong>内核运行态</strong> 此时处理器处于特权级最高的内核代码中执行。当进程在执行用户自己的代码时，则称其处于 <strong>用户运行态</strong>（用户态）。处理器在特权等级高的时候才能执行那些特权CPU指令。</p>\n</li>\n<li><p>通过系统调用，用户空间可以访问内核空间. 如果一个用户空间想与另外一个用户空间进行通信，一般是需要操作系统内核添加支持. </p>\n</li>\n<li><p>Linux有个比较好的机制，就是可以 <strong>动态加载内核模块</strong> ；<strong>模块</strong> 是具有独立功能的程序，它可以被单独编译，但不能独立运行。它在运行时被链接到内核作为内核的一部分在内核空间运行。</p>\n<p>  这样，Android系统就可以在Linux的基础之上，通过添加一个内核模块运行在内核空间，用户进程之间可通过这个模块完成通信。这个模块就是所谓的 <strong>Binder驱动</strong> .</p>\n<p>  尽管名叫‘驱动’，实际上和硬件设备没有任何关系，只是实现方式和设备驱动程序是一样的：它工作于内核态，提供open()，mmap()，poll()，ioctl()等标准文件设备的操作.</p>\n</li>\n<li><p>Linux已拥有的进程间通信IPC手段包括： Pipe、Signal、Socket、Message、Share Memory 和信号量Semaphore.</p>\n</li>\n</ul>\n<h3 id=\"为何使用Binder\"><a href=\"#为何使用Binder\" class=\"headerlink\" title=\"为何使用Binder\"></a>为何使用Binder</h3><p>为什么要单独弄一套， 而不是使用linux系统提供的那些进程间通信的方式</p>\n<p>主要是考虑到性能和安全，还有易用. </p>\n<ul>\n<li><p>最易想到的就是利用存储-转发机制：使用Linux 提供的系统调用接口：copy_from_user()和copy_to_user() 来实现进程间通信，缺点是效率低下，需要做两次拷贝：用户空间-&gt;内核空间-&gt;用户空间。</p>\n</li>\n<li><p>Binder驱动 为了实现用户空间到用户空间的拷贝，mmap()分配的内存除了映射进了接收方进程里，还映射进了内核空间。所以调用copy_from_user()将数据拷贝进内核空间也相当于拷贝进了接收方的用户空间， 所以Binder机制只需要一次拷贝。</p>\n</li>\n<li><p>而共享内存的话，效率比较高， 但控制复杂….</p>\n</li>\n<li><p>安全性: 传统IPC没有任何安全措施，完全依赖上层协议来确保；传统IPC访问接入点是开放的，无法建立私有通道；例如Socket通信的话，socket的ip地址或文件名都是开放的，只要知道这些接入点的程序都可以和对端建立连接，不管怎样都无法阻止恶意程序通过猜测接收方地址获得连接。</p>\n</li>\n</ul>\n<blockquote>\n<p>Binder基于Client-Server通信模式，传输过程只需一次拷贝，为发送发添加UID/PID身份，既支持实名Binder也支持匿名Binder，安全性高。</p>\n</blockquote>\n<h3 id=\"Binder通信模型\"><a href=\"#Binder通信模型\" class=\"headerlink\" title=\"Binder通信模型\"></a>Binder通信模型</h3><p>应用层大家所熟知的通信结构， 如下图:</p>\n<p><img src=\"/img/binder/binder通信概述.jpg\" alt=\"Binder通信概述\"></p>\n<ol>\n<li>从表面上来看，是client通过获得一个server的代理接口，对server进行直接调用；</li>\n<li>实际上，代理接口中定义的方法与server中定义的方法是一一对应的；</li>\n<li>client调用某个代理接口中的方法时，代理接口的方法会将client传递的参数打包成为Parcel对象；</li>\n<li>代理接口将该Parcel发送给内核中的binder driver.</li>\n<li>server会读取binder driver中的请求数据，如果是发送给自己的，解包Parcel对象，处理并将结果返回；</li>\n<li>整个的调用过程是一个同步过程，在server处理的时候，client会block住。</li>\n</ol>\n<p>在整个Binder系统中，Binder框架定义了四个角色：Server，Client，ServiceManager 以及Binder驱动。其中Server，Client，SM运行于用户空间，驱动运行于内核空间</p>\n<p><img src=\"/img/binder/binder-通信模型.jpg\" alt=\"Binder通信模型\"></p>\n<p>整个步骤如下: </p>\n<ul>\n<li><p>SM建立；首先有一个进程向驱动提出申请为SM；驱动同意之后，SM进程负责管理Service.</p>\n</li>\n<li><p>各个Server向SM注册；将Server自己的名字和内存地址报告给SM; 这样SM就建立了一张表，对应着各个Server的名字和地址</p>\n</li>\n<li><p>Client想要与Server通信，首先询问SM；通过服务名获取到对应的内存地址；Client收到之后，就可以进行通信了.</p>\n<p>  可以看出驱动是整个通信过程的核心，完成跨进程通信的秘密全部隐藏在驱动里面；这里Client与SM的通信，以及Client与Server的通信，都会经过驱动</p>\n</li>\n</ul>\n<blockquote>\n<p>相关接口可参见 native/libs/binder/IServiceManager.cpp  以及对应的native 层 service_manager.c</p>\n</blockquote>\n<h3 id=\"Binder机制跨进程原理\"><a href=\"#Binder机制跨进程原理\" class=\"headerlink\" title=\"Binder机制跨进程原理\"></a>Binder机制跨进程原理</h3><p><img src=\"/img/binder/binder-跨进程原理.jpg\" alt=\"Binder机制跨进程原理\"></p>\n<ul>\n<li><p>首先，Server进程要向SM注册；告诉自己是谁，自己有什么能力;在这个场景就是Server告诉SM，它叫AAA，它有一个object对象，可以执行add 操作；于是SM建立了一张表：AAA这个名字对应进程Server; 如原代码中 .//native/libs/binder/IServiceManager.cpp</p>\n<pre><code>virtual status_t addService(const String16&amp; name, const sp&lt;IBinder&gt;&amp; service,\n    bool allowIsolated)\n{\n    Parcel data, reply;\ndata.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());\n    data.writeString16(name);\n    data.writeStrongBinder(service);\n    data.writeInt32(allowIsolated ? 1 : 0);\n    status_t err = remote()-&gt;transact(ADD_SERVICE_TRANSACTION, data, &amp;reply);\n    return err == NO_ERROR ? reply.readExceptionCode() : err;\n}\n</code></pre></li>\n<li><p>然后Client向SM查询：名字叫做AAA的进程里面的object对象；进程之间通信的数据都会经过运行在内核空间里面的驱动，驱动在数据流过的时候会做一些处理，它并不会给Client进程返回一个真正的object对象，而是返回一个看起来跟object一模一样的代理对象objectProxy，这个objectProxy也有一个add方法，但是这个add方法没有Server进程里面object对象的add方法那个能力；它唯一做的事情就是把参数包装然后交给驱动。</p>\n</li>\n<li><p>驱动收到这个消息，发现是这个objectProxy；通过查表就知道：之前用objectProxy替换了object发送给Client了，它真正应该要访问的是object对象的add方法；于是Binder驱动通知Server进程，调用它的object对象的add方法，然后把结果发给binder驱动，Sever进程收到这个消息，执行add之后将结果返回驱动，驱动然后把结果返回给Client进程；于是整个过程就完成了.</p>\n</li>\n</ul>\n<p>Binder跨进程传输并不是真的把一个对象传输到了另外一个进程；传输过程是在Binder跨进程穿越的时候，它在一个进程留下了一个本体，在另外一个进程则使用该对象的一个proxy；Client进程的操作其实是对于proxy的操作，proxy利用Binder驱动最终让真正的binder对象完成操作。</p>\n<p>Android系统实现这种机制使用的是代理模式, 对于Binder的访问，如果是在同一个进程，那么直接返回原始的Binder实体；如果在不同进程，那么就给他一个代理对象- 在后面的demo中我们可以看见…</p>\n<pre><code>public static ICalculate asInterface(IBinder obj) {\n        if(obj == null) {\n            return null;\n        } else {\n            IInterface iin = obj.queryLocalInterface(&quot;com.zhangfl.jpush.ICalculate&quot;);\n            return (ICalculate)(iin != null &amp;&amp; iin instanceof ICalculate?(ICalculate)iin:new ICalculate.Stub.Proxy(obj));\n        }\n    }\n</code></pre><blockquote>\n<p>Client进程只不过是持有了Server端的代理；代理对象协助驱动完成了跨进程通信。</p>\n</blockquote>\n<h3 id=\"proxy代理模式\"><a href=\"#proxy代理模式\" class=\"headerlink\" title=\"proxy代理模式\"></a>proxy代理模式</h3><p>模式中的三种角色:</p>\n<p><img src=\"/img/binder/proxy_uml.jpg\" alt=\"proxy设计模式\"></p>\n<ul>\n<li><p>抽象角色：声明真实对象和代理对象的共同接口。</p>\n</li>\n<li><p>代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。</p>\n</li>\n<li><p>真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。</p>\n</li>\n</ul>\n<blockquote>\n<p>模式原则: 对修改关闭，对扩展开放，保证了系统的稳定性</p>\n</blockquote>\n<h3 id=\"驱动里面的Binder\"><a href=\"#驱动里面的Binder\" class=\"headerlink\" title=\"驱动里面的Binder\"></a>驱动里面的Binder</h3><p>略过:  具体可以参考源码以及 <a href=\"http://blog.csdn.net/universus/article/details/6211589\" target=\"_blank\" rel=\"external\">Binder设计与实现</a> 一文</p>\n<h3 id=\"Java层的Binder\"><a href=\"#Java层的Binder\" class=\"headerlink\" title=\"Java层的Binder\"></a>Java层的Binder</h3><p>IBinder/IInterface/Binder/BinderProxy/Stub</p>\n<ul>\n<li><p>IBinder是一个接口，它代表了一种跨进程传输的能力；只要实现了这个接口，就能将这个对象进行跨进程传递；这是驱动底层支持的；在跨进程数据流经驱动的时候，驱动会识别IBinder类型的数据，从而自动完成不同进程Binder本地对象以及Binder代理对象的转换。</p>\n</li>\n<li><p>IInterface代表的就是远程server对象具有的能力。具体来说，就是aidl里面的接口。</p>\n</li>\n<li><p>Java层的Binder类，代表的其实就是Binder本地对象。BinderProxy类是Binder类的一个内部类，它代表远程进程的Binder对象的本地代理；这两个类都继承自IBinder, 因而都具有跨进程传输的能力；实际上，在跨越进程的时候，Binder驱动会自动完成这两个对象的转换。</p>\n</li>\n<li><p>在使用AIDL的时候，编译工具会给我们生成一个Stub的静态内部类；这个类继承了Binder, 说明它是一个Binder本地对象，它实现了IInterface接口，表明它具有远程Server承诺给Client的能力；Stub是一个抽象类，具体的IInterface的相关实现需要我们手动完成. 其实这里使用了策略模式.</p>\n</li>\n</ul>\n<h3 id=\"AIDL过程分析\"><a href=\"#AIDL过程分析\" class=\"headerlink\" title=\"AIDL过程分析\"></a>AIDL过程分析</h3><p>一种固定的模式：</p>\n<ul>\n<li>一个需要跨进程传递的对象一定继承自IBinder，如果是Binder本地对象，那么一定继承Binder实现IInterface，如果是代理对象，那么就实现了IInterface并持有IBinder引用；</li>\n</ul>\n<p>Proxy与Stub不一样，虽然他们都既是Binder又是IInterface，不同的是Stub采用的是继承（is 关系），Proxy采用的是组合（has 关系）。他们均实现了所有的IInterface函数，不同的是，Stub使用策略模式调用的是虚函数（待子类实现），而Proxy则使用组合模式。为什么Stub采用继承而Proxy采用组合？事实上，Stub本身is一个IBinder（Binder），它本身就是一个能跨越进程边界传输的对象，所以它得继承IBinder实现transact这个函数从而得到跨越进程的能力（这个能力由驱动赋予）。Proxy类使用组合，是因为他不关心自己是什么，它也不需要跨越进程传输，它只需要拥有这个能力即可，要拥有这个能力，只需要保留一个对IBinder的引用</p>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo.\"></a>demo.</h3><p>……</p>\n<h3 id=\"系统服务分析\"><a href=\"#系统服务分析\" class=\"headerlink\" title=\"系统服务分析\"></a>系统服务分析</h3><p>IXXX、IXXX.Stub和IXXX.Stub.Proxy，并做好对应。这样看相关的系统服务就比较容易了，以ServiceManager为例</p>\n<p>实际上ServerManager既是系统服务的管理者，同时也是一个系统服务。因此它肯定是基于Binder实现的</p>\n<ul>\n<li><p>与IXXX相对应的类就是IServiceManager类，封装了远程调用的几个主要函数</p>\n</li>\n<li><p>与IXXX.Stub对应的类就是ServiceManagerNative</p>\n</li>\n<li><p>与IXXX.Stub.Proxy对应的类ServiceManagerProxy</p>\n<p>  查看上面相关类的代码，实际上和使用adil生成的代码没什么两样。仅仅是类命名不一样，将三个类分开写了而已。</p>\n<p>  在服务端继承ServiceManagerNative类实现里面的相关方法就能实现服务端，然后在客户端将远程服务端所对应的的Binder封装成：</p>\n<p>  IServiceManager iSm = ServiceManagerNative.asInterface(binder)即可</p>\n<p>  PS： 实际上，在源码中找不到继承自ServiceManagerNative类的远程服务端类ServiceManagerService，根本就找不到这样一个类。原因是SMS在native层被实现成一个独立的进程，是在启动后解析init.rc脚本启动服务的.</p>\n</li>\n</ul>\n<p>再看看ActivityManager中的Binder。</p>\n<ul>\n<li><p>IActivityManager对应IXXX接口</p>\n</li>\n<li><p>ActivityManagerNative对应IXXX.Stub类，继承自Binder类。</p>\n</li>\n<li><p>ActivityManagerProxy对应IXXX.Stub.Proxy类。</p>\n<p>  AMS的服务端就是ActivityManagerService类，这个类继承自ActivityManagerNative，实现了IActivityManager接口中的方法用来进行IPC。</p>\n<p>  只要在客户端得到了这个远程服务端的Binder引用就可以进行IPC通信了</p>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/1503819/\" target=\"_blank\" rel=\"external\">linux内核设计与实现</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/universus/article/details/6211589\" target=\"_blank\" rel=\"external\">Binder设计与实现</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/luoshengyang/article/details/6618363\" target=\"_blank\" rel=\"external\">Android进程间通信（IPC）机制Binder简要介绍和学习计划系列</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Binder\"><a href=\"#Binder\" class=\"headerlink\" title=\"Binder\"></a>Binder</h1><h3 id=\"本文目标\"><a href=\"#本文目标\" class=\"headerlink\" title=\"本文目标\"></a>本文目标</h3><p>理解Binder对于理解整个Android系统有着非常重要的作用，Android系统的四大组件，AMS，PMS等系统服务无一不与Binder挂钩；如果对Binder不甚了解，那么就很难了解这些系统机制.</p>\n<p>要真正的弄明白 Binder机制 还是比较麻烦的，我们今天只是大致的介绍一下在应用层怎么使用</p>\n<p>本文目标:</p>\n<ul>\n<li><p>不依赖AIDL工具，手写远程Service完成跨进程通信</p>\n</li>\n<li><p>弄明白AIDL生成的相关代码</p>\n</li>\n<li><p>以及基于AIDL代码的分析，了解系统相关服务的代码逻辑.</p>\n</li>\n</ul>\n<h3 id=\"Linux相关概念\"><a href=\"#Linux相关概念\" class=\"headerlink\" title=\"Linux相关概念\"></a>Linux相关概念</h3><p>因为是讲进程间的通信，而android又是基于linux，所以对于linux系统需要一定的了解.<br>推荐 <a href=\"https://book.douban.com/subject/1503819/\">linux内核设计与实现</a> 其主要是讲一些系统概念</p>\n<ul>\n<li><p>操作系统的不同进程之间，数据不共享；对于每个进程来说，都以为自己独享了整个系统，完全不知道其他进程的存在；因此一个进程需要与另外一个进程通信，需要某种 <strong>系统机制</strong> 才能完成。</p>\n</li>\n<li><p>用户程序只可以访问某些许可的资源，不许可的资源是拒绝被访问的，于是认为的就把Kernel和上层的应用程序抽像的隔离开，分别称之为 <strong>内核空间(Kernel Space)</strong> 和 <strong>用户空间(User Space)</strong> .</p>\n</li>\n<li><p>用户空间访问内核空间的唯一方式就是 <strong>系统调用</strong> ；通过这个统一入口，所有的资源访问都是在内核的控制下执行，以免导致用户程序对系统资源的越权访问，从而保障了系统的安全和稳定.</p>\n</li>\n<li><p>当一个任务（进程）执行系统调用而陷入内核代码中执行时，我们就称进程处于 <strong>内核运行态</strong> 此时处理器处于特权级最高的内核代码中执行。当进程在执行用户自己的代码时，则称其处于 <strong>用户运行态</strong>（用户态）。处理器在特权等级高的时候才能执行那些特权CPU指令。</p>\n</li>\n<li><p>通过系统调用，用户空间可以访问内核空间. 如果一个用户空间想与另外一个用户空间进行通信，一般是需要操作系统内核添加支持. </p>\n</li>\n<li><p>Linux有个比较好的机制，就是可以 <strong>动态加载内核模块</strong> ；<strong>模块</strong> 是具有独立功能的程序，它可以被单独编译，但不能独立运行。它在运行时被链接到内核作为内核的一部分在内核空间运行。</p>\n<p>  这样，Android系统就可以在Linux的基础之上，通过添加一个内核模块运行在内核空间，用户进程之间可通过这个模块完成通信。这个模块就是所谓的 <strong>Binder驱动</strong> .</p>\n<p>  尽管名叫‘驱动’，实际上和硬件设备没有任何关系，只是实现方式和设备驱动程序是一样的：它工作于内核态，提供open()，mmap()，poll()，ioctl()等标准文件设备的操作.</p>\n</li>\n<li><p>Linux已拥有的进程间通信IPC手段包括： Pipe、Signal、Socket、Message、Share Memory 和信号量Semaphore.</p>\n</li>\n</ul>\n<h3 id=\"为何使用Binder\"><a href=\"#为何使用Binder\" class=\"headerlink\" title=\"为何使用Binder\"></a>为何使用Binder</h3><p>为什么要单独弄一套， 而不是使用linux系统提供的那些进程间通信的方式</p>\n<p>主要是考虑到性能和安全，还有易用. </p>\n<ul>\n<li><p>最易想到的就是利用存储-转发机制：使用Linux 提供的系统调用接口：copy_from_user()和copy_to_user() 来实现进程间通信，缺点是效率低下，需要做两次拷贝：用户空间-&gt;内核空间-&gt;用户空间。</p>\n</li>\n<li><p>Binder驱动 为了实现用户空间到用户空间的拷贝，mmap()分配的内存除了映射进了接收方进程里，还映射进了内核空间。所以调用copy_from_user()将数据拷贝进内核空间也相当于拷贝进了接收方的用户空间， 所以Binder机制只需要一次拷贝。</p>\n</li>\n<li><p>而共享内存的话，效率比较高， 但控制复杂….</p>\n</li>\n<li><p>安全性: 传统IPC没有任何安全措施，完全依赖上层协议来确保；传统IPC访问接入点是开放的，无法建立私有通道；例如Socket通信的话，socket的ip地址或文件名都是开放的，只要知道这些接入点的程序都可以和对端建立连接，不管怎样都无法阻止恶意程序通过猜测接收方地址获得连接。</p>\n</li>\n</ul>\n<blockquote>\n<p>Binder基于Client-Server通信模式，传输过程只需一次拷贝，为发送发添加UID/PID身份，既支持实名Binder也支持匿名Binder，安全性高。</p>\n</blockquote>\n<h3 id=\"Binder通信模型\"><a href=\"#Binder通信模型\" class=\"headerlink\" title=\"Binder通信模型\"></a>Binder通信模型</h3><p>应用层大家所熟知的通信结构， 如下图:</p>\n<p><img src=\"/img/binder/binder通信概述.jpg\" alt=\"Binder通信概述\"></p>\n<ol>\n<li>从表面上来看，是client通过获得一个server的代理接口，对server进行直接调用；</li>\n<li>实际上，代理接口中定义的方法与server中定义的方法是一一对应的；</li>\n<li>client调用某个代理接口中的方法时，代理接口的方法会将client传递的参数打包成为Parcel对象；</li>\n<li>代理接口将该Parcel发送给内核中的binder driver.</li>\n<li>server会读取binder driver中的请求数据，如果是发送给自己的，解包Parcel对象，处理并将结果返回；</li>\n<li>整个的调用过程是一个同步过程，在server处理的时候，client会block住。</li>\n</ol>\n<p>在整个Binder系统中，Binder框架定义了四个角色：Server，Client，ServiceManager 以及Binder驱动。其中Server，Client，SM运行于用户空间，驱动运行于内核空间</p>\n<p><img src=\"/img/binder/binder-通信模型.jpg\" alt=\"Binder通信模型\"></p>\n<p>整个步骤如下: </p>\n<ul>\n<li><p>SM建立；首先有一个进程向驱动提出申请为SM；驱动同意之后，SM进程负责管理Service.</p>\n</li>\n<li><p>各个Server向SM注册；将Server自己的名字和内存地址报告给SM; 这样SM就建立了一张表，对应着各个Server的名字和地址</p>\n</li>\n<li><p>Client想要与Server通信，首先询问SM；通过服务名获取到对应的内存地址；Client收到之后，就可以进行通信了.</p>\n<p>  可以看出驱动是整个通信过程的核心，完成跨进程通信的秘密全部隐藏在驱动里面；这里Client与SM的通信，以及Client与Server的通信，都会经过驱动</p>\n</li>\n</ul>\n<blockquote>\n<p>相关接口可参见 native/libs/binder/IServiceManager.cpp  以及对应的native 层 service_manager.c</p>\n</blockquote>\n<h3 id=\"Binder机制跨进程原理\"><a href=\"#Binder机制跨进程原理\" class=\"headerlink\" title=\"Binder机制跨进程原理\"></a>Binder机制跨进程原理</h3><p><img src=\"/img/binder/binder-跨进程原理.jpg\" alt=\"Binder机制跨进程原理\"></p>\n<ul>\n<li><p>首先，Server进程要向SM注册；告诉自己是谁，自己有什么能力;在这个场景就是Server告诉SM，它叫AAA，它有一个object对象，可以执行add 操作；于是SM建立了一张表：AAA这个名字对应进程Server; 如原代码中 .//native/libs/binder/IServiceManager.cpp</p>\n<pre><code>virtual status_t addService(const String16&amp; name, const sp&lt;IBinder&gt;&amp; service,\n    bool allowIsolated)\n{\n    Parcel data, reply;\ndata.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());\n    data.writeString16(name);\n    data.writeStrongBinder(service);\n    data.writeInt32(allowIsolated ? 1 : 0);\n    status_t err = remote()-&gt;transact(ADD_SERVICE_TRANSACTION, data, &amp;reply);\n    return err == NO_ERROR ? reply.readExceptionCode() : err;\n}\n</code></pre></li>\n<li><p>然后Client向SM查询：名字叫做AAA的进程里面的object对象；进程之间通信的数据都会经过运行在内核空间里面的驱动，驱动在数据流过的时候会做一些处理，它并不会给Client进程返回一个真正的object对象，而是返回一个看起来跟object一模一样的代理对象objectProxy，这个objectProxy也有一个add方法，但是这个add方法没有Server进程里面object对象的add方法那个能力；它唯一做的事情就是把参数包装然后交给驱动。</p>\n</li>\n<li><p>驱动收到这个消息，发现是这个objectProxy；通过查表就知道：之前用objectProxy替换了object发送给Client了，它真正应该要访问的是object对象的add方法；于是Binder驱动通知Server进程，调用它的object对象的add方法，然后把结果发给binder驱动，Sever进程收到这个消息，执行add之后将结果返回驱动，驱动然后把结果返回给Client进程；于是整个过程就完成了.</p>\n</li>\n</ul>\n<p>Binder跨进程传输并不是真的把一个对象传输到了另外一个进程；传输过程是在Binder跨进程穿越的时候，它在一个进程留下了一个本体，在另外一个进程则使用该对象的一个proxy；Client进程的操作其实是对于proxy的操作，proxy利用Binder驱动最终让真正的binder对象完成操作。</p>\n<p>Android系统实现这种机制使用的是代理模式, 对于Binder的访问，如果是在同一个进程，那么直接返回原始的Binder实体；如果在不同进程，那么就给他一个代理对象- 在后面的demo中我们可以看见…</p>\n<pre><code>public static ICalculate asInterface(IBinder obj) {\n        if(obj == null) {\n            return null;\n        } else {\n            IInterface iin = obj.queryLocalInterface(&quot;com.zhangfl.jpush.ICalculate&quot;);\n            return (ICalculate)(iin != null &amp;&amp; iin instanceof ICalculate?(ICalculate)iin:new ICalculate.Stub.Proxy(obj));\n        }\n    }\n</code></pre><blockquote>\n<p>Client进程只不过是持有了Server端的代理；代理对象协助驱动完成了跨进程通信。</p>\n</blockquote>\n<h3 id=\"proxy代理模式\"><a href=\"#proxy代理模式\" class=\"headerlink\" title=\"proxy代理模式\"></a>proxy代理模式</h3><p>模式中的三种角色:</p>\n<p><img src=\"/img/binder/proxy_uml.jpg\" alt=\"proxy设计模式\"></p>\n<ul>\n<li><p>抽象角色：声明真实对象和代理对象的共同接口。</p>\n</li>\n<li><p>代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。</p>\n</li>\n<li><p>真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。</p>\n</li>\n</ul>\n<blockquote>\n<p>模式原则: 对修改关闭，对扩展开放，保证了系统的稳定性</p>\n</blockquote>\n<h3 id=\"驱动里面的Binder\"><a href=\"#驱动里面的Binder\" class=\"headerlink\" title=\"驱动里面的Binder\"></a>驱动里面的Binder</h3><p>略过:  具体可以参考源码以及 <a href=\"http://blog.csdn.net/universus/article/details/6211589\">Binder设计与实现</a> 一文</p>\n<h3 id=\"Java层的Binder\"><a href=\"#Java层的Binder\" class=\"headerlink\" title=\"Java层的Binder\"></a>Java层的Binder</h3><p>IBinder/IInterface/Binder/BinderProxy/Stub</p>\n<ul>\n<li><p>IBinder是一个接口，它代表了一种跨进程传输的能力；只要实现了这个接口，就能将这个对象进行跨进程传递；这是驱动底层支持的；在跨进程数据流经驱动的时候，驱动会识别IBinder类型的数据，从而自动完成不同进程Binder本地对象以及Binder代理对象的转换。</p>\n</li>\n<li><p>IInterface代表的就是远程server对象具有的能力。具体来说，就是aidl里面的接口。</p>\n</li>\n<li><p>Java层的Binder类，代表的其实就是Binder本地对象。BinderProxy类是Binder类的一个内部类，它代表远程进程的Binder对象的本地代理；这两个类都继承自IBinder, 因而都具有跨进程传输的能力；实际上，在跨越进程的时候，Binder驱动会自动完成这两个对象的转换。</p>\n</li>\n<li><p>在使用AIDL的时候，编译工具会给我们生成一个Stub的静态内部类；这个类继承了Binder, 说明它是一个Binder本地对象，它实现了IInterface接口，表明它具有远程Server承诺给Client的能力；Stub是一个抽象类，具体的IInterface的相关实现需要我们手动完成. 其实这里使用了策略模式.</p>\n</li>\n</ul>\n<h3 id=\"AIDL过程分析\"><a href=\"#AIDL过程分析\" class=\"headerlink\" title=\"AIDL过程分析\"></a>AIDL过程分析</h3><p>一种固定的模式：</p>\n<ul>\n<li>一个需要跨进程传递的对象一定继承自IBinder，如果是Binder本地对象，那么一定继承Binder实现IInterface，如果是代理对象，那么就实现了IInterface并持有IBinder引用；</li>\n</ul>\n<p>Proxy与Stub不一样，虽然他们都既是Binder又是IInterface，不同的是Stub采用的是继承（is 关系），Proxy采用的是组合（has 关系）。他们均实现了所有的IInterface函数，不同的是，Stub使用策略模式调用的是虚函数（待子类实现），而Proxy则使用组合模式。为什么Stub采用继承而Proxy采用组合？事实上，Stub本身is一个IBinder（Binder），它本身就是一个能跨越进程边界传输的对象，所以它得继承IBinder实现transact这个函数从而得到跨越进程的能力（这个能力由驱动赋予）。Proxy类使用组合，是因为他不关心自己是什么，它也不需要跨越进程传输，它只需要拥有这个能力即可，要拥有这个能力，只需要保留一个对IBinder的引用</p>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo.\"></a>demo.</h3><p>……</p>\n<h3 id=\"系统服务分析\"><a href=\"#系统服务分析\" class=\"headerlink\" title=\"系统服务分析\"></a>系统服务分析</h3><p>IXXX、IXXX.Stub和IXXX.Stub.Proxy，并做好对应。这样看相关的系统服务就比较容易了，以ServiceManager为例</p>\n<p>实际上ServerManager既是系统服务的管理者，同时也是一个系统服务。因此它肯定是基于Binder实现的</p>\n<ul>\n<li><p>与IXXX相对应的类就是IServiceManager类，封装了远程调用的几个主要函数</p>\n</li>\n<li><p>与IXXX.Stub对应的类就是ServiceManagerNative</p>\n</li>\n<li><p>与IXXX.Stub.Proxy对应的类ServiceManagerProxy</p>\n<p>  查看上面相关类的代码，实际上和使用adil生成的代码没什么两样。仅仅是类命名不一样，将三个类分开写了而已。</p>\n<p>  在服务端继承ServiceManagerNative类实现里面的相关方法就能实现服务端，然后在客户端将远程服务端所对应的的Binder封装成：</p>\n<p>  IServiceManager iSm = ServiceManagerNative.asInterface(binder)即可</p>\n<p>  PS： 实际上，在源码中找不到继承自ServiceManagerNative类的远程服务端类ServiceManagerService，根本就找不到这样一个类。原因是SMS在native层被实现成一个独立的进程，是在启动后解析init.rc脚本启动服务的.</p>\n</li>\n</ul>\n<p>再看看ActivityManager中的Binder。</p>\n<ul>\n<li><p>IActivityManager对应IXXX接口</p>\n</li>\n<li><p>ActivityManagerNative对应IXXX.Stub类，继承自Binder类。</p>\n</li>\n<li><p>ActivityManagerProxy对应IXXX.Stub.Proxy类。</p>\n<p>  AMS的服务端就是ActivityManagerService类，这个类继承自ActivityManagerNative，实现了IActivityManager接口中的方法用来进行IPC。</p>\n<p>  只要在客户端得到了这个远程服务端的Binder引用就可以进行IPC通信了</p>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><p><a href=\"https://book.douban.com/subject/1503819/\">linux内核设计与实现</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/universus/article/details/6211589\">Binder设计与实现</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/luoshengyang/article/details/6618363\">Android进程间通信（IPC）机制Binder简要介绍和学习计划系列</a></p>\n</li>\n</ul>\n"},{"title":"罗马人的故事01","toc":true,"comment":true,"date":"2016-05-18T02:57:25.000Z","description":"罗马人的故事01......","_content":"","source":"_posts/罗马人的故事01.md","raw":"---\ntitle: 罗马人的故事01\ntoc: true\ncomment: true\ndate: 2016-05-18 10:57:25\ncategories: history\ntags: book\ndescription: 罗马人的故事01......\n---\n","slug":"罗马人的故事01","published":1,"updated":"2016-05-18T07:04:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioctzhsz000jvzfye9bjd5rc","content":"","excerpt":"","more":""},{"title":"每天随记","date":"2016-05-17T05:31:19.000Z","toc":true,"comment":true,"description":"By plucking her petals you do not gather the beauty of the flower.","_content":"\n# Who\n\nwho am I?\n\n\n# Hello\n\nhello, It's me.\n","source":"_posts/thingking-everyday.md","raw":"---\ntitle: 每天随记\ndate: 2016-05-17 13:31:19\ntags: [life]\ntoc: true\ncomment: true\ndescription: By plucking her petals you do not gather the beauty of the flower.\n---\n\n# Who\n\nwho am I?\n\n\n# Hello\n\nhello, It's me.\n","slug":"thingking-everyday","published":1,"updated":"2016-05-18T07:04:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioctzht5000lvzfyweyne9mf","content":"<h1 id=\"Who\"><a href=\"#Who\" class=\"headerlink\" title=\"Who\"></a>Who</h1><p>who am I?</p>\n<h1 id=\"Hello\"><a href=\"#Hello\" class=\"headerlink\" title=\"Hello\"></a>Hello</h1><p>hello, It’s me.</p>\n","excerpt":"","more":"<h1 id=\"Who\"><a href=\"#Who\" class=\"headerlink\" title=\"Who\"></a>Who</h1><p>who am I?</p>\n<h1 id=\"Hello\"><a href=\"#Hello\" class=\"headerlink\" title=\"Hello\"></a>Hello</h1><p>hello, It’s me.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cioctzhdv0001vzfyk12c1dlz","category_id":"cioctzhe00003vzfyt97ibp43","_id":"cioctzhea0009vzfy9wpqk4g1"},{"post_id":"cioctzhdz0002vzfy6lx203g3","category_id":"cioctzhe00003vzfyt97ibp43","_id":"cioctzheb000cvzfyosjcrosp"},{"post_id":"cioctzhe40004vzfyz8lyyy5p","category_id":"cioctzhe00003vzfyt97ibp43","_id":"cioctzheb000fvzfymvlyzmpp"},{"post_id":"cioctzhe60005vzfyro34ml1n","category_id":"cioctzheb000evzfyt4g4c1d1","_id":"cioctzhec000ivzfyb8hqk7gc"},{"post_id":"cioctzhsz000jvzfye9bjd5rc","category_id":"cioctzht9000ovzfy8rx2a9zv","_id":"cioctzhte000svzfys4wbmrih"}],"PostTag":[{"post_id":"cioctzhe40004vzfyz8lyyy5p","tag_id":"cioctzhe80006vzfyt3h2v5dg","_id":"cioctzhea000bvzfyemc0sh1g"},{"post_id":"cioctzhe60005vzfyro34ml1n","tag_id":"cioctzhe90008vzfy90b711ta","_id":"cioctzhec000gvzfybepgaoze"},{"post_id":"cioctzhe60005vzfyro34ml1n","tag_id":"cioctzheb000dvzfyow0a10tk","_id":"cioctzhec000hvzfy7vtzxhuk"},{"post_id":"cioctzhsz000jvzfye9bjd5rc","tag_id":"cioctzht8000nvzfyd2gvr17q","_id":"cioctzhtd000rvzfyez8wa4ps"},{"post_id":"cioctzht5000lvzfyweyne9mf","tag_id":"cioctzhtd000qvzfymddske8p","_id":"cioctzhte000tvzfyhjfh1ki1"}],"Tag":[{"name":"Yii","_id":"cioctzhe80006vzfyt3h2v5dg"},{"name":"android","_id":"cioctzhe90008vzfy90b711ta"},{"name":"binder","_id":"cioctzheb000dvzfyow0a10tk"},{"name":"book","_id":"cioctzht8000nvzfyd2gvr17q"},{"name":"life","_id":"cioctzhtd000qvzfymddske8p"}]}}